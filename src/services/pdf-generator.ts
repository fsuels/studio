// src/services/pdf-generator.ts
'use server'; // Mark as server-only if intended for server-side use (e.g., Firebase Functions)

import { PDFDocument, StandardFonts, rgb } from 'pdf-lib';
import fontkit from '@pdf-lib/fontkit'; // Ensure fontkit is installed
import fs from 'fs/promises';
import path from 'path';
import Handlebars from 'handlebars';

interface PdfGenerationOptions {
  documentType: string;
  answers: Record<string, any>;
  locale?: string;
}

/**
 * Generates a PDF document based on the provided type and answers.
 * This is a basic example and would need significant expansion for real documents.
 *
 * @param options - The options for PDF generation.
 * @returns A Promise resolving to the PDF bytes as a Uint8Array.
 */
export async function generatePdfDocument(
  options: PdfGenerationOptions
): Promise<Uint8Array> {
  console.log('[pdf-generator] Starting PDF generation for type:', options.documentType);
  console.log('[pdf-generator] With answers:', options.answers);

  try {
    const locale = options.locale || 'en';

    const templatePath = path.join(process.cwd(), 'public', 'templates', locale, `${options.documentType}.md`);
    const hb = Handlebars.create();
    hb.registerHelper('eq', (a: any, b: any) => a === b);

    const templateRaw = await fs.readFile(templatePath, 'utf8');
    const compiled = hb.compile(templateRaw);
    const markdown = compiled(options.answers || {});

    const pdfDoc = await PDFDocument.create();
    pdfDoc.registerFontkit(fontkit); // Register fontkit

    // Embed a standard font (or load a custom one)
    // Using Helvetica as an example
    const helveticaFont = await pdfDoc.embedFont(StandardFonts.Helvetica);
    const helveticaBoldFont = await pdfDoc.embedFont(StandardFonts.HelveticaBold);

    const page = pdfDoc.addPage(); // Default page size (Letter)
    const { width, height } = page.getSize();
    const fontSize = 12;
    const titleFontSize = 18;
    const margin = 50;
    let y = height - margin - titleFontSize;

    // 1. Add Title
    page.drawText(options.documentType, {
      x: margin,
      y: y,
      font: helveticaBoldFont,
      size: titleFontSize,
      color: rgb(0, 0, 0), // Black
    });
    y -= titleFontSize + 20; // Move down after title

    // 2. Add Disclaimer (Important!)
    const disclaimer = `DISCLAIMER: This document was generated by an automated service and is for informational purposes only. It does not constitute legal advice. Consult with a qualified attorney before signing or relying on this document.`;
    page.drawText(disclaimer, {
      x: margin,
      y: y,
      font: helveticaFont,
      size: 8,
      color: rgb(0.5, 0.5, 0.5), // Grey
      maxWidth: width - 2 * margin,
      lineHeight: 10,
    });
    y -= 8 * 3 + 15; // Move down after disclaimer (approx 3 lines)

    // 3. Add Content from template
    const lines = markdown.split(/\r?\n/);
    for (const line of lines) {
      const text = line.trim();
      const textHeight = fontSize * 1.2;
      if (y - textHeight < margin) {
        const newPage = pdfDoc.addPage();
        y = newPage.getSize().height - margin;
      }
      if (text === '') {
        y -= textHeight;
        continue;
      }
      page.drawText(text, {
        x: margin,
        y: y,
        font: helveticaFont,
        size: fontSize,
        color: rgb(0, 0, 0),
        maxWidth: width - 2 * margin,
        lineHeight: fontSize * 1.2,
      });
      y -= textHeight + 2;
    }

    // 4. Add Placeholder Signature Line (if applicable)
    y -= 40; // Space before signature
    if (y < margin + 20) { // Check if enough space for signature line on this page
        const newPage = pdfDoc.addPage();
        y = newPage.getSize().height - margin;
    }
    page.drawLine({
        start: { x: margin, y: y },
        end: { x: margin + 200, y: y },
        thickness: 1,
        color: rgb(0, 0, 0),
    });
    y -= 15;
    page.drawText('Signature', {
        x: margin,
        y: y,
        font: helveticaFont,
        size: 10,
        color: rgb(0.5, 0.5, 0.5),
    });


    // 5. Serialize the PDF document to bytes (a Uint8Array)
    const pdfBytes = await pdfDoc.save();
    console.log('[pdf-generator] PDF generation successful. Size:', pdfBytes.length, 'bytes');
    return pdfBytes;

  } catch (error) {
    console.error('[pdf-generator] Error generating PDF:', error);
    // Depending on the context, re-throw or return an error indicator
    // For now, re-throwing to let the caller handle it
    throw new Error(`Failed to generate PDF: ${error instanceof Error ? error.message : String(error)}`);
  }
}
