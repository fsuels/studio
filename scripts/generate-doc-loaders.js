// scripts/generate-doc-loaders.js
const fs = require('fs');
const path = require('path');

function camelize(str) {
  return str.replace(/-([a-z])/g, (_, c) => c.toUpperCase());
}

const docsRoot = path.join(__dirname, '../src/lib/documents');
const loaders = [];

console.log('[generate-doc-loaders] Starting loader generation...');
console.log(`[generate-doc-loaders] Reading from documents root: ${docsRoot}`);

for (const country of fs.readdirSync(docsRoot)) {
  const countryDir = path.join(docsRoot, country);
  if (!fs.statSync(countryDir).isDirectory()) {
    console.log(`[generate-doc-loaders] Skipping non-directory in docsRoot: ${countryDir}`);
    continue;
  }
  console.log(`[generate-doc-loaders] Processing country: ${country} at ${countryDir}`);

  for (const doc of fs.readdirSync(countryDir)) {
    const docDir = path.join(countryDir, doc);
    if (!fs.statSync(docDir).isDirectory()) {
      console.log(`[generate-doc-loaders] Skipping non-directory in countryDir: ${docDir}`);
      continue;
    }
    console.log(`[generate-doc-loaders] Processing document: ${doc} at ${docDir}`);

    const metaPath = path.join(docDir, 'metadata.ts');
    const metaPathExists = fs.existsSync(metaPath);
    console.log(`[generate-doc-loaders] Checking for metadata.ts at: ${metaPath}. Exists: ${metaPathExists}`);

    if (doc === 'bill-of-sale-vehicle' && country === 'us') {
        console.log(`[generate-doc-loaders] SPECIFIC CHECK for 'bill-of-sale-vehicle' in 'us': metaPath=${metaPath}, exists=${metaPathExists}`);
    }

    if (metaPathExists) {
      const varName = camelize(doc);
      // Ensure the import path correctly points to the 'index.ts' of the document folder
      // which should export the metadata (often aliased, e.g., { billOfSaleVehicleMeta as billOfSaleVehicle })
      // The loader should import the specific aliased export if metadata.ts itself doesn't default export the doc config.
      // The current document structure exports the main config from the `index.ts` of the document folder.
      const importPath = `./documents/${country}/${doc}`; // This will import from the doc's index.ts
      const loader = `  '${country}/${doc}': () => import( /* webpackChunkName: "doc-${country}-${doc}" */ '${importPath}' ).then(m => m.${varName} || m.default || Object.values(m)[0])`;
      
      console.log(`[generate-doc-loaders] Generated loader for ${country}/${doc}: ${loader}`);
      loaders.push(loader);
    } else {
      console.log(`[generate-doc-loaders] SKIPPED ${country}/${doc} - metadata.ts not found.`);
    }
  }
}

const content = `// Auto-generated by scripts/generate-doc-loaders.js
// @ts-nocheck
import type { LegalDocument } from '@/types/documents';

export const docLoaders: Record<string, () => Promise<LegalDocument>> = {
${loaders.join(',\n')}
};

console.log('[document-loaders.ts] Generated docLoaders object with keys:', Object.keys(docLoaders));
`;

const outputPath = path.join(__dirname, '../src/lib/document-loaders.ts');
fs.writeFileSync(outputPath, content);
console.log(`[generate-doc-loaders] Successfully wrote ${loaders.length} loaders to ${outputPath}`);
console.log('[generate-doc-loaders] Loader generation finished.');
