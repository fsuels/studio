const fs = require('fs');
const path = require('path');

function camelize(str) {
  return str.replace(/-([a-z])/g, (_, c) => c.toUpperCase());
}

const docsRoot = path.join(__dirname, '../src/lib/documents');
const loaders = [];

for (const country of fs.readdirSync(docsRoot)) {
  const countryDir = path.join(docsRoot, country);
  if (!fs.statSync(countryDir).isDirectory()) continue;
  for (const doc of fs.readdirSync(countryDir)) {
    const docDir = path.join(countryDir, doc);
    if (!fs.statSync(docDir).isDirectory()) continue;
    const metaPath = path.join(docDir, 'metadata.ts');
    if (fs.existsSync(metaPath)) {
      const varName = camelize(doc);
      const loader = `  '${country}/${doc}': () => import( /* webpackChunkName: \"doc-${country}-${doc}\" */ '../documents/${country}/${doc}' ).then(m => m.${varName})`;
      loaders.push(loader);
    }
  }
}

const content = `// Auto-generated by scripts/generate-doc-loaders.js
import type { LegalDocument } from '@/types/documents';

export const docLoaders: Record<string, () => Promise<LegalDocument>> = {
${loaders.join(',\n')}
};
`;

fs.writeFileSync(path.join(__dirname, '../src/lib/document-loaders.ts'), content);
