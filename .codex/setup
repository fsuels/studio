#!/usr/bin/env bash
set -euo pipefail

# ╔══════════════════════════════════════════════════════════════════════════╗
# ║  Codex bootstrap: install dependencies + Next.js build (skip export/LHCI) ║
# ╚══════════════════════════════════════════════════════════════════════════╝

export npm_config_loglevel=error
echo "🔧  [setup] Installing dependencies and building Next.js…"

###############################################################################
# 1 — Dependency installation                                                 #
###############################################################################
if [[ -f pnpm-lock.yaml ]]; then
  corepack enable pnpm
  echo "📦  Installing via pnpm ci (including devDependencies)"
  pnpm install --frozen-lockfile --prefer-offline
elif [[ -f yarn.lock ]]; then
  corepack enable yarn
  echo "📦  Installing via yarn install (including devDependencies)"
  yarn install --immutable --check-cache
else
  echo "📦  Installing via npm ci (including devDependencies)"
  npm ci --prefer-offline --no-audit --progress=false
fi

###############################################################################
# 2 — Ensure critical dev tools are installed locally                          #
###############################################################################
echo "🛠  Ensuring ESLint, Playwright, and Next.js binaries are installed locally…"
if [[ -f pnpm-lock.yaml ]]; then
  pnpm add -D eslint @eslint/js playwright @playwright/test next
elif [[ -f yarn.lock ]]; then
  yarn add -D eslint @eslint/js playwright @playwright/test next
else
  npm install --save-dev eslint @eslint/js playwright @playwright/test next
fi

# Install Playwright browser binaries if Playwright is available
if command -v npx &> /dev/null && npx playwright --version &> /dev/null; then
  echo "🎭  Installing Playwright browser binaries…"
  npx playwright install --with-deps
fi

###############################################################################
# 3 — Persist Firebase key into .env                                           #
###############################################################################
if [[ -n "${FIREBASE_SERVICE_ACCOUNT_KEY_JSON:-}" ]]; then
  echo "🗝   Writing FIREBASE_SERVICE_ACCOUNT_KEY_JSON to .env"
  printf "FIREBASE_SERVICE_ACCOUNT_KEY_JSON=%s\n" \
    "${FIREBASE_SERVICE_ACCOUNT_KEY_JSON}" > .env.local
fi

###############################################################################
# 4 — Next.js build (skip static export and LHCI to keep under 300 s)         #
###############################################################################
echo "🛠   Running npm run build"
npm run build

###############################################################################
# 5 — Do NOT run `npm run export` or LHCI here (would exceed 300 s)          #
###############################################################################
echo "⚠️   Skipping \`next export\` and \`lhci autorun\` to avoid 300 s timeout."

###############################################################################
# 6 — Helpful global tools (silent)                                           #
###############################################################################
echo "🔧  Installing global helpers silently (eslint, prettier, typescript, firebase-tools)…"
npm install -g eslint prettier typescript firebase-tools > /dev/null 2>&1 || true

echo "✅  [setup] Dependencies installed, dev tools available, and site built."
