#!/usr/bin/env bash
set -euo pipefail

# ╔══════════════════════════════════════════════════════════════════════╗
# ║  Codex bootstrap: build → export → Lighthouse-CI with portable Chrome ║
# ╚══════════════════════════════════════════════════════════════════════╝

export CODEX_SETUP_TIMEOUT=$((15*60))   # 15-min allowance
export PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD=1
export npm_config_loglevel=error

echo "🔧  [setup] Starting environment bootstrap…"

# 1️⃣  Install deps with existing lock-file
if   [[ -f pnpm-lock.yaml ]]; then
  corepack enable pnpm && pnpm install --frozen-lockfile --prefer-offline
elif [[ -f yarn.lock ]]; then
  corepack enable yarn && yarn install --immutable
else
  npm ci --prefer-offline --no-audit --progress=false
fi

# 2️⃣  Persist Firebase key (if Codex injected it)
if [[ -n "${FIREBASE_SERVICE_ACCOUNT_KEY_JSON:-}" ]]; then
  printf "FIREBASE_SERVICE_ACCOUNT_KEY_JSON='%s'\n" \
    "${FIREBASE_SERVICE_ACCOUNT_KEY_JSON}" >> .env
fi

# 3️⃣  Build → static export (to apps/web/out for LHCI)
echo "🛠  Building and exporting Next.js site…"
npm run build
npm run export          # needs "export": "next export -o apps/web/out" in package.json

# 4️⃣  Portable Chromium + Lighthouse-CI
echo "🌐  Installing portable Chromium…"
npx -y @puppeteer/browsers@~2.5.1 install chromium@latest > /dev/null
export CHROME_PATH="$(npx -q @puppeteer/browsers executable-path chromium)"

echo "🌐  Running Lighthouse-CI…"
npx -y lhci@0.14.0 autorun --collect.numberOfRuns=1 --chromePath="$CHROME_PATH" || true

# 5️⃣  Small CLIs Codex sometimes calls
npm install -g eslint prettier typescript firebase-tools > /dev/null 2>&1

echo "✅  Setup finished – ready for Codex."
