diff --git a/src/components/shared/PaymentModal.tsx b/src/components/shared/PaymentModal.tsx
index 3def0bfa..d9065498 100644
--- a/src/components/shared/PaymentModal.tsx
+++ b/src/components/shared/PaymentModal.tsx
@@ -1,96 +1,107 @@
-'use client';
-
-import { useState } from 'react';
-import { loadStripe } from '@stripe/stripe-js';
-import {
-  Elements,
-  useStripe,
-  useElements,
-  PaymentElement,
-} from '@stripe/react-stripe-js';
-import {
-  Dialog,
-  DialogContent,
-  DialogHeader,
-  DialogTitle,
-  DialogDescription,
-} from '@/components/ui/dialog';
-import { Button } from '@/components/ui/button';
-
-const publishableKey = process.env.NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY;
-
-if (!publishableKey) {
-  throw new Error('NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY must be set to initialize Stripe.');
-}
-
-const stripePromise = loadStripe(publishableKey);
-
-interface PaymentModalProps {
-  open: boolean;
-  onClose: () => void;
-  clientSecret: string | null;
-  documentName: string;
-  priceCents: number;
-  onSuccess: () => void;
-}
-
-function CheckoutForm({ onSuccess }: { onSuccess: () => void }) {
-  const stripe = useStripe();
-  const elements = useElements();
-  const [submitting, setSubmitting] = useState(false);
-  const handleSubmit = async (e: React.FormEvent) => {
-    e.preventDefault();
-    if (!stripe || !elements) return;
-    setSubmitting(true);
-    const { error, paymentIntent } = await stripe.confirmPayment({
-      elements,
-      confirmParams: { return_url: window.location.href },
-      redirect: 'if_required',
-    });
-    if (!error && paymentIntent && paymentIntent.status === 'succeeded') {
-      onSuccess();
-    }
-    setSubmitting(false);
-  };
-  return (
-    <form onSubmit={handleSubmit} className="space-y-4 mt-4">
-      <PaymentElement />
-      <Button type="submit" disabled={!stripe || submitting} className="w-full">
-        {submitting ? 'Processing...' : 'Pay'}
-      </Button>
-    </form>
-  );
-}
-
-export default function PaymentModal({
-  open,
-  onClose,
-  clientSecret,
-  documentName,
-  priceCents,
-  onSuccess,
-}: PaymentModalProps) {
-  const options = clientSecret
-    ? { clientSecret, appearance: { theme: 'stripe' } }
-    : undefined;
-  return (
-    <Dialog open={open} onOpenChange={(v) => !v && onClose()}>
-      <DialogContent className="sm:max-w-md bg-card border-border p-6 rounded-lg shadow-xl">
-        <DialogHeader>
-          <DialogTitle>Purchase {documentName}</DialogTitle>
-          <DialogDescription>
-            Complete payment of ${(priceCents / 100).toFixed(2)} to generate
-            your document.
-          </DialogDescription>
-        </DialogHeader>
-        {clientSecret ? (
-          <Elements stripe={stripePromise} options={options}>
-            <CheckoutForm onSuccess={onSuccess} />
-          </Elements>
-        ) : (
-          <p>Loading...</p>
-        )}
-      </DialogContent>
-    </Dialog>
-  );
+'use client';
+
+import { type ReactNode, useState } from 'react';
+import { loadStripe } from '@stripe/stripe-js';
+import {
+  Elements,
+  useStripe,
+  useElements,
+  PaymentElement,
+} from '@stripe/react-stripe-js';
+import {
+  Dialog,
+  DialogContent,
+  DialogHeader,
+  DialogTitle,
+  DialogDescription,
+} from '@/components/ui/dialog';
+import { Button } from '@/components/ui/button';
+
+const publishableKey = process.env.NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY;
+const stripePromise = publishableKey ? loadStripe(publishableKey) : null;
+const MISSING_STRIPE_CONFIGURATION_MESSAGE =
+  'Payments are temporarily unavailable while we finalize Stripe setup. Please contact support if this persists.';
+
+interface PaymentModalProps {
+  open: boolean;
+  onClose: () => void;
+  clientSecret: string | null;
+  documentName: string;
+  priceCents: number;
+  onSuccess: () => void;
+}
+
+function CheckoutForm({ onSuccess }: { onSuccess: () => void }) {
+  const stripe = useStripe();
+  const elements = useElements();
+  const [submitting, setSubmitting] = useState(false);
+  const handleSubmit = async (e: React.FormEvent) => {
+    e.preventDefault();
+    if (!stripe || !elements) return;
+    setSubmitting(true);
+    const { error, paymentIntent } = await stripe.confirmPayment({
+      elements,
+      confirmParams: { return_url: window.location.href },
+      redirect: 'if_required',
+    });
+    if (!error && paymentIntent && paymentIntent.status === 'succeeded') {
+      onSuccess();
+    }
+    setSubmitting(false);
+  };
+  return (
+    <form onSubmit={handleSubmit} className="space-y-4 mt-4">
+      <PaymentElement />
+      <Button type="submit" disabled={!stripe || submitting} className="w-full">
+        {submitting ? 'Processing...' : 'Pay'}
+      </Button>
+    </form>
+  );
+}
+
+export default function PaymentModal({
+  open,
+  onClose,
+  clientSecret,
+  documentName,
+  priceCents,
+  onSuccess,
+}: PaymentModalProps) {
+  const options = clientSecret
+    ? { clientSecret, appearance: { theme: 'stripe' } }
+    : undefined;
+  const isStripeConfigured = Boolean(stripePromise);
+  const hasClientSecret = Boolean(clientSecret);
+
+  let content: ReactNode;
+  if (!isStripeConfigured) {
+    content = (
+      <p className="mt-4 text-sm text-red-600" role="alert">
+        {MISSING_STRIPE_CONFIGURATION_MESSAGE}
+      </p>
+    );
+  } else if (!hasClientSecret) {
+    content = <p>Loading...</p>;
+  } else {
+    content = (
+      <Elements stripe={stripePromise} options={options}>
+        <CheckoutForm onSuccess={onSuccess} />
+      </Elements>
+    );
+  }
+
+  return (
+    <Dialog open={open} onOpenChange={(v) => !v && onClose()}>
+      <DialogContent className="sm:max-w-md bg-card border-border p-6 rounded-lg shadow-xl">
+        <DialogHeader>
+          <DialogTitle>Purchase {documentName}</DialogTitle>
+          <DialogDescription>
+            Complete payment of ${(priceCents / 100).toFixed(2)} to generate
+            your document.
+          </DialogDescription>
+        </DialogHeader>
+        {content}
+      </DialogContent>
+    </Dialog>
+  );
 }
diff --git a/src/app/[locale]/(legal)/checkout/page.tsx b/src/app/[locale]/(legal)/checkout/page.tsx
index 76042c8a..9af05e5c 100644
--- a/src/app/[locale]/(legal)/checkout/page.tsx
+++ b/src/app/[locale]/(legal)/checkout/page.tsx
@@ -1,106 +1,119 @@
-// src/app/[locale]/checkout/page.tsx
-'use client';
-
-import { useSearchParams, useRouter } from 'next/navigation';
-import { useState } from 'react';
-import { loadStripe } from '@stripe/stripe-js';
-import { Button } from '@/components/ui/button';
-import { Loader2 } from 'lucide-react';
-
-// Load stripe.js just once
-const publishableKey = process.env.NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY;
-
-if (!publishableKey) {
-  throw new Error('NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY must be set to initialize Stripe.');
-}
-
-const stripePromise = loadStripe(publishableKey);
-
-export default function CheckoutPage() {
-  const search = useSearchParams();
-  const router = useRouter();
-
-  const locale = search?.get('locale') ?? 'en';
-  const docId = search?.get('docId');
-
-  const [isLoading, setIsLoading] = useState(false);
-
-  if (!docId) {
-    return (
-      <div className="max-w-md mx-auto my-16 p-6 border rounded">
-        <p className="text-red-600 mb-4">No document specified.</p>
-        <Button variant="ghost" onClick={() => router.back()}>
-          Go Back
-        </Button>
-      </div>
-    );
-  }
-
-  const handlePay = async () => {
-    setIsLoading(true);
-    try {
-      // 1) Create a session on your server
-      const res = await fetch('/api/checkout/session', {
-        method: 'POST',
-        headers: { 'Content-Type': 'application/json' },
-        body: JSON.stringify({ docId, locale }),
-      });
-
-      if (!res.ok) {
-        console.error('Failed to create Stripe session:', await res.text());
-        setIsLoading(false);
-        return;
-      }
-
-      const { sessionId } = await res.json();
-      if (!sessionId) {
-        console.error('No sessionId returned from /api/checkout/session');
-        setIsLoading(false);
-        return;
-      }
-
-      // 2) Redirect to Stripe Checkout
-      const stripe = await stripePromise;
-      if (!stripe) {
-        console.error('Stripe.js failed to load');
-        setIsLoading(false);
-        return;
-      }
-
-      const { error } = await stripe.redirectToCheckout({ sessionId });
-      if (error) console.error('redirectToCheckout error:', error.message);
-
-      // no need to setIsLoading(false) hereΓÇö
-      // Stripe will navigate away if all goes well
-    } catch (err) {
-      console.error('Unexpected checkout error:', err);
-      setIsLoading(false);
-    }
-  };
-
-  return (
-    <div className="max-w-md mx-auto my-16 p-6 border rounded">
-      <h1 className="text-xl font-semibold mb-4">Purchase & Download</h1>
-      <p className="mb-6">
-        You&rsquo;re about to purchase{' '}
-        <strong>{docId.replace(/-/g, ' ')}</strong>
-      </p>
-
-      <div className="flex items-center">
-        <Button onClick={handlePay} disabled={isLoading}>
-          {isLoading ? (
-            <>
-              <Loader2 className="mr-2 h-4 w-4 animate-spin" />
-              RedirectingΓÇª
-            </>
-          ) : (
-            'Pay with Card'
-          )}
-        </Button>
-        <Button variant="ghost" className="ml-4" onClick={() => router.back()}>
-          Cancel
-        </Button>
-      </div>
-    </div>
-  );
+// src/app/[locale]/checkout/page.tsx
+'use client';
+
+import { useSearchParams, useRouter } from 'next/navigation';
+import { useState } from 'react';
+import { loadStripe } from '@stripe/stripe-js';
+import { Button } from '@/components/ui/button';
+import { Loader2 } from 'lucide-react';
+
+const publishableKey = process.env.NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY;
+const stripePromise = publishableKey ? loadStripe(publishableKey) : null;
+const CONFIG_ERROR_MESSAGE =
+  'Payments are temporarily unavailable while we finalize Stripe setup. Please contact support if this persists.';
+
+export default function CheckoutPage() {
+  const search = useSearchParams();
+  const router = useRouter();
+
+  const locale = search?.get('locale') ?? 'en';
+  const docId = search?.get('docId');
+
+  const [isLoading, setIsLoading] = useState(false);
+  const [configError, setConfigError] = useState<string | null>(
+    stripePromise ? null : CONFIG_ERROR_MESSAGE,
+  );
+
+  if (!docId) {
+    return (
+      <div className="max-w-md mx-auto my-16 p-6 border rounded">
+        <p className="text-red-600 mb-4">No document specified.</p>
+        <Button variant="ghost" onClick={() => router.back()}>
+          Go Back
+        </Button>
+      </div>
+    );
+  }
+
+  const handlePay = async () => {
+    if (!stripePromise) {
+      setConfigError(CONFIG_ERROR_MESSAGE);
+      return;
+    }
+
+    setIsLoading(true);
+    setConfigError(null);
+
+    try {
+      const res = await fetch('/api/checkout/session', {
+        method: 'POST',
+        headers: { 'Content-Type': 'application/json' },
+        body: JSON.stringify({ docId, locale }),
+      });
+
+      if (!res.ok) {
+        console.error('Failed to create Stripe session:', await res.text());
+        setConfigError('We could not start checkout. Please try again.');
+        return;
+      }
+
+      const { sessionId } = await res.json();
+      if (!sessionId) {
+        console.error('No sessionId returned from /api/checkout/session');
+        setConfigError('We could not start checkout. Please try again.');
+        return;
+      }
+
+      const stripe = await stripePromise;
+      if (!stripe) {
+        console.error('Stripe.js failed to load');
+        setConfigError('Stripe.js failed to load. Please refresh and try again.');
+        return;
+      }
+
+      const { error } = await stripe.redirectToCheckout({ sessionId });
+      if (error) {
+        console.error('redirectToCheckout error:', error.message);
+        setConfigError(error.message ?? 'Stripe redirect failed. Please try again.');
+      }
+    } catch (err) {
+      console.error('Unexpected checkout error:', err);
+      setConfigError('Unexpected error starting checkout. Please try again.');
+    } finally {
+      setIsLoading(false);
+    }
+  };
+
+  const stripeUnavailable = !stripePromise;
+
+  return (
+    <div className="max-w-md mx-auto my-16 p-6 border rounded">
+      <h1 className="text-xl font-semibold mb-4">Purchase & Download</h1>
+      <p className="mb-6">
+        You&rsquo;re about to purchase{' '}
+        <strong>{docId.replace(/-/g, ' ')}</strong>
+      </p>
+
+      <div className="flex items-center">
+        <Button onClick={handlePay} disabled={isLoading || stripeUnavailable}>
+          {isLoading ? (
+            <>
+              <Loader2 className="mr-2 h-4 w-4 animate-spin" />
+              Redirecting...
+            </>
+          ) : (
+            'Pay with Card'
+          )}
+        </Button>
+        <Button variant="ghost" className="ml-4" onClick={() => router.back()}>
+          Cancel
+        </Button>
+      </div>
+      {configError && (
+        <p className="mt-4 text-sm text-red-600" role="alert">
+          {configError}
+        </p>
+      )}
+    </div>
+  );
 }
diff --git a/TEAM/Payments-Monetization/complaint.json b/TEAM/Payments-Monetization/complaint.json
index 681c41c7..930bdc57 100644
--- a/TEAM/Payments-Monetization/complaint.json
+++ b/TEAM/Payments-Monetization/complaint.json
@@ -1,31 +1,3 @@
 {
-  "complaints": [
-    {
-      "id": "complaint-20250919-003",
-      "reported_at": "2025-09-19T18:44:07.857797Z",
-      "reported_by": "Complaints",
-      "summary": "Home page crashes because Stripe publishable key is unset",
-      "details": "Loading the home route triggers PaymentModal, which throws \"NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY must be set to initialize Stripe\" when importing loadStripe (see PaymentModal.tsx lines 20-24). The runtime overlay blocks rendering and payments, and navigation becomes unstable while the module fails to evaluate.",
-      "severity": "critical",
-      "status": "open",
-      "target_pod": "Payments-Monetization",
-      "tags": [
-        "stripe",
-        "env-config",
-        "payment-modal"
-      ],
-      "next_action": "Set NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY (and guard PaymentModal) so the home page and checkout render without runtime errors.",
-      "owner_notes": [],
-      "history": [
-        {
-          "ts": "2025-09-19T18:44:07.857797Z",
-          "note": "Complaint logged by Complaints pod; evidence captured at ops/artifacts/complaints-cycle-0002/stripe-publishable-key-error.txt."
-        },
-        {
-          "ts": "2025-09-19T18:47:58.822494Z",
-          "note": "Added home-request latency evidence; repeated GET / 500s recorded in home-requests-latency.txt."
-        }
-      ]
-    }
-  ]
+  "complaints": []
 }
diff --git a/TEAM/Payments-Monetization/memory.json b/TEAM/Payments-Monetization/memory.json
index d8f13e55..375e1b7d 100644
--- a/TEAM/Payments-Monetization/memory.json
+++ b/TEAM/Payments-Monetization/memory.json
@@ -1,21 +1,24 @@
 {
-    "cycle_id": "payments-cycle-0001",
-    "last_updated": "2025-09-19T15:21:15.8086455Z",
-    "notes": [
-        "Baseline audit flagged invalid Stripe apiVersion usage, mocked integrations, and missing policies; see ops/artifacts/payments-cycle-0001/payments-audit.json.",
-        "Removed hard-coded Stripe publishable fallback; frontend now requires NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY.",
-        "Stripe webhook handler now verifies signatures with HMAC and timing-safe compare (src/lib/stripe-integration.ts).",
-        "Stripe webhook endpoint now validates signatures via stripeIntegration before processing (src/app/api/webhooks/stripe/route.ts).",
-        "Refund automation, wizard payments, and marketplace revenue flows now reuse shared Stripe helpers for API version enforcement.",
-        "Shared getStripeServerClient helper for server routes with jest coverage (src/lib/stripe-server.ts).",
-        "Stripe webhook route now covered by jest tests for signature/payload handling (src/app/api/webhooks/stripe/__tests__/route.test.ts).",
-        ".env templates now include STRIPE_WEBHOOK_SECRET alongside publishable/secret keys.",
-        "Stripe webhook handler now covers checkout.session.completed events with tests.",
-        "Smart-session checkout route now calls real Stripe sessions with test coverage."
-    ],
-    "todos": [
-        "Replace mocked Stripe client/server code with production-ready implementation using supported API versions and secret storage.",
-        "Stand up verified Stripe webhook + Firestore provisioning for subscriptions, documents, and entitlements.",
-        "Coordinate with Compliance to publish refund policy and align Stripe Tax registrations before launch."
-    ]
-}
\ No newline at end of file
+  "cycle_id": "payments-cycle-0002",
+  "last_updated": "2025-09-19T18:54:54.368Z",
+  "notes": [
+    "Baseline audit flagged invalid Stripe apiVersion usage, mocked integrations, and missing policies; see ops/artifacts/payments-cycle-0001/payments-audit.json.",
+    "Removed hard-coded Stripe publishable fallback; frontend now requires NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY.",
+    "Stripe webhook handler now verifies signatures with HMAC and timing-safe compare (src/lib/stripe-integration.ts).",
+    "Stripe webhook endpoint now validates signatures via stripeIntegration before processing (src/app/api/webhooks/stripe/route.ts).",
+    "Refund automation, wizard payments, and marketplace revenue flows now reuse shared Stripe helpers for API version enforcement.",
+    "Shared getStripeServerClient helper for server routes with jest coverage (src/lib/stripe-server.ts).",
+    "Stripe webhook route now covered by jest tests for signature/payload handling (src/app/api/webhooks/stripe/__tests__/route.test.ts).",
+    ".env templates now include STRIPE_WEBHOOK_SECRET alongside publishable/secret keys.",
+    "Stripe webhook handler now covers checkout.session.completed events with tests.",
+    "Smart-session checkout route now calls real Stripe sessions with test coverage.",
+    "Guarded PaymentModal and /[locale]/checkout from missing NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY so the home experience stays available; complaint-20250919-003 closed.",
+    "Captured lint verification (existing repo warnings only) at ops/artifacts/payments-cycle-0002/lint-payments-cycle-0002.txt and archived complaints via scripts/manage-complaints.js."
+  ],
+  "todos": [
+    "Replace mocked Stripe client/server code with production-ready implementation using supported API versions and secret storage.",
+    "Stand up verified Stripe webhook + Firestore provisioning for subscriptions, documents, and entitlements.",
+    "Coordinate with Compliance to publish refund policy and align Stripe Tax registrations before launch.",
+    "Coordinate with Platform to provision NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY in every environment and monitor the guard to ensure it remains fail-safe only."
+  ]
+}
diff --git a/ops/artifacts/payments-cycle-0002/checksums.json b/ops/artifacts/payments-cycle-0002/checksums.json
new file mode 100644
index 00000000..f3f99377
--- /dev/null
+++ b/ops/artifacts/payments-cycle-0002/checksums.json
@@ -0,0 +1,8 @@
+{
+    "ops/artifacts/payments-cycle-0002/lint-payments-cycle-0002.txt":  "E95AC8B0307DCB2BCB33E6421BFE90D9F115CB5750599F67C5AA13A679AD8830",
+    "ops/artifacts/payments-cycle-0002/manage-complaints-output.txt":  "9B8B524529873A81805A3EB9E062848DAB94ABE2B0122822F815ABCD718FCBE5",
+    "src/app/[locale]/(legal)/checkout/page.tsx":  "B6342C91DB6930C48C549BAF17BF991FE7736267B39B72FC68888F73F96BCA7C",
+    "src/components/shared/PaymentModal.tsx":  "3D302826E3378425A11E32CACC1D9BB1F83A86621DBAD393C3305F7553FF86CB",
+    "TEAM/Payments-Monetization/complaint.json":  "5F36AFA8A1DDB34FDAA944F568EBA0F7D30CBD718FBE3D86048653BEBEAA5EC1",
+    "TEAM/Payments-Monetization/memory.json":  "25CE4EC64B72D15113C94015E074ED60B9AD83266E6A85E44513084BD60B33D9"
+}
diff --git a/ops/artifacts/payments-cycle-0002/manage-complaints-output.txt b/ops/artifacts/payments-cycle-0002/manage-complaints-output.txt
new file mode 100644
index 00000000..be8d6643
--- /dev/null
+++ b/ops/artifacts/payments-cycle-0002/manage-complaints-output.txt
@@ -0,0 +1 @@
+Complaint archive + escalation complete.
diff --git a/ops/complaints/archive/Payments-Monetization/complaint-20250919-003.json b/ops/complaints/archive/Payments-Monetization/complaint-20250919-003.json
new file mode 100644
index 00000000..e95e7f61
--- /dev/null
+++ b/ops/complaints/archive/Payments-Monetization/complaint-20250919-003.json
@@ -0,0 +1,39 @@
+{
+  "id": "complaint-20250919-003",
+  "reported_at": "2025-09-19T18:44:07.857797Z",
+  "reported_by": "Complaints",
+  "summary": "Home page crashes because Stripe publishable key is unset",
+  "details": "Loading the home route triggers PaymentModal, which throws \"NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY must be set to initialize Stripe\" when importing loadStripe (see PaymentModal.tsx lines 20-24). The runtime overlay blocks rendering and payments, and navigation becomes unstable while the module fails to evaluate.",
+  "severity": "critical",
+  "status": "resolved",
+  "target_pod": "Payments-Monetization",
+  "tags": [
+    "stripe",
+    "env-config",
+    "payment-modal"
+  ],
+  "next_action": "Monitor Stripe key provisioning during environment rotations; guardrails are in place.",
+  "owner_notes": [
+    "2025-09-19T18:54:05.1381406Z - PaymentModal and checkout guard missing publishable key to prevent runtime crashes; lint log: ops/artifacts/payments-cycle-0002/lint-payments-cycle-0002.txt."
+  ],
+  "history": [
+    {
+      "ts": "2025-09-19T18:44:07.857797Z",
+      "note": "Complaint logged by Complaints pod; evidence captured at ops/artifacts/complaints-cycle-0002/stripe-publishable-key-error.txt."
+    },
+    {
+      "ts": "2025-09-19T18:47:58.822494Z",
+      "note": "Added home-request latency evidence; repeated GET / 500s recorded in home-requests-latency.txt."
+    },
+    {
+      "ts": "2025-09-19T18:54:05.1381406Z",
+      "note": "Payments pod guarded PaymentModal and checkout against missing publishable key; recorded lint evidence under ops/artifacts/payments-cycle-0002/."
+    },
+    {
+      "ts": "2025-09-19T18:54:29.803Z",
+      "note": "Archived to ops/complaints/archive via scripts/manage-complaints.js"
+    }
+  ],
+  "archived_at": "2025-09-19T18:54:29.803Z",
+  "source_pod": "Payments-Monetization"
+}
diff --git a/ops/artifacts/payments-cycle-0002/lint-payments-cycle-0002.txt b/ops/artifacts/payments-cycle-0002/lint-payments-cycle-0002.txt
new file mode 100644
index 00000000..c137ce2d
Binary files /dev/null and b/ops/artifacts/payments-cycle-0002/lint-payments-cycle-0002.txt differ
