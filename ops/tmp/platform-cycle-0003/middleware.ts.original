import { NextRequest, NextResponse } from 'next/server';
import { tenantMiddleware } from '@/middleware/tenant';

const SECURITY_MODE = (process.env.SECURITY_HEADER_MODE ?? 'report-only').toLowerCase();
const REPORT_GROUP = 'csp-endpoint';
const VALID_MODES = new Set(['report-only', 'enforce']);

function resolveSecurityMode(): 'report-only' | 'enforce' {
  if (VALID_MODES.has(SECURITY_MODE)) {
    return SECURITY_MODE as 'report-only' | 'enforce';
  }
  return 'report-only';
}

function buildReportEndpoint(request: NextRequest): string {
  const configured = process.env.NEXT_PUBLIC_CSP_REPORT_URL ?? '/api/security/csp-report';
  if (configured.startsWith('http://') || configured.startsWith('https://')) {
    return configured;
  }

  const hasLeadingSlash = configured.startsWith('/');
  const path = hasLeadingSlash ? configured : `/${configured}`;
  return `${request.nextUrl.origin}${path}`;
}

function applySecurityHeaders(request: NextRequest, response: NextResponse) {
  const mode = resolveSecurityMode();
  const isEnforce = mode === 'enforce';
  const reportEndpoint = buildReportEndpoint(request);

  const baseHeaders: Record<string, string> = {
    'X-Frame-Options': 'DENY',
    'X-Content-Type-Options': 'nosniff',
    'Referrer-Policy': 'strict-origin-when-cross-origin',
    'X-XSS-Protection': '1; mode=block',
    'Permissions-Policy': 'camera=(), microphone=(), geolocation=(), payment=()',
    'Cross-Origin-Opener-Policy': 'same-origin',
    'Cross-Origin-Resource-Policy': 'same-origin',
    'X-DNS-Prefetch-Control': 'off',
    'X-Permitted-Cross-Domain-Policies': 'none',
    'X-Download-Options': 'noopen',
    'Origin-Agent-Cluster': '?1',
  };

  Object.entries(baseHeaders).forEach(([header, value]) => {
    response.headers.set(header, value);
  });

  if (isEnforce) {
    response.headers.set(
      'Strict-Transport-Security',
      'max-age=63072000; includeSubDomains; preload',
    );
  } else {
    response.headers.delete('Strict-Transport-Security');
  }

  const cspDirectives = [
    "default-src 'self'",
    "script-src 'self' 'unsafe-inline' 'unsafe-eval' blob: data: *.googletagmanager.com *.google-analytics.com *.stripe.com *.intercom.io *.googleapis.com *.gstatic.com",
    "style-src 'self' 'unsafe-inline' fonts.googleapis.com",
    "font-src 'self' fonts.gstatic.com data:",
    "img-src 'self' data: blob: *.googleusercontent.com *.stripe.com *.intercom.io cdn.simpleicons.org picsum.photos",
    "connect-src 'self' blob: data: *.firebase.googleapis.com *.firebaseapp.com *.googleapis.com identitytoolkit.googleapis.com securetoken.googleapis.com www.googleapis.com *.stripe.com *.intercom.io wss://*.intercom.io",
    "frame-src 'self' blob: data: *.stripe.com *.intercom.io *.firebaseapp.com *.googleapis.com",
    "object-src 'none'",
    "worker-src 'self' blob: data:",
    `report-uri ${reportEndpoint}`,
    `report-to ${REPORT_GROUP}`,
  ];

  const cspValue = cspDirectives.join('; ');

  if (isEnforce) {
    response.headers.set('Content-Security-Policy', cspValue);
    response.headers.delete('Content-Security-Policy-Report-Only');
    response.headers.delete('Report-To');
    response.headers.delete('NEL');
  } else {
    response.headers.set('Content-Security-Policy-Report-Only', cspValue);
    response.headers.set(
      'Report-To',
      JSON.stringify({
        group: REPORT_GROUP,
        max_age: 108864,
        endpoints: [{ url: reportEndpoint }],
        include_subdomains: true,
      }),
    );
    response.headers.set(
      'NEL',
      JSON.stringify({
        report_to: REPORT_GROUP,
        max_age: 108864,
        failure_fraction: 0.05,
        success_fraction: 0,
      }),
    );
    response.headers.delete('Content-Security-Policy');
  }
}

export async function middleware(request: NextRequest) {
  if (request.nextUrl.pathname === '/__/auth/action') {
    const mode = request.nextUrl.searchParams.get('mode');
    const oobCode = request.nextUrl.searchParams.get('oobCode');
    const continueUrl = request.nextUrl.searchParams.get('continueUrl');
    const lang = request.nextUrl.searchParams.get('lang') || 'en';
    const locale = lang === 'es' ? 'es' : 'en';

    const redirectUrl = new URL(`/${locale}/auth/action`, request.url);
    if (mode) redirectUrl.searchParams.set('mode', mode);
    if (oobCode) redirectUrl.searchParams.set('oobCode', oobCode);
    if (continueUrl) redirectUrl.searchParams.set('continueUrl', continueUrl);

    return NextResponse.redirect(redirectUrl);
  }

  const tenantResponse = await tenantMiddleware(request);

  if (
    tenantResponse.headers.get('x-middleware-rewrite') ||
    tenantResponse.headers.get('x-middleware-redirect') ||
    tenantResponse.status !== 200
  ) {
    return tenantResponse;
  }

  const response = tenantResponse;
  applySecurityHeaders(request, response);

  return response;
}

export const config = {
  matcher: [
    '/((?!api|_next/static|_next/image|favicon.ico|forms|images|templates).*)',
  ],
};
