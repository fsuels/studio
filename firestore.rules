rules_version = '2';
service cloud.firestore {
  match /databases/{db}/documents {
    match /users/{userId}/folders/{folderId} {
      allow create: if request.auth != null &&
        request.auth.uid == userId &&
        request.resource.data.name == folderId &&
        !exists(/databases/$(db)/documents/users/$(userId)/folders/$(folderId));
      allow read, update, delete: if request.auth != null && request.auth.uid == userId;
    }
    match /users/{userId}/{document=**} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    match /reviews/{docId} {
      allow read: if true;
      allow write: if false;
    }
    
    // Immutable audit trail collection
    match /audit_events/{eventId} {
      // Only allow creates (no updates or deletes for immutability)
      allow create: if request.auth != null &&
        // Ensure the event has required fields
        request.resource.data.keys().hasAll(['userId', 'eventType', 'timestamp', 'metadata', 'hash']) &&
        // Ensure the userId matches the authenticated user (or system events)
        (request.resource.data.userId == request.auth.uid || 
         request.resource.data.eventType in ['SYSTEM_STARTUP', 'SYSTEM_SHUTDOWN', 'COMPLIANCE_SCAN']) &&
        // Ensure timestamp is server timestamp
        request.resource.data.timestamp == request.time;
      
      // Users can only read their own events, admins can read all
      allow read: if request.auth != null && 
        (request.auth.uid == resource.data.userId ||
         request.auth.token.admin == true);
      
      // Never allow updates or deletes (immutability)
      allow update, delete: if false;
    }
    
    // Compliance reports collection
    match /compliance_reports/{reportId} {
      // Only admins can create compliance reports
      allow create: if request.auth != null && request.auth.token.admin == true;
      
      // Users can read their own reports, admins can read all
      allow read: if request.auth != null && 
        (request.auth.uid == resource.data.userId ||
         request.auth.token.admin == true);
      
      // Never allow updates or deletes
      allow update, delete: if false;
    }
    
    // Operational metrics collection
    match /operational_metrics/{metricId} {
      // Only authenticated users can create metrics (system events)
      allow create: if request.auth != null &&
        request.resource.data.keys().hasAll(['metricType', 'value', 'timestamp']) &&
        request.resource.data.timestamp == request.time;
      
      // Only admins can read metrics
      allow read: if request.auth != null && request.auth.token.admin == true;
      
      // Never allow updates or deletes (immutable)
      allow update, delete: if false;
    }
    
    // Operational alerts collection
    match /operational_alerts/{alertId} {
      // Only authenticated users can create alerts (system events)
      allow create: if request.auth != null &&
        request.resource.data.keys().hasAll(['type', 'severity', 'message', 'timestamp']) &&
        request.resource.data.timestamp == request.time;
      
      // Only admins can read alerts
      allow read: if request.auth != null && request.auth.token.admin == true;
      
      // Only admins can update alerts (to resolve them)
      allow update: if request.auth != null && 
        request.auth.token.admin == true &&
        request.resource.data.keys().hasOnly(['resolved']) &&
        request.resource.data.resolved == true;
      
      // Never allow deletes
      allow delete: if false;
    }
  }
}
