name: Test Coverage

on:
  push:
    branches: [master, main, develop]
  pull_request:
    branches: [master, main, develop]

jobs:
  test-coverage:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run type checking
        run: npm run typecheck
        
      - name: Run linting
        run: npm run lint

      - name: Run unit tests with coverage
        run: npm run test:coverage:ci

      - name: Generate coverage report
        run: npm run coverage:report:ci

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false
          verbose: true
          
      - name: Upload coverage to Coveralls
        uses: coverallsapp/github-action@v2
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          path-to-lcov: './coverage/lcov.info'

      - name: Enhanced Coverage Summary
        run: |
          echo "## üìä Test Coverage Report - Node.js ${{ matrix.node-version }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          npm run coverage:report:json | jq -r '
            .coverage.total as $total |
            "### Overall Coverage" + "\n" +
            "- **Lines**: " + ($total.lines.pct | tostring) + "% (" + ($total.lines.covered | tostring) + "/" + ($total.lines.total | tostring) + ")" + "\n" +
            "- **Functions**: " + ($total.functions.pct | tostring) + "% (" + ($total.functions.covered | tostring) + "/" + ($total.functions.total | tostring) + ")" + "\n" +
            "- **Branches**: " + ($total.branches.pct | tostring) + "% (" + ($total.branches.covered | tostring) + "/" + ($total.branches.total | tostring) + ")" + "\n" +
            "- **Statements**: " + ($total.statements.pct | tostring) + "% (" + ($total.statements.covered | tostring) + "/" + ($total.statements.total | tostring) + ")" + "\n" +
            "\n### Threshold Status\n" +
            (if .coverage.passedThresholds then "‚úÖ All coverage thresholds met!" else "‚ùå Coverage thresholds not met")
          ' >> $GITHUB_STEP_SUMMARY
          
      - name: Comment coverage on PR
        if: github.event_name == 'pull_request' && matrix.node-version == '20.x'
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          header: coverage-report
          message: |
            ## üìä Test Coverage Report
            
            Coverage report for commit ${{ github.sha }}
            
            ```
            $(npm run coverage:report:ci)
            ```
            
            üìà [View detailed coverage report](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
            
      - name: Upload coverage artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage-report-node-${{ matrix.node-version }}
          path: |
            coverage/
            !coverage/tmp/
          retention-days: 30
          
      - name: Generate coverage badge
        if: (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main') && matrix.node-version == '20.x'
        run: |
          mkdir -p badges
          npm run coverage:badge > badges/coverage.json
          
      - name: Upload coverage badge
        if: (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main') && matrix.node-version == '20.x'
        uses: actions/upload-artifact@v4
        with:
          name: coverage-badge
          path: badges/coverage.json
          retention-days: 90

  coverage-gate:
    runs-on: ubuntu-latest
    needs: test-coverage
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Download coverage artifacts
        uses: actions/download-artifact@v4
        with:
          name: coverage-report-node-20.x
          path: coverage/
          
      - name: Check coverage thresholds
        id: coverage-check
        run: |
          if npm run coverage:report:ci; then
            echo "‚úÖ Coverage thresholds met"
            echo "passed=true" >> $GITHUB_OUTPUT
          else
            echo "‚ùå Coverage thresholds not met"
            echo "passed=false" >> $GITHUB_OUTPUT
            exit 1
          fi
          
      - name: Set status check
        if: always()
        run: |
          if [ "${{ steps.coverage-check.outputs.passed }}" = "true" ]; then
            echo "::notice::Coverage thresholds met ‚úÖ"
          else
            echo "::error::Coverage thresholds not met ‚ùå"
            exit 1
          fi
