name: CI/CD Pipeline

on:
  pull_request:
    branches: [ main, master, develop ]
  push:
    branches: [ main, master ]

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
      
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
          run_install: false
      
      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV
      
      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
      
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      
      - name: Setup Java for Firebase emulator
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '11'
      
      - name: Install Firebase CLI
        run: npm install -g firebase-tools
      
      - name: Cache Firebase emulators
        uses: actions/cache@v3
        with:
          path: ~/.cache/firebase/emulators
          key: ${{ runner.os }}-firebase-emulators-${{ hashFiles('firebase.json') }}
          restore-keys: |
            ${{ runner.os }}-firebase-emulators-
      
      - name: Start Firestore emulator with seed data
        run: |
          # Start emulator in background
          firebase emulators:start --only firestore --import=./seed --export-on-exit=./seed &
          EMULATOR_PID=$!
          echo "EMULATOR_PID=$EMULATOR_PID" >> $GITHUB_ENV
          
          # Wait for emulator to be ready
          timeout 30s bash -c 'until curl -f http://localhost:8080; do sleep 1; done'
          echo "Firestore emulator started successfully"
      
      - name: Run linting
        run: pnpm lint
      
      - name: Run type checking
        run: pnpm typecheck
      
      - name: Run unit tests
        run: pnpm test --coverage --watchAll=false
        env:
          CI: true
          FIRESTORE_EMULATOR_HOST: localhost:8080
      
      - name: Install Playwright browsers
        run: pnpm exec playwright install --with-deps
      
      - name: Run E2E tests
        run: pnpm test:e2e
        env:
          CI: true
          FIRESTORE_EMULATOR_HOST: localhost:8080
          PLAYWRIGHT_BASE_URL: http://localhost:3000
      
      - name: Run search evaluation
        run: |
          echo "Running search weight evaluation..."
          npx ts-node src/scripts/evalSearch.ts > evaluation_output.txt 2>&1
          
          # Extract JSON output from the script output
          tail -n 10 evaluation_output.txt | grep -A 10 "üìä JSON Output:" | grep -A 5 "{" > summary.json || {
            echo "Failed to extract JSON output, creating fallback"
            echo '{"best":{"semantic":0.0,"keyword":0.0,"ndcg":0.0}}' > summary.json
          }
          
          # Display results
          echo "=== Search Evaluation Results ==="
          cat evaluation_output.txt
          echo "=== JSON Summary ==="
          cat summary.json
        env:
          FIRESTORE_EMULATOR_HOST: localhost:8080
      
      - name: Validate search performance
        run: |
          # Check if jq is available, install if not
          if ! command -v jq &> /dev/null; then
            sudo apt-get update && sudo apt-get install -y jq
          fi
          
          # Extract NDCG score and validate
          NDCG_SCORE=$(jq -r '.best.ndcg' summary.json)
          echo "NDCG Score: $NDCG_SCORE"
          
          # Check if NDCG is a valid number
          if ! [[ "$NDCG_SCORE" =~ ^[0-9]*\.?[0-9]+$ ]]; then
            echo "‚ùå Invalid NDCG score: $NDCG_SCORE"
            exit 1
          fi
          
          # Validate NDCG threshold (0.4 for now, can be increased to 0.8 later)
          if (( $(echo "$NDCG_SCORE < 0.4" | bc -l) )); then
            echo "‚ùå Search performance below threshold. NDCG: $NDCG_SCORE < 0.4"
            exit 1
          fi
          
          echo "‚úÖ Search performance validation passed. NDCG: $NDCG_SCORE ‚â• 0.4"
      
      - name: Upload test coverage
        uses: codecov/codecov-action@v3
        if: matrix.node-version == '18.x'
        with:
          fail_ci_if_error: false
      
      - name: Upload search evaluation results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: search-evaluation-results-node-${{ matrix.node-version }}
          path: |
            summary.json
            evaluation_output.txt
          retention-days: 30
      
      - name: Upload Playwright report
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: playwright-report-node-${{ matrix.node-version }}
          path: playwright-report/
          retention-days: 30
      
      - name: Cleanup Firestore emulator
        if: always()
        run: |
          if [ ! -z "$EMULATOR_PID" ]; then
            kill $EMULATOR_PID || true
            wait $EMULATOR_PID 2>/dev/null || true
          fi
          
          # Kill any remaining emulator processes
          pkill -f "firebase.*emulator" || true
  
  build:
    name: Build Check
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18.x'
          cache: 'npm'
      
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
          run_install: false
      
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      
      - name: Build application
        run: pnpm build
        env:
          NODE_ENV: production
          # Add any required build environment variables
          NEXT_PUBLIC_APP_ENV: ci
      
      - name: Check build artifacts
        run: |
          if [ ! -d ".next" ]; then
            echo "‚ùå Build failed - .next directory not found"
            exit 1
          fi
          
          if [ ! -f ".next/BUILD_ID" ]; then
            echo "‚ùå Build failed - BUILD_ID not found"
            exit 1
          fi
          
          echo "‚úÖ Build completed successfully"
          ls -la .next/
  
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18.x'
          cache: 'npm'
      
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
          run_install: false
      
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      
      - name: Run security audit
        run: |
          echo "Running security audit..."
          pnpm audit --audit-level high || {
            echo "‚ö†Ô∏è Security vulnerabilities found"
            echo "Please run 'pnpm audit fix' to resolve issues"
            # Don't fail CI for now, just warn
            # exit 1
          }
      
      - name: Run dependency check
        run: |
          echo "Checking for outdated dependencies..."
          pnpm outdated || echo "Some dependencies may be outdated"

  performance:
    name: Performance Check
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18.x'
          cache: 'npm'
      
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
          run_install: false
      
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      
      - name: Build for performance testing
        run: pnpm build
        env:
          NODE_ENV: production
      
      - name: Install Lighthouse CI
        run: npm install -g @lhci/cli@0.12.x
      
      - name: Run Lighthouse CI
        run: |
          # Start the app in background
          pnpm start &
          APP_PID=$!
          
          # Wait for app to be ready
          timeout 60s bash -c 'until curl -f http://localhost:3000; do sleep 2; done'
          
          # Run Lighthouse
          lhci autorun --upload.target=temporary-public-storage || {
            echo "‚ö†Ô∏è Lighthouse CI failed, continuing..."
          }
          
          # Cleanup
          kill $APP_PID || true
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

  summary:
    name: CI Summary
    runs-on: ubuntu-latest
    needs: [test, build, security]
    if: always()
    
    steps:
      - name: Generate summary
        run: |
          echo "## üîç CI/CD Pipeline Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Tests | ${{ needs.test.result == 'success' && '‚úÖ Passed' || '‚ùå Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Build | ${{ needs.build.result == 'success' && '‚úÖ Passed' || needs.build.result == 'skipped' && '‚è≠Ô∏è Skipped' || '‚ùå Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Security | ${{ needs.security.result == 'success' && '‚úÖ Passed' || needs.security.result == 'skipped' && '‚è≠Ô∏è Skipped' || '‚ùå Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.test.result }}" != "success" ]; then
            echo "‚ùå **Pipeline Failed**: Test suite did not pass" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Please check the test results and fix any failing tests before merging." >> $GITHUB_STEP_SUMMARY
          else
            echo "‚úÖ **Pipeline Passed**: All checks completed successfully" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "This PR is ready for review and merge." >> $GITHUB_STEP_SUMMARY
          fi