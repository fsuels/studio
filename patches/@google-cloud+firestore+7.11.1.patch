diff --git a/node_modules/@google-cloud/firestore/LICENSE b/node_modules/@google-cloud/firestore/LICENSE
old mode 100644
new mode 100755
diff --git a/node_modules/@google-cloud/firestore/README.md b/node_modules/@google-cloud/firestore/README.md
old mode 100644
new mode 100755
diff --git a/node_modules/@google-cloud/firestore/build/protos/admin_v1.json b/node_modules/@google-cloud/firestore/build/protos/admin_v1.json
old mode 100644
new mode 100755
diff --git a/node_modules/@google-cloud/firestore/build/protos/firestore/bundle.proto b/node_modules/@google-cloud/firestore/build/protos/firestore/bundle.proto
old mode 100644
new mode 100755
diff --git a/node_modules/@google-cloud/firestore/build/protos/firestore_admin_v1_proto_api.d.ts b/node_modules/@google-cloud/firestore/build/protos/firestore_admin_v1_proto_api.d.ts
old mode 100644
new mode 100755
diff --git a/node_modules/@google-cloud/firestore/build/protos/firestore_admin_v1_proto_api.js b/node_modules/@google-cloud/firestore/build/protos/firestore_admin_v1_proto_api.js
old mode 100644
new mode 100755
diff --git a/node_modules/@google-cloud/firestore/build/protos/firestore_v1_proto_api.d.ts b/node_modules/@google-cloud/firestore/build/protos/firestore_v1_proto_api.d.ts
old mode 100644
new mode 100755
diff --git a/node_modules/@google-cloud/firestore/build/protos/firestore_v1_proto_api.js b/node_modules/@google-cloud/firestore/build/protos/firestore_v1_proto_api.js
old mode 100644
new mode 100755
diff --git a/node_modules/@google-cloud/firestore/build/protos/firestore_v1beta1_proto_api.d.ts b/node_modules/@google-cloud/firestore/build/protos/firestore_v1beta1_proto_api.d.ts
old mode 100644
new mode 100755
diff --git a/node_modules/@google-cloud/firestore/build/protos/firestore_v1beta1_proto_api.js b/node_modules/@google-cloud/firestore/build/protos/firestore_v1beta1_proto_api.js
old mode 100644
new mode 100755
diff --git a/node_modules/@google-cloud/firestore/build/protos/google/api/annotations.proto b/node_modules/@google-cloud/firestore/build/protos/google/api/annotations.proto
old mode 100644
new mode 100755
diff --git a/node_modules/@google-cloud/firestore/build/protos/google/api/client.proto b/node_modules/@google-cloud/firestore/build/protos/google/api/client.proto
old mode 100644
new mode 100755
diff --git a/node_modules/@google-cloud/firestore/build/protos/google/api/field_behavior.proto b/node_modules/@google-cloud/firestore/build/protos/google/api/field_behavior.proto
old mode 100644
new mode 100755
diff --git a/node_modules/@google-cloud/firestore/build/protos/google/api/http.proto b/node_modules/@google-cloud/firestore/build/protos/google/api/http.proto
old mode 100644
new mode 100755
diff --git a/node_modules/@google-cloud/firestore/build/protos/google/api/launch_stage.proto b/node_modules/@google-cloud/firestore/build/protos/google/api/launch_stage.proto
old mode 100644
new mode 100755
diff --git a/node_modules/@google-cloud/firestore/build/protos/google/api/resource.proto b/node_modules/@google-cloud/firestore/build/protos/google/api/resource.proto
old mode 100644
new mode 100755
diff --git a/node_modules/@google-cloud/firestore/build/protos/google/firestore/admin/v1/backup.proto b/node_modules/@google-cloud/firestore/build/protos/google/firestore/admin/v1/backup.proto
old mode 100644
new mode 100755
diff --git a/node_modules/@google-cloud/firestore/build/protos/google/firestore/admin/v1/database.proto b/node_modules/@google-cloud/firestore/build/protos/google/firestore/admin/v1/database.proto
old mode 100644
new mode 100755
diff --git a/node_modules/@google-cloud/firestore/build/protos/google/firestore/admin/v1/field.proto b/node_modules/@google-cloud/firestore/build/protos/google/firestore/admin/v1/field.proto
old mode 100644
new mode 100755
diff --git a/node_modules/@google-cloud/firestore/build/protos/google/firestore/admin/v1/firestore_admin.proto b/node_modules/@google-cloud/firestore/build/protos/google/firestore/admin/v1/firestore_admin.proto
old mode 100644
new mode 100755
diff --git a/node_modules/@google-cloud/firestore/build/protos/google/firestore/admin/v1/index.proto b/node_modules/@google-cloud/firestore/build/protos/google/firestore/admin/v1/index.proto
old mode 100644
new mode 100755
diff --git a/node_modules/@google-cloud/firestore/build/protos/google/firestore/admin/v1/location.proto b/node_modules/@google-cloud/firestore/build/protos/google/firestore/admin/v1/location.proto
old mode 100644
new mode 100755
diff --git a/node_modules/@google-cloud/firestore/build/protos/google/firestore/admin/v1/operation.proto b/node_modules/@google-cloud/firestore/build/protos/google/firestore/admin/v1/operation.proto
old mode 100644
new mode 100755
diff --git a/node_modules/@google-cloud/firestore/build/protos/google/firestore/admin/v1/schedule.proto b/node_modules/@google-cloud/firestore/build/protos/google/firestore/admin/v1/schedule.proto
old mode 100644
new mode 100755
diff --git a/node_modules/@google-cloud/firestore/build/protos/google/firestore/v1/aggregation_result.proto b/node_modules/@google-cloud/firestore/build/protos/google/firestore/v1/aggregation_result.proto
old mode 100644
new mode 100755
diff --git a/node_modules/@google-cloud/firestore/build/protos/google/firestore/v1/bloom_filter.proto b/node_modules/@google-cloud/firestore/build/protos/google/firestore/v1/bloom_filter.proto
old mode 100644
new mode 100755
diff --git a/node_modules/@google-cloud/firestore/build/protos/google/firestore/v1/common.proto b/node_modules/@google-cloud/firestore/build/protos/google/firestore/v1/common.proto
old mode 100644
new mode 100755
diff --git a/node_modules/@google-cloud/firestore/build/protos/google/firestore/v1/document.proto b/node_modules/@google-cloud/firestore/build/protos/google/firestore/v1/document.proto
old mode 100644
new mode 100755
diff --git a/node_modules/@google-cloud/firestore/build/protos/google/firestore/v1/firestore.proto b/node_modules/@google-cloud/firestore/build/protos/google/firestore/v1/firestore.proto
old mode 100644
new mode 100755
diff --git a/node_modules/@google-cloud/firestore/build/protos/google/firestore/v1/query.proto b/node_modules/@google-cloud/firestore/build/protos/google/firestore/v1/query.proto
old mode 100644
new mode 100755
diff --git a/node_modules/@google-cloud/firestore/build/protos/google/firestore/v1/query_profile.proto b/node_modules/@google-cloud/firestore/build/protos/google/firestore/v1/query_profile.proto
old mode 100644
new mode 100755
diff --git a/node_modules/@google-cloud/firestore/build/protos/google/firestore/v1/write.proto b/node_modules/@google-cloud/firestore/build/protos/google/firestore/v1/write.proto
old mode 100644
new mode 100755
diff --git a/node_modules/@google-cloud/firestore/build/protos/google/firestore/v1beta1/common.proto b/node_modules/@google-cloud/firestore/build/protos/google/firestore/v1beta1/common.proto
old mode 100644
new mode 100755
diff --git a/node_modules/@google-cloud/firestore/build/protos/google/firestore/v1beta1/document.proto b/node_modules/@google-cloud/firestore/build/protos/google/firestore/v1beta1/document.proto
old mode 100644
new mode 100755
diff --git a/node_modules/@google-cloud/firestore/build/protos/google/firestore/v1beta1/firestore.proto b/node_modules/@google-cloud/firestore/build/protos/google/firestore/v1beta1/firestore.proto
old mode 100644
new mode 100755
diff --git a/node_modules/@google-cloud/firestore/build/protos/google/firestore/v1beta1/query.proto b/node_modules/@google-cloud/firestore/build/protos/google/firestore/v1beta1/query.proto
old mode 100644
new mode 100755
diff --git a/node_modules/@google-cloud/firestore/build/protos/google/firestore/v1beta1/undeliverable_first_gen_event.proto b/node_modules/@google-cloud/firestore/build/protos/google/firestore/v1beta1/undeliverable_first_gen_event.proto
old mode 100644
new mode 100755
diff --git a/node_modules/@google-cloud/firestore/build/protos/google/firestore/v1beta1/write.proto b/node_modules/@google-cloud/firestore/build/protos/google/firestore/v1beta1/write.proto
old mode 100644
new mode 100755
diff --git a/node_modules/@google-cloud/firestore/build/protos/google/longrunning/operations.proto b/node_modules/@google-cloud/firestore/build/protos/google/longrunning/operations.proto
old mode 100644
new mode 100755
diff --git a/node_modules/@google-cloud/firestore/build/protos/google/protobuf/any.proto b/node_modules/@google-cloud/firestore/build/protos/google/protobuf/any.proto
old mode 100644
new mode 100755
diff --git a/node_modules/@google-cloud/firestore/build/protos/google/protobuf/descriptor.proto b/node_modules/@google-cloud/firestore/build/protos/google/protobuf/descriptor.proto
old mode 100644
new mode 100755
diff --git a/node_modules/@google-cloud/firestore/build/protos/google/protobuf/duration.proto b/node_modules/@google-cloud/firestore/build/protos/google/protobuf/duration.proto
old mode 100644
new mode 100755
diff --git a/node_modules/@google-cloud/firestore/build/protos/google/protobuf/empty.proto b/node_modules/@google-cloud/firestore/build/protos/google/protobuf/empty.proto
old mode 100644
new mode 100755
diff --git a/node_modules/@google-cloud/firestore/build/protos/google/protobuf/field_mask.proto b/node_modules/@google-cloud/firestore/build/protos/google/protobuf/field_mask.proto
old mode 100644
new mode 100755
diff --git a/node_modules/@google-cloud/firestore/build/protos/google/protobuf/struct.proto b/node_modules/@google-cloud/firestore/build/protos/google/protobuf/struct.proto
old mode 100644
new mode 100755
diff --git a/node_modules/@google-cloud/firestore/build/protos/google/protobuf/timestamp.proto b/node_modules/@google-cloud/firestore/build/protos/google/protobuf/timestamp.proto
old mode 100644
new mode 100755
diff --git a/node_modules/@google-cloud/firestore/build/protos/google/protobuf/wrappers.proto b/node_modules/@google-cloud/firestore/build/protos/google/protobuf/wrappers.proto
old mode 100644
new mode 100755
diff --git a/node_modules/@google-cloud/firestore/build/protos/google/rpc/status.proto b/node_modules/@google-cloud/firestore/build/protos/google/rpc/status.proto
old mode 100644
new mode 100755
diff --git a/node_modules/@google-cloud/firestore/build/protos/google/type/dayofweek.proto b/node_modules/@google-cloud/firestore/build/protos/google/type/dayofweek.proto
old mode 100644
new mode 100755
diff --git a/node_modules/@google-cloud/firestore/build/protos/google/type/latlng.proto b/node_modules/@google-cloud/firestore/build/protos/google/type/latlng.proto
old mode 100644
new mode 100755
diff --git a/node_modules/@google-cloud/firestore/build/protos/v1.json b/node_modules/@google-cloud/firestore/build/protos/v1.json
old mode 100644
new mode 100755
diff --git a/node_modules/@google-cloud/firestore/build/protos/v1beta1.json b/node_modules/@google-cloud/firestore/build/protos/v1beta1.json
old mode 100644
new mode 100755
diff --git a/node_modules/@google-cloud/firestore/build/src/aggregate.d.ts b/node_modules/@google-cloud/firestore/build/src/aggregate.d.ts
old mode 100644
new mode 100755
diff --git a/node_modules/@google-cloud/firestore/build/src/aggregate.js b/node_modules/@google-cloud/firestore/build/src/aggregate.js
old mode 100644
new mode 100755
diff --git a/node_modules/@google-cloud/firestore/build/src/backoff.d.ts b/node_modules/@google-cloud/firestore/build/src/backoff.d.ts
old mode 100644
new mode 100755
diff --git a/node_modules/@google-cloud/firestore/build/src/backoff.js b/node_modules/@google-cloud/firestore/build/src/backoff.js
old mode 100644
new mode 100755
diff --git a/node_modules/@google-cloud/firestore/build/src/bulk-writer.d.ts b/node_modules/@google-cloud/firestore/build/src/bulk-writer.d.ts
old mode 100644
new mode 100755
diff --git a/node_modules/@google-cloud/firestore/build/src/bulk-writer.js b/node_modules/@google-cloud/firestore/build/src/bulk-writer.js
old mode 100644
new mode 100755
diff --git a/node_modules/@google-cloud/firestore/build/src/bundle.d.ts b/node_modules/@google-cloud/firestore/build/src/bundle.d.ts
old mode 100644
new mode 100755
diff --git a/node_modules/@google-cloud/firestore/build/src/bundle.js b/node_modules/@google-cloud/firestore/build/src/bundle.js
old mode 100644
new mode 100755
diff --git a/node_modules/@google-cloud/firestore/build/src/collection-group.d.ts b/node_modules/@google-cloud/firestore/build/src/collection-group.d.ts
old mode 100644
new mode 100755
diff --git a/node_modules/@google-cloud/firestore/build/src/collection-group.js b/node_modules/@google-cloud/firestore/build/src/collection-group.js
old mode 100644
new mode 100755
diff --git a/node_modules/@google-cloud/firestore/build/src/convert.d.ts b/node_modules/@google-cloud/firestore/build/src/convert.d.ts
old mode 100644
new mode 100755
diff --git a/node_modules/@google-cloud/firestore/build/src/convert.js b/node_modules/@google-cloud/firestore/build/src/convert.js
old mode 100644
new mode 100755
diff --git a/node_modules/@google-cloud/firestore/build/src/document-change.d.ts b/node_modules/@google-cloud/firestore/build/src/document-change.d.ts
old mode 100644
new mode 100755
diff --git a/node_modules/@google-cloud/firestore/build/src/document-change.js b/node_modules/@google-cloud/firestore/build/src/document-change.js
old mode 100644
new mode 100755
diff --git a/node_modules/@google-cloud/firestore/build/src/document-reader.d.ts b/node_modules/@google-cloud/firestore/build/src/document-reader.d.ts
old mode 100644
new mode 100755
diff --git a/node_modules/@google-cloud/firestore/build/src/document-reader.js b/node_modules/@google-cloud/firestore/build/src/document-reader.js
old mode 100644
new mode 100755
diff --git a/node_modules/@google-cloud/firestore/build/src/document.d.ts b/node_modules/@google-cloud/firestore/build/src/document.d.ts
old mode 100644
new mode 100755
diff --git a/node_modules/@google-cloud/firestore/build/src/document.js b/node_modules/@google-cloud/firestore/build/src/document.js
old mode 100644
new mode 100755
diff --git a/node_modules/@google-cloud/firestore/build/src/field-value.d.ts b/node_modules/@google-cloud/firestore/build/src/field-value.d.ts
old mode 100644
new mode 100755
diff --git a/node_modules/@google-cloud/firestore/build/src/field-value.js b/node_modules/@google-cloud/firestore/build/src/field-value.js
old mode 100644
new mode 100755
diff --git a/node_modules/@google-cloud/firestore/build/src/filter.d.ts b/node_modules/@google-cloud/firestore/build/src/filter.d.ts
old mode 100644
new mode 100755
diff --git a/node_modules/@google-cloud/firestore/build/src/filter.js b/node_modules/@google-cloud/firestore/build/src/filter.js
old mode 100644
new mode 100755
diff --git a/node_modules/@google-cloud/firestore/build/src/geo-point.d.ts b/node_modules/@google-cloud/firestore/build/src/geo-point.d.ts
deleted file mode 100644
index 469c236..0000000
--- a/node_modules/@google-cloud/firestore/build/src/geo-point.d.ts
+++ /dev/null
@@ -1,83 +0,0 @@
-/*!
- * Copyright 2018 Google Inc. All Rights Reserved.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-import * as firestore from '@google-cloud/firestore';
-import { google } from '../protos/firestore_v1_proto_api';
-import { Serializable } from './serializer';
-import api = google.firestore.v1;
-/**
- * An immutable object representing a geographic location in Firestore. The
- * location is represented as a latitude/longitude pair.
- *
- * @class
- */
-export declare class GeoPoint implements Serializable, firestore.GeoPoint {
-    private readonly _latitude;
-    private readonly _longitude;
-    /**
-     * Creates a [GeoPoint]{@link GeoPoint}.
-     *
-     * @param {number} latitude The latitude as a number between -90 and 90.
-     * @param {number} longitude The longitude as a number between -180 and 180.
-     *
-     * @example
-     * ```
-     * let data = {
-     *   google: new Firestore.GeoPoint(37.422, 122.084)
-     * };
-     *
-     * firestore.doc('col/doc').set(data).then(() => {
-     *   console.log(`Location is ${data.google.latitude}, ` +
-     *     `${data.google.longitude}`);
-     * });
-     * ```
-     */
-    constructor(latitude: number, longitude: number);
-    /**
-     * The latitude as a number between -90 and 90.
-     *
-     * @type {number}
-     * @name GeoPoint#latitude
-     * @readonly
-     */
-    get latitude(): number;
-    /**
-     * The longitude as a number between -180 and 180.
-     *
-     * @type {number}
-     * @name GeoPoint#longitude
-     * @readonly
-     */
-    get longitude(): number;
-    /**
-     * Returns true if this `GeoPoint` is equal to the provided value.
-     *
-     * @param {*} other The value to compare against.
-     * @return {boolean} true if this `GeoPoint` is equal to the provided value.
-     */
-    isEqual(other: firestore.GeoPoint): boolean;
-    /**
-     * Converts the GeoPoint to a google.type.LatLng proto.
-     * @private
-     * @internal
-     */
-    toProto(): api.IValue;
-    /**
-     * Converts a google.type.LatLng proto to its GeoPoint representation.
-     * @private
-     * @internal
-     */
-    static fromProto(proto: google.type.ILatLng): GeoPoint;
-}
diff --git a/node_modules/@google-cloud/firestore/build/src/geo-point.js b/node_modules/@google-cloud/firestore/build/src/geo-point.js
old mode 100644
new mode 100755
diff --git a/node_modules/@google-cloud/firestore/build/src/index.d.ts b/node_modules/@google-cloud/firestore/build/src/index.d.ts
deleted file mode 100644
index 726a994..0000000
--- a/node_modules/@google-cloud/firestore/build/src/index.d.ts
+++ /dev/null
@@ -1,990 +0,0 @@
-/*!
- * Copyright 2017 Google Inc. All Rights Reserved.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-import * as firestore from '@google-cloud/firestore';
-import { Duplex } from 'stream';
-import { google } from '../protos/firestore_v1_proto_api';
-import { BulkWriter } from './bulk-writer';
-import { BundleBuilder } from './bundle';
-import { DocumentSnapshot, QueryDocumentSnapshot } from './document';
-import { CollectionReference } from './reference/collection-reference';
-import { DocumentReference } from './reference/document-reference';
-import { Serializer } from './serializer';
-import { Transaction } from './transaction';
-import { FirestoreStreamingMethod, FirestoreUnaryMethod } from './types';
-import { WriteBatch } from './write-batch';
-import api = google.firestore.v1;
-import { CollectionGroup } from './collection-group';
-import { TraceUtil } from './telemetry/trace-util';
-export { CollectionReference } from './reference/collection-reference';
-export { DocumentReference } from './reference/document-reference';
-export { QuerySnapshot } from './reference/query-snapshot';
-export { Query } from './reference/query';
-export type { AggregateQuery } from './reference/aggregate-query';
-export type { AggregateQuerySnapshot } from './reference/aggregate-query-snapshot';
-export type { VectorQuery } from './reference/vector-query';
-export type { VectorQuerySnapshot } from './reference/vector-query-snapshot';
-export type { VectorQueryOptions } from './reference/vector-query-options';
-export { BulkWriter } from './bulk-writer';
-export type { BulkWriterError } from './bulk-writer';
-export type { BundleBuilder } from './bundle';
-export { DocumentSnapshot, QueryDocumentSnapshot } from './document';
-export { FieldValue, VectorValue } from './field-value';
-export { Filter } from './filter';
-export { WriteBatch, WriteResult } from './write-batch';
-export { Transaction } from './transaction';
-export { Timestamp } from './timestamp';
-export { DocumentChange } from './document-change';
-export type { DocumentChangeType } from './document-change';
-export { FieldPath } from './path';
-export { GeoPoint } from './geo-point';
-export { CollectionGroup };
-export { QueryPartition } from './query-partition';
-export { setLogFunction } from './logger';
-export { Aggregate, AggregateField } from './aggregate';
-export type { AggregateFieldType, AggregateSpec, AggregateType, } from './aggregate';
-export type { PlanSummary, ExecutionStats, ExplainMetrics, ExplainResults, } from './query-profile';
-/**
- * The maximum number of times to retry idempotent requests.
- * @private
- */
-export declare const MAX_REQUEST_RETRIES = 5;
-/**
- * The maximum number of times to attempt a transaction before failing.
- * @private
- */
-export declare const DEFAULT_MAX_TRANSACTION_ATTEMPTS = 5;
-/*!
- * The default number of idle GRPC channel to keep.
- */
-export declare const DEFAULT_MAX_IDLE_CHANNELS = 1;
-/**
- * Document data (e.g. for use with
- * [set()]{@link DocumentReference#set}) consisting of fields mapped
- * to values.
- *
- * @typedef {Object.<string, *>} DocumentData
- */
-/**
- * Converter used by [withConverter()]{@link Query#withConverter} to transform
- * user objects of type `AppModelType` into Firestore data of type
- * `DbModelType`.
- *
- * Using the converter allows you to specify generic type arguments when storing
- * and retrieving objects from Firestore.
- *
- * @example
- * ```
- * class Post {
- *   constructor(readonly title: string, readonly author: string) {}
- *
- *   toString(): string {
- *     return this.title + ', by ' + this.author;
- *   }
- * }
- *
- * const postConverter = {
- *   toFirestore(post: Post): FirebaseFirestore.DocumentData {
- *     return {title: post.title, author: post.author};
- *   },
- *   fromFirestore(
- *     snapshot: FirebaseFirestore.QueryDocumentSnapshot
- *   ): Post {
- *     const data = snapshot.data();
- *     return new Post(data.title, data.author);
- *   }
- * };
- *
- * const postSnap = await Firestore()
- *   .collection('posts')
- *   .withConverter(postConverter)
- *   .doc().get();
- * const post = postSnap.data();
- * if (post !== undefined) {
- *   post.title; // string
- *   post.toString(); // Should be defined
- *   post.someNonExistentProperty; // TS error
- * }
- *
- * ```
- * @property {Function} toFirestore Called by the Firestore SDK to convert a
- * custom model object of type `AppModelType` into a plain Javascript object
- * (suitable for writing directly to the Firestore database).
- * @property {Function} fromFirestore Called by the Firestore SDK to convert
- * Firestore data into an object of type `AppModelType`.
- * @typedef {Object} FirestoreDataConverter
- */
-/**
- * Update data (for use with [update]{@link DocumentReference#update})
- * that contains paths mapped to values. Fields that contain dots
- * reference nested fields within the document.
- *
- * You can update a top-level field in your document by using the field name
- * as a key (e.g. `foo`). The provided value completely replaces the contents
- * for this field.
- *
- * You can also update a nested field directly by using its field path as a key
- * (e.g. `foo.bar`). This nested field update replaces the contents at `bar`
- * but does not modify other data under `foo`.
- *
- * @example
- * ```
- * const documentRef = firestore.doc('coll/doc');
- * documentRef.set({a1: {a2: 'val'}, b1: {b2: 'val'}, c1: {c2: 'val'}});
- * documentRef.update({
- *  b1: {b3: 'val'},
- *  'c1.c3': 'val',
- * });
- * // Value is {a1: {a2: 'val'}, b1: {b3: 'val'}, c1: {c2: 'val', c3: 'val'}}
- *
- * ```
- * @typedef {Object.<string, *>} UpdateData
- */
-/**
- * An options object that configures conditional behavior of
- * [update()]{@link DocumentReference#update} and
- * [delete()]{@link DocumentReference#delete} calls in
- * [DocumentReference]{@link DocumentReference},
- * [WriteBatch]{@link WriteBatch}, [BulkWriter]{@link BulkWriter}, and
- * [Transaction]{@link Transaction}. Using Preconditions, these calls
- * can be restricted to only apply to documents that match the specified
- * conditions.
- *
- * @example
- * ```
- * const documentRef = firestore.doc('coll/doc');
- *
- * documentRef.get().then(snapshot => {
- *   const updateTime = snapshot.updateTime;
- *
- *   console.log(`Deleting document at update time: ${updateTime.toDate()}`);
- *   return documentRef.delete({ lastUpdateTime: updateTime });
- * });
- *
- * ```
- * @property {Timestamp} lastUpdateTime The update time to enforce. If set,
- *  enforces that the document was last updated at lastUpdateTime. Fails the
- *  operation if the document was last updated at a different time.
- * @property {boolean} exists If set, enforces that the target document must
- * or must not exist.
- * @typedef {Object} Precondition
- */
-/**
- * An options object that configures the behavior of
- * [set()]{@link DocumentReference#set} calls in
- * [DocumentReference]{@link DocumentReference},
- * [WriteBatch]{@link WriteBatch}, and
- * [Transaction]{@link Transaction}. These calls can be
- * configured to perform granular merges instead of overwriting the target
- * documents in their entirety by providing a SetOptions object with
- * { merge : true }.
- *
- * @property {boolean} merge Changes the behavior of a set() call to only
- * replace the values specified in its data argument. Fields omitted from the
- * set() call remain untouched.
- * @property {Array<(string|FieldPath)>} mergeFields Changes the behavior of
- * set() calls to only replace the specified field paths. Any field path that is
- * not specified is ignored and remains untouched.
- * It is an error to pass a SetOptions object to a set() call that is missing a
- * value for any of the fields specified here.
- * @typedef {Object} SetOptions
- */
-/**
- * An options object that can be used to configure the behavior of
- * [getAll()]{@link Firestore#getAll} calls. By providing a `fieldMask`, these
- * calls can be configured to only return a subset of fields.
- *
- * @property {Array<(string|FieldPath)>} fieldMask Specifies the set of fields
- * to return and reduces the amount of data transmitted by the backend.
- * Adding a field mask does not filter results. Documents do not need to
- * contain values for all the fields in the mask to be part of the result set.
- * @typedef {Object} ReadOptions
- */
-/**
- * An options object to configure throttling on BulkWriter.
- *
- * Whether to disable or configure throttling. By default, throttling is
- * enabled. `throttling` can be set to either a boolean or a config object.
- * Setting it to `true` will use default values. You can override the defaults
- * by setting it to `false` to disable throttling, or by setting the config
- * values to enable throttling with the provided values.
- *
- * @property {boolean|Object} throttling Whether to disable or enable
- * throttling. Throttling is enabled by default, if the field is set to `true`
- * or if any custom throttling options are provided. `{ initialOpsPerSecond:
- * number }` sets the initial maximum number of operations per second allowed by
- * the throttler. If `initialOpsPerSecond` is not set, the default is 500
- * operations per second. `{ maxOpsPerSecond: number }` sets the maximum number
- * of operations per second allowed by the throttler. If `maxOpsPerSecond` is
- * not set, no maximum is enforced.
- * @typedef {Object} BulkWriterOptions
- */
-/**
- * An error thrown when a BulkWriter operation fails.
- *
- * The error used by {@link BulkWriter~shouldRetryCallback} set in
- * {@link BulkWriter#onWriteError}.
- *
- * @property {GrpcStatus} code The status code of the error.
- * @property {string} message The error message of the error.
- * @property {DocumentReference} documentRef The document reference the
- * operation was performed on.
- * @property {'create' | 'set' | 'update' | 'delete'} operationType The type
- * of operation performed.
- * @property {number} failedAttempts How many times this operation has been
- * attempted unsuccessfully.
- * @typedef {Error} BulkWriterError
- */
-/**
- * Status codes returned by GRPC operations.
- *
- * @see https://github.com/grpc/grpc/blob/master/doc/statuscodes.md
- *
- * @enum {number}
- * @typedef {Object} GrpcStatus
- */
-/**
- * The Firestore client represents a Firestore Database and is the entry point
- * for all Firestore operations.
- *
- * @see [Firestore Documentation]{@link https://firebase.google.com/docs/firestore/}
- *
- * @class
- *
- * @example Install the client library with <a href="https://www.npmjs.com/">npm</a>:
- * ```
- * npm install --save @google-cloud/firestore
- *
- * ```
- * @example Import the client library
- * ```
- * var Firestore = require('@google-cloud/firestore');
- *
- * ```
- * @example Create a client that uses <a href="https://cloud.google.com/docs/authentication/production#providing_credentials_to_your_application">Application Default Credentials (ADC)</a>:
- * ```
- * var firestore = new Firestore();
- *
- * ```
- * @example Create a client with <a href="https://cloud.google.com/docs/authentication/production#obtaining_and_providing_service_account_credentials_manually">explicit credentials</a>:
- * ```
- * var firestore = new Firestore({ projectId:
- * 'your-project-id', keyFilename: '/path/to/keyfile.json'
- * });
- *
- * ```
- * @example <caption>include:samples/quickstart.js</caption>
- * region_tag:firestore_quickstart
- * Full quickstart example:
- */
-export declare class Firestore implements firestore.Firestore {
-    /**
-     * A client pool to distribute requests over multiple GAPIC clients in order
-     * to work around a connection limit of 100 concurrent requests per client.
-     * @private
-     * @internal
-     */
-    private _clientPool;
-    /**
-     * Preloaded instance of google-gax (full module, with gRPC support).
-     */
-    private _gax?;
-    /**
-     * Preloaded instance of google-gax HTTP fallback implementation (no gRPC).
-     */
-    private _gaxFallback?;
-    /**
-     * The configuration options for the GAPIC client.
-     * @private
-     * @internal
-     */
-    _settings: firestore.Settings;
-    /**
-     * Settings for the exponential backoff used by the streaming endpoints.
-     * @private
-     * @internal
-     */
-    private _backoffSettings;
-    /**
-     * Whether the initialization settings can still be changed by invoking
-     * `settings()`.
-     * @private
-     * @internal
-     */
-    private _settingsFrozen;
-    /**
-     * The serializer to use for the Protobuf transformation.
-     * @private
-     * @internal
-     */
-    _serializer: Serializer | null;
-    /**
-     * The OpenTelemetry tracing utility object.
-     * @private
-     * @internal
-     */
-    _traceUtil: TraceUtil;
-    /**
-     * The project ID for this client.
-     *
-     * The project ID is auto-detected during the first request unless a project
-     * ID is passed to the constructor (or provided via `.settings()`).
-     * @private
-     * @internal
-     */
-    private _projectId;
-    /**
-     * The database ID provided via `.settings()`.
-     *
-     * @private
-     * @internal
-     */
-    private _databaseId;
-    /**
-     * Count of listeners that have been registered on the client.
-     *
-     * The client can only be terminated when there are no pending writes or
-     * registered listeners.
-     * @private
-     * @internal
-     */
-    private registeredListenersCount;
-    /**
-     * A lazy-loaded BulkWriter instance to be used with recursiveDelete() if no
-     * BulkWriter instance is provided.
-     *
-     * @private
-     * @internal
-     */
-    private _bulkWriter;
-    /**
-     * Lazy-load the Firestore's default BulkWriter.
-     *
-     * @private
-     * @internal
-     */
-    private getBulkWriter;
-    /**
-     * Number of pending operations on the client.
-     *
-     * The client can only be terminated when there are no pending writes or
-     * registered listeners.
-     * @private
-     * @internal
-     */
-    private bulkWritersCount;
-    /**
-     * @param {Object=} settings [Configuration object](#/docs).
-     * @param {string=} settings.projectId The project ID from the Google
-     * Developer's Console, e.g. 'grape-spaceship-123'. We will also check the
-     * environment variable GCLOUD_PROJECT for your project ID.  Can be omitted in
-     * environments that support
-     * {@link https://cloud.google.com/docs/authentication Application Default
-     * Credentials}
-     * @param {string=} settings.keyFilename Local file containing the Service
-     * Account credentials as downloaded from the Google Developers Console. Can
-     * be omitted in environments that support
-     * {@link https://cloud.google.com/docs/authentication Application Default
-     * Credentials}. To configure Firestore with custom credentials, use
-     * `settings.credentials` and provide the `client_email` and `private_key` of
-     * your service account.
-     * @param {{client_email:string=, private_key:string=}=} settings.credentials
-     * The `client_email` and `private_key` properties of the service account
-     * to use with your Firestore project. Can be omitted in environments that
-     * support {@link https://cloud.google.com/docs/authentication Application
-     * Default Credentials}. If your credentials are stored in a JSON file, you
-     * can specify a `keyFilename` instead.
-     * @param {string=} settings.host The host to connect to.
-     * @param {boolean=} settings.ssl Whether to use SSL when connecting.
-     * @param {number=} settings.maxIdleChannels The maximum number of idle GRPC
-     * channels to keep. A smaller number of idle channels reduces memory usage
-     * but increases request latency for clients with fluctuating request rates.
-     * If set to 0, shuts down all GRPC channels when the client becomes idle.
-     * Defaults to 1.
-     * @param {boolean=} settings.ignoreUndefinedProperties Whether to skip nested
-     * properties that are set to `undefined` during object serialization. If set
-     * to `true`, these properties are skipped and not written to Firestore. If
-     * set `false` or omitted, the SDK throws an exception when it encounters
-     * properties of type `undefined`.
-     * @param {boolean=} settings.preferRest Whether to force the use of HTTP/1.1 REST
-     * transport until a method that requires gRPC is called. When a method requires gRPC,
-     * this Firestore client will load dependent gRPC libraries and then use gRPC transport
-     * for communication from that point forward. Currently the only operation
-     * that requires gRPC is creating a snapshot listener with the method
-     * `DocumentReference<T>.onSnapshot()`, `CollectionReference<T>.onSnapshot()`, or
-     * `Query<T>.onSnapshot()`. If specified, this setting value will take precedent over the
-     * environment variable `FIRESTORE_PREFER_REST`. If not specified, the
-     * SDK will use the value specified in the environment variable `FIRESTORE_PREFER_REST`.
-     * Valid values of `FIRESTORE_PREFER_REST` are `true` ('1') or `false` (`0`). Values are
-     * not case-sensitive. Any other value for the environment variable will be ignored and
-     * a warning will be logged to the console.
-     */
-    constructor(settings?: firestore.Settings);
-    /**
-     * Specifies custom settings to be used to configure the `Firestore`
-     * instance. Can only be invoked once and before any other Firestore method.
-     *
-     * If settings are provided via both `settings()` and the `Firestore`
-     * constructor, both settings objects are merged and any settings provided via
-     * `settings()` take precedence.
-     *
-     * @param {object} settings The settings to use for all Firestore operations.
-     */
-    settings(settings: firestore.Settings): void;
-    private validateAndApplySettings;
-    private newTraceUtilInstance;
-    /**
-     * Returns the Project ID for this Firestore instance. Validates that
-     * `initializeIfNeeded()` was called before.
-     *
-     * @private
-     * @internal
-     */
-    get projectId(): string;
-    /**
-     * Returns the Database ID for this Firestore instance.
-     */
-    get databaseId(): string;
-    /**
-     * Returns the root path of the database. Validates that
-     * `initializeIfNeeded()` was called before.
-     *
-     * @private
-     * @internal
-     */
-    get formattedName(): string;
-    /**
-     * Gets a [DocumentReference]{@link DocumentReference} instance that
-     * refers to the document at the specified path.
-     *
-     * @param {string} documentPath A slash-separated path to a document.
-     * @returns {DocumentReference} The
-     * [DocumentReference]{@link DocumentReference} instance.
-     *
-     * @example
-     * ```
-     * let documentRef = firestore.doc('collection/document');
-     * console.log(`Path of document is ${documentRef.path}`);
-     * ```
-     */
-    doc(documentPath: string): DocumentReference;
-    /**
-     * Gets a [CollectionReference]{@link CollectionReference} instance
-     * that refers to the collection at the specified path.
-     *
-     * @param {string} collectionPath A slash-separated path to a collection.
-     * @returns {CollectionReference} The
-     * [CollectionReference]{@link CollectionReference} instance.
-     *
-     * @example
-     * ```
-     * let collectionRef = firestore.collection('collection');
-     *
-     * // Add a document with an auto-generated ID.
-     * collectionRef.add({foo: 'bar'}).then((documentRef) => {
-     *   console.log(`Added document at ${documentRef.path})`);
-     * });
-     * ```
-     */
-    collection(collectionPath: string): CollectionReference;
-    /**
-     * Creates and returns a new Query that includes all documents in the
-     * database that are contained in a collection or subcollection with the
-     * given collectionId.
-     *
-     * @param {string} collectionId Identifies the collections to query over.
-     * Every collection or subcollection with this ID as the last segment of its
-     * path will be included. Cannot contain a slash.
-     * @returns {CollectionGroup} The created CollectionGroup.
-     *
-     * @example
-     * ```
-     * let docA = firestore.doc('mygroup/docA').set({foo: 'bar'});
-     * let docB = firestore.doc('abc/def/mygroup/docB').set({foo: 'bar'});
-     *
-     * Promise.all([docA, docB]).then(() => {
-     *    let query = firestore.collectionGroup('mygroup');
-     *    query = query.where('foo', '==', 'bar');
-     *    return query.get().then(snapshot => {
-     *       console.log(`Found ${snapshot.size} documents.`);
-     *    });
-     * });
-     * ```
-     */
-    collectionGroup(collectionId: string): CollectionGroup;
-    /**
-     * Creates a [WriteBatch]{@link WriteBatch}, used for performing
-     * multiple writes as a single atomic operation.
-     *
-     * @returns {WriteBatch} A WriteBatch that operates on this Firestore
-     * client.
-     *
-     * @example
-     * ```
-     * let writeBatch = firestore.batch();
-     *
-     * // Add two documents in an atomic batch.
-     * let data = { foo: 'bar' };
-     * writeBatch.set(firestore.doc('col/doc1'), data);
-     * writeBatch.set(firestore.doc('col/doc2'), data);
-     *
-     * writeBatch.commit().then(res => {
-     *   console.log('Successfully executed batch.');
-     * });
-     * ```
-     */
-    batch(): WriteBatch;
-    /**
-     * Creates a [BulkWriter]{@link BulkWriter}, used for performing
-     * multiple writes in parallel. Gradually ramps up writes as specified
-     * by the 500/50/5 rule.
-     *
-     * If you pass [BulkWriterOptions]{@link BulkWriterOptions}, you can
-     * configure the throttling rates for the created BulkWriter.
-     *
-     * @see [500/50/5 Documentation]{@link https://firebase.google.com/docs/firestore/best-practices#ramping_up_traffic}
-     *
-     * @param {BulkWriterOptions=} options BulkWriter options.
-     * @returns {BulkWriter} A BulkWriter that operates on this Firestore
-     * client.
-     *
-     * @example
-     * ```
-     * let bulkWriter = firestore.bulkWriter();
-     *
-     * bulkWriter.create(firestore.doc('col/doc1'), {foo: 'bar'})
-     *   .then(res => {
-     *     console.log(`Added document at ${res.writeTime}`);
-     *   });
-     * bulkWriter.update(firestore.doc('col/doc2'), {foo: 'bar'})
-     *   .then(res => {
-     *     console.log(`Updated document at ${res.writeTime}`);
-     *   });
-     * bulkWriter.delete(firestore.doc('col/doc3'))
-     *   .then(res => {
-     *     console.log(`Deleted document at ${res.writeTime}`);
-     *   });
-     * await bulkWriter.close().then(() => {
-     *   console.log('Executed all writes');
-     * });
-     * ```
-     */
-    bulkWriter(options?: firestore.BulkWriterOptions): BulkWriter;
-    /**
-     * Creates a [DocumentSnapshot]{@link DocumentSnapshot} or a
-     * [QueryDocumentSnapshot]{@link QueryDocumentSnapshot} from a
-     * `firestore.v1.Document` proto (or from a resource name for missing
-     * documents).
-     *
-     * This API is used by Google Cloud Functions and can be called with both
-     * 'Proto3 JSON' and 'Protobuf JS' encoded data.
-     *
-     * @private
-     * @param documentOrName The Firestore 'Document' proto or the resource name
-     * of a missing document.
-     * @param readTime A 'Timestamp' proto indicating the time this document was
-     * read.
-     * @param encoding One of 'json' or 'protobufJS'. Applies to both the
-     * 'document' Proto and 'readTime'. Defaults to 'protobufJS'.
-     * @returns A QueryDocumentSnapshot for existing documents, otherwise a
-     * DocumentSnapshot.
-     */
-    snapshot_(documentName: string, readTime?: google.protobuf.ITimestamp, encoding?: 'protobufJS'): DocumentSnapshot;
-    /** @private */
-    snapshot_(documentName: string, readTime: string, encoding: 'json'): DocumentSnapshot;
-    /** @private */
-    snapshot_(document: api.IDocument, readTime: google.protobuf.ITimestamp, encoding?: 'protobufJS'): QueryDocumentSnapshot;
-    /** @private */
-    snapshot_(document: {
-        [k: string]: unknown;
-    }, readTime: string, encoding: 'json'): QueryDocumentSnapshot;
-    /**
-     * Creates a new `BundleBuilder` instance to package selected Firestore data into
-     * a bundle.
-     *
-     * @param bundleId. The id of the bundle. When loaded on clients, client SDKs use this id
-     * and the timestamp associated with the built bundle to tell if it has been loaded already.
-     * If not specified, a random identifier will be used.
-     */
-    bundle(name?: string): BundleBuilder;
-    /**
-     * Function executed by {@link Firestore#runTransaction} within the transaction
-     * context.
-     *
-     * @callback Firestore~updateFunction
-     * @template T
-     * @param {Transaction} transaction The transaction object for this
-     * transaction.
-     * @returns {Promise<T>} The promise returned at the end of the transaction.
-     * This promise will be returned by {@link Firestore#runTransaction} if the
-     * transaction completed successfully.
-     */
-    /**
-     * Options object for {@link Firestore#runTransaction} to configure a
-     * read-only transaction.
-     *
-     * @param {true} readOnly Set to true to indicate a read-only transaction.
-     * @param {Timestamp=} readTime If specified, documents are read at the given
-     * time. This may not be more than 60 seconds in the past from when the
-     * request is processed by the server.
-     * @typedef {Object} Firestore~ReadOnlyTransactionOptions
-     */
-    /**
-     * Options object for {@link Firestore#runTransaction} to configure a
-     * read-write transaction.
-     *
-     * @param {false=} readOnly Set to false or omit to indicate a read-write
-     * transaction.
-     * @param {number=} maxAttempts The maximum number of attempts for this
-     * transaction. Defaults to 5.
-     * @typedef {Object} Firestore~ReadWriteTransactionOptions
-     */
-    /**
-     * Executes the given updateFunction and commits the changes applied within
-     * the transaction.
-     *
-     * You can use the transaction object passed to 'updateFunction' to read and
-     * modify Firestore documents under lock. You have to perform all reads before
-     * before you perform any write.
-     *
-     * Transactions can be performed as read-only or read-write transactions. By
-     * default, transactions are executed in read-write mode.
-     *
-     * A read-write transaction obtains a pessimistic lock on all documents that
-     * are read during the transaction. These locks block other transactions,
-     * batched writes, and other non-transactional writes from changing that
-     * document. Any writes in a read-write transactions are committed once
-     * 'updateFunction' resolves, which also releases all locks.
-     *
-     * If a read-write transaction fails with contention, the transaction is
-     * retried up to five times. The `updateFunction` is invoked once for each
-     * attempt.
-     *
-     * Read-only transactions do not lock documents. They can be used to read
-     * documents at a consistent snapshot in time, which may be up to 60 seconds
-     * in the past. Read-only transactions are not retried.
-     *
-     * Transactions time out after 60 seconds if no documents are read.
-     * Transactions that are not committed within than 270 seconds are also
-     * aborted. Any remaining locks are released when a transaction times out.
-     *
-     * @template T
-     * @param {Firestore~updateFunction} updateFunction The user function to
-     * execute within the transaction context.
-     * @param {
-     * Firestore~ReadWriteTransactionOptions|Firestore~ReadOnlyTransactionOptions=
-     * } transactionOptions Transaction options.
-     * @returns {Promise<T>} If the transaction completed successfully or was
-     * explicitly aborted (by the updateFunction returning a failed Promise), the
-     * Promise returned by the updateFunction will be returned here. Else if the
-     * transaction failed, a rejected Promise with the corresponding failure
-     * error will be returned.
-     *
-     * @example
-     * ```
-     * let counterTransaction = firestore.runTransaction(transaction => {
-     *   let documentRef = firestore.doc('col/doc');
-     *   return transaction.get(documentRef).then(doc => {
-     *     if (doc.exists) {
-     *       let count =  doc.get('count') || 0;
-     *       if (count > 10) {
-     *         return Promise.reject('Reached maximum count');
-     *       }
-     *       transaction.update(documentRef, { count: ++count });
-     *       return Promise.resolve(count);
-     *     }
-     *
-     *     transaction.create(documentRef, { count: 1 });
-     *     return Promise.resolve(1);
-     *   });
-     * });
-     *
-     * counterTransaction.then(res => {
-     *   console.log(`Count updated to ${res}`);
-     * });
-     * ```
-     */
-    runTransaction<T>(updateFunction: (transaction: Transaction) => Promise<T>, transactionOptions?: firestore.ReadWriteTransactionOptions | firestore.ReadOnlyTransactionOptions): Promise<T>;
-    /**
-     * Fetches the root collections that are associated with this Firestore
-     * database.
-     *
-     * @returns {Promise.<Array.<CollectionReference>>} A Promise that resolves
-     * with an array of CollectionReferences.
-     *
-     * @example
-     * ```
-     * firestore.listCollections().then(collections => {
-     *   for (let collection of collections) {
-     *     console.log(`Found collection with id: ${collection.id}`);
-     *   }
-     * });
-     * ```
-     */
-    listCollections(): Promise<CollectionReference[]>;
-    /**
-     * Retrieves multiple documents from Firestore.
-     *
-     * The first argument is required and must be of type `DocumentReference`
-     * followed by any additional `DocumentReference` documents. If used, the
-     * optional `ReadOptions` must be the last argument.
-     *
-     * @param {...DocumentReference|ReadOptions} documentRefsOrReadOptions The
-     * `DocumentReferences` to receive, followed by an optional field mask.
-     * @returns {Promise<Array.<DocumentSnapshot>>} A Promise that
-     * contains an array with the resulting document snapshots.
-     *
-     * @example
-     * ```
-     * let docRef1 = firestore.doc('col/doc1');
-     * let docRef2 = firestore.doc('col/doc2');
-     *
-     * firestore.getAll(docRef1, docRef2, { fieldMask: ['user'] }).then(docs => {
-     *   console.log(`First document: ${JSON.stringify(docs[0])}`);
-     *   console.log(`Second document: ${JSON.stringify(docs[1])}`);
-     * });
-     * ```
-     */
-    getAll<AppModelType, DbModelType extends firestore.DocumentData>(...documentRefsOrReadOptions: Array<firestore.DocumentReference<AppModelType, DbModelType> | firestore.ReadOptions>): Promise<Array<DocumentSnapshot<AppModelType, DbModelType>>>;
-    /**
-     * Registers a listener on this client, incrementing the listener count. This
-     * is used to verify that all listeners are unsubscribed when terminate() is
-     * called.
-     *
-     * @private
-     * @internal
-     */
-    registerListener(): void;
-    /**
-     * Unregisters a listener on this client, decrementing the listener count.
-     * This is used to verify that all listeners are unsubscribed when terminate()
-     * is called.
-     *
-     * @private
-     * @internal
-     */
-    unregisterListener(): void;
-    /**
-     * Increments the number of open BulkWriter instances. This is used to verify
-     * that all pending operations are complete when terminate() is called.
-     *
-     * @private
-     * @internal
-     */
-    _incrementBulkWritersCount(): void;
-    /**
-     * Decrements the number of open BulkWriter instances. This is used to verify
-     * that all pending operations are complete when terminate() is called.
-     *
-     * @private
-     * @internal
-     */
-    _decrementBulkWritersCount(): void;
-    /**
-     * Recursively deletes all documents and subcollections at and under the
-     * specified level.
-     *
-     * If any delete fails, the promise is rejected with an error message
-     * containing the number of failed deletes and the stack trace of the last
-     * failed delete. The provided reference is deleted regardless of whether
-     * all deletes succeeded.
-     *
-     * `recursiveDelete()` uses a BulkWriter instance with default settings to
-     * perform the deletes. To customize throttling rates or add success/error
-     * callbacks, pass in a custom BulkWriter instance.
-     *
-     * @param ref The reference of a document or collection to delete.
-     * @param bulkWriter A custom BulkWriter instance used to perform the
-     * deletes.
-     * @return A promise that resolves when all deletes have been performed.
-     * The promise is rejected if any of the deletes fail.
-     *
-     * @example
-     * ```
-     * // Recursively delete a reference and log the references of failures.
-     * const bulkWriter = firestore.bulkWriter();
-     * bulkWriter
-     *   .onWriteError((error) => {
-     *     if (
-     *       error.failedAttempts < MAX_RETRY_ATTEMPTS
-     *     ) {
-     *       return true;
-     *     } else {
-     *       console.log('Failed write at document: ', error.documentRef.path);
-     *       return false;
-     *     }
-     *   });
-     * await firestore.recursiveDelete(docRef, bulkWriter);
-     * ```
-     */
-    recursiveDelete(ref: firestore.CollectionReference<any, any> | firestore.DocumentReference<any, any>, bulkWriter?: BulkWriter): Promise<void>;
-    /**
-     * This overload is not private in order to test the query resumption with
-     * startAfter() once the RecursiveDelete instance has MAX_PENDING_OPS pending.
-     *
-     * @private
-     * @internal
-     */
-    _recursiveDelete(ref: firestore.CollectionReference<unknown> | firestore.DocumentReference<unknown>, maxPendingOps: number, minPendingOps: number, bulkWriter?: BulkWriter): Promise<void>;
-    /**
-     * Terminates the Firestore client and closes all open streams.
-     *
-     * @return A Promise that resolves when the client is terminated.
-     */
-    terminate(): Promise<void>;
-    /**
-     * Returns the Project ID to serve as the JSON representation of this
-     * Firestore instance.
-     *
-     * @return An object that contains the project ID (or `undefined` if not yet
-     * available).
-     */
-    toJSON(): object;
-    /**
-     * Initializes the client if it is not already initialized. All methods in the
-     * SDK can be used after this method completes.
-     *
-     * @private
-     * @internal
-     * @param requestTag A unique client-assigned identifier that caused this
-     * initialization.
-     * @return A Promise that resolves when the client is initialized.
-     */
-    initializeIfNeeded(requestTag: string): Promise<void>;
-    /**
-     * Returns GAX call options that set the cloud resource header.
-     * @private
-     * @internal
-     */
-    private createCallOptions;
-    /**
-     * A function returning a Promise that can be retried.
-     *
-     * @private
-     * @internal
-     * @callback retryFunction
-     * @returns {Promise} A Promise indicating the function's success.
-     */
-    /**
-     * Helper method that retries failed Promises.
-     *
-     * If 'delayMs' is specified, waits 'delayMs' between invocations. Otherwise,
-     * schedules the first attempt immediately, and then waits 100 milliseconds
-     * for further attempts.
-     *
-     * @private
-     * @internal
-     * @param methodName Name of the Veneer API endpoint that takes a request
-     * and GAX options.
-     * @param requestTag A unique client-assigned identifier for this request.
-     * @param func Method returning a Promise than can be retried.
-     * @returns A Promise with the function's result if successful within
-     * `attemptsRemaining`. Otherwise, returns the last rejected Promise.
-     */
-    private _retry;
-    /**
-     * Waits for the provided stream to become active and returns a paused but
-     * healthy stream. If an error occurs before the first byte is read, the
-     * method rejects the returned Promise.
-     *
-     * @private
-     * @internal
-     * @param backendStream The Node stream to monitor.
-     * @param lifetime A Promise that resolves when the stream receives an 'end',
-     * 'close' or 'finish' message.
-     * @param requestTag A unique client-assigned identifier for this request.
-     * @param request If specified, the request that should be written to the
-     * stream after opening.
-     * @returns A guaranteed healthy stream that should be used instead of
-     * `backendStream`.
-     */
-    private _initializeStream;
-    /**
-     * A funnel for all non-streaming API requests, assigning a project ID where
-     * necessary within the request options.
-     *
-     * @private
-     * @internal
-     * @param methodName Name of the Veneer API endpoint that takes a request
-     * and GAX options.
-     * @param request The Protobuf request to send.
-     * @param requestTag A unique client-assigned identifier for this request.
-     * @param retryCodes If provided, a custom list of retry codes. If not
-     * provided, retry is based on the behavior as defined in the ServiceConfig.
-     * @returns A Promise with the request result.
-     */
-    request<Req, Resp>(methodName: FirestoreUnaryMethod, request: Req, requestTag: string, retryCodes?: number[]): Promise<Resp>;
-    /**
-     * A funnel for streaming API requests, assigning a project ID where necessary
-     * within the request options.
-     *
-     * The stream is returned in paused state and needs to be resumed once all
-     * listeners are attached.
-     *
-     * @private
-     * @internal
-     * @param methodName Name of the streaming Veneer API endpoint that
-     * takes a request and GAX options.
-     * @param bidrectional Whether the request is bidirectional (true) or
-     * unidirectional (false_
-     * @param request The Protobuf request to send.
-     * @param requestTag A unique client-assigned identifier for this request.
-     * @returns A Promise with the resulting read-only stream.
-     */
-    requestStream(methodName: FirestoreStreamingMethod, bidrectional: boolean, request: {}, requestTag: string): Promise<Duplex>;
-}
-/**
- * A logging function that takes a single string.
- *
- * @callback Firestore~logFunction
- * @param {string} Log message
- */
-/**
- * The default export of the `@google-cloud/firestore` package is the
- * {@link Firestore} class.
- *
- * See {@link Firestore} and {@link ClientConfig} for client methods and
- * configuration options.
- *
- * @module {Firestore} @google-cloud/firestore
- * @alias nodejs-firestore
- *
- * @example Install the client library with <a href="https://www.npmjs.com/">npm</a>:
- * ```
- * npm install --save @google-cloud/firestore
- *
- * ```
- * @example Import the client library
- * ```
- * var Firestore = require('@google-cloud/firestore');
- *
- * ```
- * @example Create a client that uses <a href="https://cloud.google.com/docs/authentication/production#providing_credentials_to_your_application">Application Default Credentials (ADC)</a>:
- * ```
- * var firestore = new Firestore();
- *
- * ```
- * @example Create a client with <a href="https://cloud.google.com/docs/authentication/production#obtaining_and_providing_service_account_credentials_manually">explicit credentials</a>:
- * ```
- * var firestore = new Firestore({ projectId:
- *   'your-project-id', keyFilename: '/path/to/keyfile.json'
- * });
- *
- * ```
- * @example <caption>include:samples/quickstart.js</caption>
- * region_tag:firestore_quickstart
- * Full quickstart example:
- */
-export default Firestore;
diff --git a/node_modules/@google-cloud/firestore/build/src/index.js b/node_modules/@google-cloud/firestore/build/src/index.js
old mode 100644
new mode 100755
diff --git a/node_modules/@google-cloud/firestore/build/src/logger.d.ts b/node_modules/@google-cloud/firestore/build/src/logger.d.ts
deleted file mode 100644
index 6f50968..0000000
--- a/node_modules/@google-cloud/firestore/build/src/logger.d.ts
+++ /dev/null
@@ -1,37 +0,0 @@
-/*!
- * Copyright 2018 Google Inc. All Rights Reserved.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-/**
- * Log function to use for debug output. By default, we don't perform any
- * logging.
- *
- * @private
- * @internal
- */
-export declare function logger(methodName: string, requestTag: string | null, logMessage: string, ...additionalArgs: unknown[]): void;
-/**
- * Sets or disables the log function for all active Firestore instances.
- *
- * @param logger A log function that takes a message (such as `console.log`) or
- * `null` to turn off logging.
- */
-export declare function setLogFunction(logger: ((msg: string) => void) | null): void;
-/**
- * Sets the library version to be used in log messages.
- *
- * @private
- * @internal
- */
-export declare function setLibVersion(version: string): void;
diff --git a/node_modules/@google-cloud/firestore/build/src/logger.js b/node_modules/@google-cloud/firestore/build/src/logger.js
old mode 100644
new mode 100755
diff --git a/node_modules/@google-cloud/firestore/build/src/map-type.d.ts b/node_modules/@google-cloud/firestore/build/src/map-type.d.ts
deleted file mode 100644
index cf518a3..0000000
--- a/node_modules/@google-cloud/firestore/build/src/map-type.d.ts
+++ /dev/null
@@ -1,18 +0,0 @@
-/*!
- * Copyright 2024 Google LLC. All Rights Reserved.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-export declare const RESERVED_MAP_KEY = "__type__";
-export declare const RESERVED_MAP_KEY_VECTOR_VALUE = "__vector__";
-export declare const VECTOR_MAP_VECTORS_KEY = "value";
diff --git a/node_modules/@google-cloud/firestore/build/src/map-type.js b/node_modules/@google-cloud/firestore/build/src/map-type.js
old mode 100644
new mode 100755
diff --git a/node_modules/@google-cloud/firestore/build/src/order.d.ts b/node_modules/@google-cloud/firestore/build/src/order.d.ts
deleted file mode 100644
index 2da8af9..0000000
--- a/node_modules/@google-cloud/firestore/build/src/order.d.ts
+++ /dev/null
@@ -1,38 +0,0 @@
-/*!
- * Copyright 2017 Google Inc. All Rights Reserved.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-import { google } from '../protos/firestore_v1_proto_api';
-import api = google.firestore.v1;
-/*!
- * @private
- * @internal
- */
-export declare function primitiveComparator(left: string | boolean | number, right: string | boolean | number): number;
-/*!
- * @private
- * @internal
- */
-export declare function compareArrays(left: api.IValue[], right: api.IValue[]): number;
-/*!
- * Compare strings in UTF-8 encoded byte order
- * @private
- * @internal
- */
-export declare function compareUtf8Strings(left: string, right: string): number;
-/*!
- * @private
- * @internal
- */
-export declare function compare(left: api.IValue, right: api.IValue): number;
diff --git a/node_modules/@google-cloud/firestore/build/src/order.js b/node_modules/@google-cloud/firestore/build/src/order.js
old mode 100644
new mode 100755
diff --git a/node_modules/@google-cloud/firestore/build/src/path.d.ts b/node_modules/@google-cloud/firestore/build/src/path.d.ts
deleted file mode 100644
index 3a21b71..0000000
--- a/node_modules/@google-cloud/firestore/build/src/path.d.ts
+++ /dev/null
@@ -1,416 +0,0 @@
-/*!
- * Copyright 2017 Google Inc. All Rights Reserved.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-import * as firestore from '@google-cloud/firestore';
-import { google } from '../protos/firestore_v1_proto_api';
-import api = google.firestore.v1;
-/*!
- * The default database ID for this Firestore client. We do not yet expose the
- * ability to use different databases.
- */
-export declare const DEFAULT_DATABASE_ID = "(default)";
-/**
- * An abstract class representing a Firestore path.
- *
- * Subclasses have to implement `split()` and `canonicalString()`.
- *
- * @private
- * @internal
- * @class
- */
-declare abstract class Path<T> {
-    protected readonly segments: string[];
-    /**
-     * Creates a new Path with the given segments.
-     *
-     * @private
-     * @internal
-     * @private
-     * @param segments Sequence of parts of a path.
-     */
-    constructor(segments: string[]);
-    /**
-     * Returns the number of segments of this field path.
-     *
-     * @private
-     * @internal
-     */
-    get size(): number;
-    abstract construct(segments: string[] | string): T;
-    abstract split(relativePath: string): string[];
-    /**
-     * Create a child path beneath the current level.
-     *
-     * @private
-     * @internal
-     * @param relativePath Relative path to append to the current path.
-     * @returns The new path.
-     */
-    append(relativePath: Path<T> | string): T;
-    /**
-     * Returns the path of the parent node.
-     *
-     * @private
-     * @internal
-     * @returns The new path or null if we are already at the root.
-     */
-    parent(): T | null;
-    /**
-     * Checks whether the current path is a prefix of the specified path.
-     *
-     * @private
-     * @internal
-     * @param other The path to check against.
-     * @returns 'true' iff the current path is a prefix match with 'other'.
-     */
-    isPrefixOf(other: Path<T>): boolean;
-    /**
-     * Compare the current path against another Path object.
-     *
-     * Compare the current path against another Path object. Paths are compared segment by segment,
-     * prioritizing numeric IDs (e.g., "__id123__") in numeric ascending order, followed by string
-     * segments in lexicographical order.
-     *
-     * @private
-     * @internal
-     * @param other The path to compare to.
-     * @returns -1 if current < other, 1 if current > other, 0 if equal
-     */
-    compareTo(other: Path<T>): number;
-    private compareSegments;
-    private isNumericId;
-    private extractNumericId;
-    private compareNumbers;
-    /**
-     * Returns a copy of the underlying segments.
-     *
-     * @private
-     * @internal
-     * @returns A copy of the segments that make up this path.
-     */
-    toArray(): string[];
-    /**
-     * Pops the last segment from this `Path` and returns a newly constructed
-     * `Path`.
-     *
-     * @private
-     * @internal
-     * @returns The newly created Path.
-     */
-    popLast(): T;
-    /**
-     * Returns true if this `Path` is equal to the provided value.
-     *
-     * @private
-     * @internal
-     * @param other The value to compare against.
-     * @return true if this `Path` is equal to the provided value.
-     */
-    isEqual(other: Path<T>): boolean;
-}
-/**
- * A slash-separated path for navigating resources within the current Firestore
- * instance.
- *
- * @private
- * @internal
- */
-export declare class ResourcePath extends Path<ResourcePath> {
-    /**
-     * A default instance pointing to the root collection.
-     * @private
-     * @internal
-     */
-    static EMPTY: ResourcePath;
-    /**
-     * Constructs a ResourcePath.
-     *
-     * @private
-     * @internal
-     * @param segments Sequence of names of the parts of the path.
-     */
-    constructor(...segments: string[]);
-    /**
-     * Indicates whether this path points to a document.
-     * @private
-     * @internal
-     */
-    get isDocument(): boolean;
-    /**
-     * Indicates whether this path points to a collection.
-     * @private
-     * @internal
-     */
-    get isCollection(): boolean;
-    /**
-     * The last component of the path.
-     * @private
-     * @internal
-     */
-    get id(): string | null;
-    /**
-     * Returns the location of this path relative to the root of the project's
-     * database.
-     * @private
-     * @internal
-     */
-    get relativeName(): string;
-    /**
-     * Constructs a new instance of ResourcePath.
-     *
-     * @private
-     * @internal
-     * @param segments Sequence of parts of the path.
-     * @returns The newly created ResourcePath.
-     */
-    construct(segments: string[]): ResourcePath;
-    /**
-     * Splits a string into path segments, using slashes as separators.
-     *
-     * @private
-     * @internal
-     * @param relativePath The path to split.
-     * @returns The split path segments.
-     */
-    split(relativePath: string): string[];
-    /**
-     * Converts this path to a fully qualified ResourcePath.
-     *
-     * @private
-     * @internal
-     * @param projectId The project ID of the current Firestore project.
-     * @return A fully-qualified resource path pointing to the same element.
-     */
-    toQualifiedResourcePath(projectId: string, databaseId: string): QualifiedResourcePath;
-}
-/**
- * A slash-separated path that includes a project and database ID for referring
- * to resources in any Firestore project.
- *
- * @private
- * @internal
- */
-export declare class QualifiedResourcePath extends ResourcePath {
-    /**
-     * The project ID of this path.
-     */
-    readonly projectId: string;
-    /**
-     * The database ID of this path.
-     */
-    readonly databaseId: string;
-    /**
-     * Constructs a Firestore Resource Path.
-     *
-     * @private
-     * @internal
-     * @param projectId The Firestore project id.
-     * @param databaseId The Firestore database id.
-     * @param segments Sequence of names of the parts of the path.
-     */
-    constructor(projectId: string, databaseId: string, ...segments: string[]);
-    /**
-     * String representation of the path relative to the database root.
-     * @private
-     * @internal
-     */
-    get relativeName(): string;
-    /**
-     * Creates a resource path from an absolute Firestore path.
-     *
-     * @private
-     * @internal
-     * @param absolutePath A string representation of a Resource Path.
-     * @returns The new ResourcePath.
-     */
-    static fromSlashSeparatedString(absolutePath: string): QualifiedResourcePath;
-    /**
-     * Create a child path beneath the current level.
-     *
-     * @private
-     * @internal
-     * @param relativePath Relative path to append to the current path.
-     * @returns The new path.
-     */
-    append(relativePath: ResourcePath | string): QualifiedResourcePath;
-    /**
-     * Create a child path beneath the current level.
-     *
-     * @private
-     * @internal
-     * @returns The new path.
-     */
-    parent(): QualifiedResourcePath | null;
-    /**
-     * String representation of a ResourcePath as expected by the API.
-     *
-     * @private
-     * @internal
-     * @returns The representation as expected by the API.
-     */
-    get formattedName(): string;
-    /**
-     * Constructs a new instance of ResourcePath. We need this instead of using
-     * the normal constructor because polymorphic 'this' doesn't work on static
-     * methods.
-     *
-     * @private
-     * @internal
-     * @param segments Sequence of names of the parts of the path.
-     * @returns The newly created QualifiedResourcePath.
-     */
-    construct(segments: string[]): QualifiedResourcePath;
-    /**
-     * Convenience method to match the ResourcePath API. This method always
-     * returns the current instance.
-     *
-     * @private
-     * @internal
-     */
-    toQualifiedResourcePath(): QualifiedResourcePath;
-    /**
-     * Compare the current path against another ResourcePath object.
-     *
-     * @private
-     * @internal
-     * @param other The path to compare to.
-     * @returns -1 if current < other, 1 if current > other, 0 if equal
-     */
-    compareTo(other: ResourcePath): number;
-    /**
-     * Converts this ResourcePath to the Firestore Proto representation.
-     * @private
-     * @internal
-     */
-    toProto(): api.IValue;
-}
-/**
- * Validates that the given string can be used as a relative or absolute
- * resource path.
- *
- * @private
- * @internal
- * @param arg The argument name or argument index (for varargs methods).
- * @param resourcePath The path to validate.
- * @throws if the string can't be used as a resource path.
- */
-export declare function validateResourcePath(arg: string | number, resourcePath: string): void;
-/**
- * A dot-separated path for navigating sub-objects (e.g. nested maps) within a document.
- *
- * @class
- */
-export declare class FieldPath extends Path<FieldPath> implements firestore.FieldPath {
-    /**
-     * A special sentinel value to refer to the ID of a document.
-     *
-     * @private
-     * @internal
-     */
-    private static _DOCUMENT_ID;
-    /**
-     * Constructs a Firestore Field Path.
-     *
-     * @param {...string} segments Sequence of field names that form this path.
-     *
-     * @example
-     * ```
-     * let query = firestore.collection('col');
-     * let fieldPath = new FieldPath('f.o.o', 'bar');
-     *
-     * query.where(fieldPath, '==', 42).get().then(snapshot => {
-     *   snapshot.forEach(document => {
-     *     console.log(`Document contains {'f.o.o' : {'bar' : 42}}`);
-     *   });
-     * });
-     * ```
-     */
-    constructor(...segments: string[]);
-    /**
-     * A special FieldPath value to refer to the ID of a document. It can be used
-     * in queries to sort or filter by the document ID.
-     *
-     * @returns {FieldPath}
-     */
-    static documentId(): FieldPath;
-    /**
-     * Turns a field path argument into a [FieldPath]{@link FieldPath}.
-     * Supports FieldPaths as input (which are passed through) and dot-separated
-     * strings.
-     *
-     * @private
-     * @internal
-     * @param {string|FieldPath} fieldPath The FieldPath to create.
-     * @returns {FieldPath} A field path representation.
-     */
-    static fromArgument(fieldPath: string | firestore.FieldPath): FieldPath;
-    /**
-     * String representation of a FieldPath as expected by the API.
-     *
-     * @private
-     * @internal
-     * @override
-     * @returns {string} The representation as expected by the API.
-     */
-    get formattedName(): string;
-    /**
-     * Returns a string representation of this path.
-     *
-     * @private
-     * @internal
-     * @returns A string representing this path.
-     */
-    toString(): string;
-    /**
-     * Splits a string into path segments, using dots as separators.
-     *
-     * @private
-     * @internal
-     * @override
-     * @param {string} fieldPath The path to split.
-     * @returns {Array.<string>} - The split path segments.
-     */
-    split(fieldPath: string): string[];
-    /**
-     * Constructs a new instance of FieldPath. We need this instead of using
-     * the normal constructor because polymorphic 'this' doesn't work on static
-     * methods.
-     *
-     * @private
-     * @internal
-     * @override
-     * @param segments Sequence of field names.
-     * @returns The newly created FieldPath.
-     */
-    construct(segments: string[]): FieldPath;
-    /**
-     * Returns true if this `FieldPath` is equal to the provided value.
-     *
-     * @param {*} other The value to compare against.
-     * @return {boolean} true if this `FieldPath` is equal to the provided value.
-     */
-    isEqual(other: FieldPath): boolean;
-}
-/**
- * Validates that the provided value can be used as a field path argument.
- *
- * @private
- * @internal
- * @param arg The argument name or argument index (for varargs methods).
- * @param fieldPath The value to verify.
- * @throws if the string can't be used as a field path.
- */
-export declare function validateFieldPath(arg: string | number, fieldPath: unknown): asserts fieldPath is string | FieldPath;
-export {};
diff --git a/node_modules/@google-cloud/firestore/build/src/path.js b/node_modules/@google-cloud/firestore/build/src/path.js
old mode 100644
new mode 100755
diff --git a/node_modules/@google-cloud/firestore/build/src/pool.d.ts b/node_modules/@google-cloud/firestore/build/src/pool.d.ts
deleted file mode 100644
index 56aa975..0000000
--- a/node_modules/@google-cloud/firestore/build/src/pool.d.ts
+++ /dev/null
@@ -1,128 +0,0 @@
-/*!
- * Copyright 2018 Google Inc. All Rights Reserved.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-export declare const CLIENT_TERMINATED_ERROR_MSG = "The client has already been terminated";
-/**
- * An auto-resizing pool that distributes concurrent operations over multiple
- * clients of type `T`.
- *
- * ClientPool is used within Firestore to manage a pool of GAPIC clients and
- * automatically initializes multiple clients if we issue more than 100
- * concurrent operations.
- *
- * @private
- * @internal
- */
-export declare class ClientPool<T> {
-    private readonly concurrentOperationLimit;
-    private readonly maxIdleClients;
-    private readonly clientFactory;
-    private readonly clientDestructor;
-    private grpcEnabled;
-    /**
-     * Stores each active clients and how many operations it has outstanding.
-     */
-    private activeClients;
-    /**
-     * A set of clients that have seen RST_STREAM errors (see
-     * https://github.com/googleapis/nodejs-firestore/issues/1023) and should
-     * no longer be used.
-     */
-    private failedClients;
-    /**
-     * Whether the Firestore instance has been terminated. Once terminated, the
-     * ClientPool can longer schedule new operations.
-     */
-    private terminated;
-    /**
-     * Deferred promise that is resolved when there are no active operations on
-     * the client pool after terminate() has been called.
-     */
-    private terminateDeferred;
-    /**
-     * @param concurrentOperationLimit The number of operations that each client
-     * can handle.
-     * @param maxIdleClients The maximum number of idle clients to keep before
-     * garbage collecting.
-     * @param clientFactory A factory function called as needed when new clients
-     * are required.
-     * @param clientDestructor A cleanup function that is called when a client is
-     * disposed of.
-     */
-    constructor(concurrentOperationLimit: number, maxIdleClients: number, clientFactory: (requiresGrpc: boolean) => T, clientDestructor?: (client: T) => Promise<void>);
-    /**
-     * Returns an already existing client if it has less than the maximum number
-     * of concurrent operations or initializes and returns a new client.
-     *
-     * @private
-     * @internal
-     */
-    private acquire;
-    /**
-     * Reduces the number of operations for the provided client, potentially
-     * removing it from the pool of active clients.
-     * @private
-     * @internal
-     */
-    private release;
-    /**
-     * Given the current operation counts, determines if the given client should
-     * be garbage collected.
-     * @private
-     * @internal
-     */
-    private shouldGarbageCollectClient;
-    /**
-     * The number of currently registered clients.
-     *
-     * @return Number of currently registered clients.
-     * @private
-     * @internal
-     */
-    get size(): number;
-    /**
-     * The number of currently active operations.
-     *
-     * @return Number of currently active operations.
-     * @private
-     * @internal
-     */
-    get opCount(): number;
-    /**
-     * The currently active clients.
-     *
-     * @return The currently active clients.
-     * @private
-     * @internal
-     */
-    get _activeClients(): Map<T, {
-        activeRequestCount: number;
-        grpcEnabled: boolean;
-    }>;
-    /**
-     * Runs the provided operation in this pool. This function may create an
-     * additional client if all existing clients already operate at the concurrent
-     * operation limit.
-     *
-     * @param requestTag A unique client-assigned identifier for this operation.
-     * @param op A callback function that returns a Promise. The client T will
-     * be returned to the pool when callback finishes.
-     * @return A Promise that resolves with the result of `op`.
-     * @private
-     * @internal
-     */
-    run<V>(requestTag: string, requiresGrpc: boolean, op: (client: T) => Promise<V>): Promise<V>;
-    terminate(): Promise<void>;
-}
diff --git a/node_modules/@google-cloud/firestore/build/src/pool.js b/node_modules/@google-cloud/firestore/build/src/pool.js
old mode 100644
new mode 100755
diff --git a/node_modules/@google-cloud/firestore/build/src/query-partition.d.ts b/node_modules/@google-cloud/firestore/build/src/query-partition.d.ts
deleted file mode 100644
index d197747..0000000
--- a/node_modules/@google-cloud/firestore/build/src/query-partition.d.ts
+++ /dev/null
@@ -1,96 +0,0 @@
-import * as firestore from '@google-cloud/firestore';
-import * as protos from '../protos/firestore_v1_proto_api';
-import { Query } from './reference/query';
-import { Firestore } from './index';
-import api = protos.google.firestore.v1;
-/**
- * A split point that can be used in a query as a starting and/or end point for
- * the query results. The cursors returned by {@link #startAt} and {@link
- * #endBefore} can only be used in a query that matches the constraint of query
- * that produced this partition.
- *
- * @class QueryPartition
- */
-export declare class QueryPartition<AppModelType = firestore.DocumentData, DbModelType extends firestore.DocumentData = firestore.DocumentData> implements firestore.QueryPartition<AppModelType, DbModelType> {
-    private readonly _firestore;
-    private readonly _collectionId;
-    private readonly _converter;
-    private readonly _startAt;
-    private readonly _endBefore;
-    private readonly _serializer;
-    private _memoizedStartAt;
-    private _memoizedEndBefore;
-    /** @private */
-    constructor(_firestore: Firestore, _collectionId: string, _converter: firestore.FirestoreDataConverter<AppModelType, DbModelType>, _startAt: api.IValue[] | undefined, _endBefore: api.IValue[] | undefined);
-    /**
-     * The cursor that defines the first result for this partition or `undefined`
-     * if this is the first partition. The cursor value must be
-     * destructured when passed to `startAt()` (for example with
-     * `query.startAt(...queryPartition.startAt)`).
-     *
-     * @example
-     * ```
-     * const query = firestore.collectionGroup('collectionId');
-     * for await (const partition of query.getPartitions(42)) {
-     *   let partitionedQuery = query.orderBy(FieldPath.documentId());
-     *   if (partition.startAt) {
-     *     partitionedQuery = partitionedQuery.startAt(...partition.startAt);
-     *   }
-     *   if (partition.endBefore) {
-     *     partitionedQuery = partitionedQuery.endBefore(...partition.endBefore);
-     *   }
-     *   const querySnapshot = await partitionedQuery.get();
-     *   console.log(`Partition contained ${querySnapshot.length} documents`);
-     * }
-     *
-     * ```
-     * @type {Array<*>}
-     * @return {Array<*>} A cursor value that can be used with {@link
-     * Query#startAt} or `undefined` if this is the first partition.
-     */
-    get startAt(): unknown[] | undefined;
-    /**
-     * The cursor that defines the first result after this partition or
-     * `undefined` if this is the last partition.  The cursor value must be
-     * destructured when passed to `endBefore()` (for example with
-     * `query.endBefore(...queryPartition.endBefore)`).
-     *
-     * @example
-     * ```
-     * const query = firestore.collectionGroup('collectionId');
-     * for await (const partition of query.getPartitions(42)) {
-     *   let partitionedQuery = query.orderBy(FieldPath.documentId());
-     *   if (partition.startAt) {
-     *     partitionedQuery = partitionedQuery.startAt(...partition.startAt);
-     *   }
-     *   if (partition.endBefore) {
-     *     partitionedQuery = partitionedQuery.endBefore(...partition.endBefore);
-     *   }
-     *   const querySnapshot = await partitionedQuery.get();
-     *   console.log(`Partition contained ${querySnapshot.length} documents`);
-     * }
-     *
-     * ```
-     * @type {Array<*>}
-     * @return {Array<*>} A cursor value that can be used with {@link
-     * Query#endBefore} or `undefined` if this is the last partition.
-     */
-    get endBefore(): unknown[] | undefined;
-    /**
-     * Returns a query that only encapsulates the documents for this partition.
-     *
-     * @example
-     * ```
-     * const query = firestore.collectionGroup('collectionId');
-     * for await (const partition of query.getPartitions(42)) {
-     *   const partitionedQuery = partition.toQuery();
-     *   const querySnapshot = await partitionedQuery.get();
-     *   console.log(`Partition contained ${querySnapshot.length} documents`);
-     * }
-     *
-     * ```
-     * @return {Query<T>} A query partitioned by a {@link Query#startAt} and
-     * {@link Query#endBefore} cursor.
-     */
-    toQuery(): Query<AppModelType, DbModelType>;
-}
diff --git a/node_modules/@google-cloud/firestore/build/src/query-partition.js b/node_modules/@google-cloud/firestore/build/src/query-partition.js
old mode 100644
new mode 100755
diff --git a/node_modules/@google-cloud/firestore/build/src/query-profile.d.ts b/node_modules/@google-cloud/firestore/build/src/query-profile.d.ts
deleted file mode 100644
index 7ac1642..0000000
--- a/node_modules/@google-cloud/firestore/build/src/query-profile.d.ts
+++ /dev/null
@@ -1,94 +0,0 @@
-/*!
- * Copyright 2024 Google LLC. All Rights Reserved.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-import * as firestore from '@google-cloud/firestore';
-import { google } from '../protos/firestore_v1_proto_api';
-import { Serializer } from './serializer';
-import IPlanSummary = google.firestore.v1.IPlanSummary;
-import IExecutionStats = google.firestore.v1.IExecutionStats;
-import IExplainMetrics = google.firestore.v1.IExplainMetrics;
-/**
- * PlanSummary contains information about the planning stage of a query.
- *
- * @class PlanSummary
- */
-export declare class PlanSummary implements firestore.PlanSummary {
-    readonly indexesUsed: Record<string, unknown>[];
-    /**
-     * @private
-     * @internal
-     */
-    constructor(indexesUsed: Record<string, unknown>[]);
-    /**
-     * @private
-     * @internal
-     */
-    static _fromProto(plan: IPlanSummary | null | undefined, serializer: Serializer): PlanSummary;
-}
-/**
- *  ExecutionStats contains information about the execution of a query.
- *
- * @class ExecutionStats
- */
-export declare class ExecutionStats implements firestore.ExecutionStats {
-    readonly resultsReturned: number;
-    readonly executionDuration: firestore.Duration;
-    readonly readOperations: number;
-    readonly debugStats: Record<string, unknown>;
-    /**
-     * @private
-     * @internal
-     */
-    constructor(resultsReturned: number, executionDuration: firestore.Duration, readOperations: number, debugStats: Record<string, unknown>);
-    /**
-     * @private
-     * @internal
-     */
-    static _fromProto(stats: IExecutionStats | null | undefined, serializer: Serializer): ExecutionStats | null;
-}
-/**
- * ExplainMetrics contains information about planning and execution of a query.
- *
- * @class ExplainMetrics
- */
-export declare class ExplainMetrics implements firestore.ExplainMetrics {
-    readonly planSummary: PlanSummary;
-    readonly executionStats: ExecutionStats | null;
-    /**
-     * @private
-     * @internal
-     */
-    constructor(planSummary: PlanSummary, executionStats: ExecutionStats | null);
-    /**
-     * @private
-     * @internal
-     */
-    static _fromProto(metrics: IExplainMetrics, serializer: Serializer): ExplainMetrics;
-}
-/**
- * ExplainResults contains information about planning, execution, and results
- * of a query.
- *
- * @class ExplainResults
- */
-export declare class ExplainResults<T> implements firestore.ExplainResults<T> {
-    readonly metrics: ExplainMetrics;
-    readonly snapshot: T | null;
-    /**
-     * @private
-     * @internal
-     */
-    constructor(metrics: ExplainMetrics, snapshot: T | null);
-}
diff --git a/node_modules/@google-cloud/firestore/build/src/query-profile.js b/node_modules/@google-cloud/firestore/build/src/query-profile.js
old mode 100644
new mode 100755
diff --git a/node_modules/@google-cloud/firestore/build/src/rate-limiter.d.ts b/node_modules/@google-cloud/firestore/build/src/rate-limiter.d.ts
deleted file mode 100644
index e6c59e3..0000000
--- a/node_modules/@google-cloud/firestore/build/src/rate-limiter.d.ts
+++ /dev/null
@@ -1,75 +0,0 @@
-/**
- * A helper that uses the Token Bucket algorithm to rate limit the number of
- * operations that can be made in a second.
- *
- * Before a given request containing a number of operations can proceed,
- * RateLimiter determines doing so stays under the provided rate limits. It can
- * also determine how much time is required before a request can be made.
- *
- * RateLimiter can also implement a gradually increasing rate limit. This is
- * used to enforce the 500/50/5 rule
- * (https://firebase.google.com/docs/firestore/best-practices#ramping_up_traffic).
- *
- * @private
- * @internal
- */
-export declare class RateLimiter {
-    private readonly initialCapacity;
-    private readonly multiplier;
-    private readonly multiplierMillis;
-    readonly maximumCapacity: number;
-    private readonly startTimeMillis;
-    availableTokens: number;
-    lastRefillTimeMillis: number;
-    previousCapacity: number;
-    /**
-     * @param initialCapacity Initial maximum number of operations per second.
-     * @param multiplier Rate by which to increase the capacity.
-     * @param multiplierMillis How often the capacity should increase in
-     * milliseconds.
-     * @param maximumCapacity Maximum number of allowed operations per second.
-     * The number of tokens added per second will never exceed this number.
-     * @param startTimeMillis The starting time in epoch milliseconds that the
-     * rate limit is based on. Used for testing the limiter.
-     */
-    constructor(initialCapacity: number, multiplier: number, multiplierMillis: number, maximumCapacity: number, startTimeMillis?: number);
-    /**
-     * Tries to make the number of operations. Returns true if the request
-     * succeeded and false otherwise.
-     *
-     * @param requestTimeMillis The time used to calculate the number of available
-     * tokens. Used for testing the limiter.
-     * @private
-     * @internal
-     */
-    tryMakeRequest(numOperations: number, requestTimeMillis?: number): boolean;
-    /**
-     * Returns the number of ms needed to make a request with the provided number
-     * of operations. Returns 0 if the request can be made with the existing
-     * capacity. Returns -1 if the request is not possible with the current
-     * capacity.
-     *
-     * @param requestTimeMillis The time used to calculate the number of available
-     * tokens. Used for testing the limiter.
-     * @private
-     * @internal
-     */
-    getNextRequestDelayMs(numOperations: number, requestTimeMillis?: number): number;
-    /**
-     * Refills the number of available tokens based on how much time has elapsed
-     * since the last time the tokens were refilled.
-     *
-     * @param requestTimeMillis The time used to calculate the number of available
-     * tokens. Used for testing the limiter.
-     * @private
-     * @internal
-     */
-    private refillTokens;
-    /**
-     * Calculates the maximum capacity based on the provided date.
-     *
-     * @private
-     * @internal
-     */
-    calculateCapacity(requestTimeMillis: number): number;
-}
diff --git a/node_modules/@google-cloud/firestore/build/src/rate-limiter.js b/node_modules/@google-cloud/firestore/build/src/rate-limiter.js
old mode 100644
new mode 100755
diff --git a/node_modules/@google-cloud/firestore/build/src/recursive-delete.d.ts b/node_modules/@google-cloud/firestore/build/src/recursive-delete.d.ts
deleted file mode 100644
index 8ec38cf..0000000
--- a/node_modules/@google-cloud/firestore/build/src/recursive-delete.d.ts
+++ /dev/null
@@ -1,166 +0,0 @@
-/*!
- * Copyright 2021 Google LLC
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-import * as firestore from '@google-cloud/firestore';
-import Firestore, { BulkWriter } from '.';
-/*!
- * Datastore allowed numeric IDs where Firestore only allows strings. Numeric
- * IDs are exposed to Firestore as __idNUM__, so this is the lowest possible
- * negative numeric value expressed in that format.
- *
- * This constant is used to specify startAt/endAt values when querying for all
- * descendants in a single collection.
- */
-export declare const REFERENCE_NAME_MIN_ID = "__id-9223372036854775808__";
-/*!
- * The query limit used for recursive deletes when fetching all descendants of
- * the specified reference to delete. This is done to prevent the query stream
- * from streaming documents faster than Firestore can delete.
- */
-export declare const RECURSIVE_DELETE_MAX_PENDING_OPS = 5000;
-/*!
- * The number of pending BulkWriter operations at which RecursiveDelete
- * starts the next limit query to fetch descendants. By starting the query
- * while there are pending operations, Firestore can improve BulkWriter
- * throughput. This helps prevent BulkWriter from idling while Firestore
- * fetches the next query.
- */
-export declare const RECURSIVE_DELETE_MIN_PENDING_OPS = 1000;
-/**
- * Class used to store state required for running a recursive delete operation.
- * Each recursive delete call should use a new instance of the class.
- * @private
- * @internal
- */
-export declare class RecursiveDelete {
-    private readonly firestore;
-    private readonly writer;
-    private readonly ref;
-    private readonly maxLimit;
-    private readonly minLimit;
-    /**
-     * The number of deletes that failed with a permanent error.
-     * @private
-     * @internal
-     */
-    private errorCount;
-    /**
-     * The most recently thrown error. Used to populate the developer-facing
-     * error message when the recursive delete operation completes.
-     * @private
-     * @internal
-     */
-    private lastError;
-    /**
-     * Whether there are still documents to delete that still need to be fetched.
-     * @private
-     * @internal
-     */
-    private documentsPending;
-    /**
-     * Whether run() has been called.
-     * @private
-     * @internal
-     */
-    private started;
-    /**
-     * Query limit to use when fetching all descendants.
-     * @private
-     * @internal
-     */
-    private readonly maxPendingOps;
-    /**
-     * The number of pending BulkWriter operations at which RecursiveDelete
-     * starts the next limit query to fetch descendants.
-     * @private
-     * @internal
-     */
-    private readonly minPendingOps;
-    /**
-     * A deferred promise that resolves when the recursive delete operation
-     * is completed.
-     * @private
-     * @internal
-     */
-    private readonly completionDeferred;
-    /**
-     * Whether a query stream is currently in progress. Only one stream can be
-     * run at a time.
-     * @private
-     * @internal
-     */
-    private streamInProgress;
-    /**
-     * The last document snapshot returned by the stream. Used to set the
-     * startAfter() field in the subsequent stream.
-     * @private
-     * @internal
-     */
-    private lastDocumentSnap;
-    /**
-     * The number of pending BulkWriter operations. Used to determine when the
-     * next query can be run.
-     * @private
-     * @internal
-     */
-    private pendingOpsCount;
-    private errorStack;
-    /**
-     *
-     * @param firestore The Firestore instance to use.
-     * @param writer The BulkWriter instance to use for delete operations.
-     * @param ref The document or collection reference to recursively delete.
-     * @param maxLimit The query limit to use when fetching descendants
-     * @param minLimit The number of pending BulkWriter operations at which
-     * RecursiveDelete starts the next limit query to fetch descendants.
-     */
-    constructor(firestore: Firestore, writer: BulkWriter, ref: firestore.CollectionReference<unknown> | firestore.DocumentReference<unknown>, maxLimit: number, minLimit: number);
-    /**
-     * Recursively deletes the reference provided in the class constructor.
-     * Returns a promise that resolves when all descendants have been deleted, or
-     * if an error occurs.
-     */
-    run(): Promise<void>;
-    /**
-     * Creates a query stream and attaches event handlers to it.
-     * @private
-     * @internal
-     */
-    private setupStream;
-    /**
-     * Retrieves all descendant documents nested under the provided reference.
-     * @param ref The reference to fetch all descendants for.
-     * @private
-     * @internal
-     * @return {Stream<QueryDocumentSnapshot>} Stream of descendant documents.
-     */
-    private getAllDescendants;
-    /**
-     * Called when all descendants of the provided reference have been streamed
-     * or if a permanent error occurs during the stream. Deletes the developer
-     * provided reference and wraps any errors that occurred.
-     * @private
-     * @internal
-     */
-    private onQueryEnd;
-    /**
-     * Deletes the provided reference and starts the next stream if conditions
-     * are met.
-     * @private
-     * @internal
-     */
-    private deleteRef;
-    private incrementErrorCount;
-}
diff --git a/node_modules/@google-cloud/firestore/build/src/recursive-delete.js b/node_modules/@google-cloud/firestore/build/src/recursive-delete.js
old mode 100644
new mode 100755
diff --git a/node_modules/@google-cloud/firestore/build/src/reference/aggregate-query-snapshot.d.ts b/node_modules/@google-cloud/firestore/build/src/reference/aggregate-query-snapshot.d.ts
old mode 100644
new mode 100755
diff --git a/node_modules/@google-cloud/firestore/build/src/reference/aggregate-query-snapshot.js b/node_modules/@google-cloud/firestore/build/src/reference/aggregate-query-snapshot.js
old mode 100644
new mode 100755
diff --git a/node_modules/@google-cloud/firestore/build/src/reference/aggregate-query.d.ts b/node_modules/@google-cloud/firestore/build/src/reference/aggregate-query.d.ts
old mode 100644
new mode 100755
diff --git a/node_modules/@google-cloud/firestore/build/src/reference/aggregate-query.js b/node_modules/@google-cloud/firestore/build/src/reference/aggregate-query.js
old mode 100644
new mode 100755
diff --git a/node_modules/@google-cloud/firestore/build/src/reference/collection-reference.d.ts b/node_modules/@google-cloud/firestore/build/src/reference/collection-reference.d.ts
old mode 100644
new mode 100755
diff --git a/node_modules/@google-cloud/firestore/build/src/reference/collection-reference.js b/node_modules/@google-cloud/firestore/build/src/reference/collection-reference.js
old mode 100644
new mode 100755
diff --git a/node_modules/@google-cloud/firestore/build/src/reference/composite-filter-internal.d.ts b/node_modules/@google-cloud/firestore/build/src/reference/composite-filter-internal.d.ts
old mode 100644
new mode 100755
diff --git a/node_modules/@google-cloud/firestore/build/src/reference/composite-filter-internal.js b/node_modules/@google-cloud/firestore/build/src/reference/composite-filter-internal.js
old mode 100644
new mode 100755
diff --git a/node_modules/@google-cloud/firestore/build/src/reference/constants.d.ts b/node_modules/@google-cloud/firestore/build/src/reference/constants.d.ts
old mode 100644
new mode 100755
diff --git a/node_modules/@google-cloud/firestore/build/src/reference/constants.js b/node_modules/@google-cloud/firestore/build/src/reference/constants.js
old mode 100644
new mode 100755
diff --git a/node_modules/@google-cloud/firestore/build/src/reference/document-reference.d.ts b/node_modules/@google-cloud/firestore/build/src/reference/document-reference.d.ts
old mode 100644
new mode 100755
diff --git a/node_modules/@google-cloud/firestore/build/src/reference/document-reference.js b/node_modules/@google-cloud/firestore/build/src/reference/document-reference.js
old mode 100644
new mode 100755
diff --git a/node_modules/@google-cloud/firestore/build/src/reference/field-filter-internal.d.ts b/node_modules/@google-cloud/firestore/build/src/reference/field-filter-internal.d.ts
old mode 100644
new mode 100755
diff --git a/node_modules/@google-cloud/firestore/build/src/reference/field-filter-internal.js b/node_modules/@google-cloud/firestore/build/src/reference/field-filter-internal.js
old mode 100644
new mode 100755
diff --git a/node_modules/@google-cloud/firestore/build/src/reference/field-order.d.ts b/node_modules/@google-cloud/firestore/build/src/reference/field-order.d.ts
old mode 100644
new mode 100755
diff --git a/node_modules/@google-cloud/firestore/build/src/reference/field-order.js b/node_modules/@google-cloud/firestore/build/src/reference/field-order.js
old mode 100644
new mode 100755
diff --git a/node_modules/@google-cloud/firestore/build/src/reference/filter-internal.d.ts b/node_modules/@google-cloud/firestore/build/src/reference/filter-internal.d.ts
old mode 100644
new mode 100755
diff --git a/node_modules/@google-cloud/firestore/build/src/reference/filter-internal.js b/node_modules/@google-cloud/firestore/build/src/reference/filter-internal.js
old mode 100644
new mode 100755
diff --git a/node_modules/@google-cloud/firestore/build/src/reference/helpers.d.ts b/node_modules/@google-cloud/firestore/build/src/reference/helpers.d.ts
deleted file mode 100644
index 4410c33..0000000
--- a/node_modules/@google-cloud/firestore/build/src/reference/helpers.d.ts
+++ /dev/null
@@ -1,68 +0,0 @@
-/**
- * Copyright 2024 Google LLC. All Rights Reserved.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-import * as firestore from '@google-cloud/firestore';
-import { DocumentReference } from './document-reference';
-/**
- * Validates the input string as a field order direction.
- *
- * @private
- * @internal
- * @param arg The argument name or argument index (for varargs methods).
- * @param op Order direction to validate.
- * @throws when the direction is invalid
- * @return a validated input value, which may be different from the provided
- * value.
- */
-export declare function validateQueryOrder(arg: string, op: unknown): firestore.OrderByDirection | undefined;
-/**
- * Validates the input string as a field comparison operator.
- *
- * @private
- * @internal
- * @param arg The argument name or argument index (for varargs methods).
- * @param op Field comparison operator to validate.
- * @param fieldValue Value that is used in the filter.
- * @throws when the comparison operation is invalid
- * @return a validated input value, which may be different from the provided
- * value.
- */
-export declare function validateQueryOperator(arg: string | number, op: unknown, fieldValue: unknown): firestore.WhereFilterOp;
-/**
- * Validates that 'value' is a DocumentReference.
- *
- * @private
- * @internal
- * @param arg The argument name or argument index (for varargs methods).
- * @param value The argument to validate.
- * @return the DocumentReference if valid
- */
-export declare function validateDocumentReference<AppModelType, DbModelType extends firestore.DocumentData>(arg: string | number, value: firestore.DocumentReference<AppModelType, DbModelType>): DocumentReference<AppModelType, DbModelType>;
-/**
- * Validates that 'value' can be used as a query value.
- *
- * @private
- * @internal
- * @param arg The argument name or argument index (for varargs methods).
- * @param value The argument to validate.
- * @param allowUndefined Whether to allow nested properties that are `undefined`.
- */
-export declare function validateQueryValue(arg: string | number, value: unknown, allowUndefined: boolean): void;
-/**
- * Returns the first non-undefined value or `undefined` if no such value exists.
- * @private
- * @internal
- */
-export declare function coalesce<T>(...values: Array<T | undefined>): T | undefined;
diff --git a/node_modules/@google-cloud/firestore/build/src/reference/helpers.js b/node_modules/@google-cloud/firestore/build/src/reference/helpers.js
old mode 100644
new mode 100755
diff --git a/node_modules/@google-cloud/firestore/build/src/reference/query-options.d.ts b/node_modules/@google-cloud/firestore/build/src/reference/query-options.d.ts
deleted file mode 100644
index 1030b49..0000000
--- a/node_modules/@google-cloud/firestore/build/src/reference/query-options.d.ts
+++ /dev/null
@@ -1,76 +0,0 @@
-/**
- * Copyright 2024 Google LLC. All Rights Reserved.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-import * as protos from '../../protos/firestore_v1_proto_api';
-import api = protos.google.firestore.v1;
-import * as firestore from '@google-cloud/firestore';
-import { ResourcePath } from '../path';
-import { FilterInternal } from './filter-internal';
-import { FieldOrder } from './field-order';
-import { LimitType, QueryCursor } from './types';
-/**
- * Internal class representing custom Query options.
- *
- * These options are immutable. Modified options can be created using `with()`.
- * @private
- * @internal
- */
-export declare class QueryOptions<AppModelType, DbModelType extends firestore.DocumentData> {
-    readonly parentPath: ResourcePath;
-    readonly collectionId: string;
-    readonly converter: firestore.FirestoreDataConverter<AppModelType, DbModelType>;
-    readonly allDescendants: boolean;
-    readonly filters: FilterInternal[];
-    readonly fieldOrders: FieldOrder[];
-    readonly startAt?: QueryCursor | undefined;
-    readonly endAt?: QueryCursor | undefined;
-    readonly limit?: number | undefined;
-    readonly limitType?: LimitType | undefined;
-    readonly offset?: number | undefined;
-    readonly projection?: api.StructuredQuery.IProjection | undefined;
-    readonly kindless: boolean;
-    readonly requireConsistency: boolean;
-    constructor(parentPath: ResourcePath, collectionId: string, converter: firestore.FirestoreDataConverter<AppModelType, DbModelType>, allDescendants: boolean, filters: FilterInternal[], fieldOrders: FieldOrder[], startAt?: QueryCursor | undefined, endAt?: QueryCursor | undefined, limit?: number | undefined, limitType?: LimitType | undefined, offset?: number | undefined, projection?: api.StructuredQuery.IProjection | undefined, kindless?: boolean, requireConsistency?: boolean);
-    /**
-     * Returns query options for a collection group query.
-     * @private
-     * @internal
-     */
-    static forCollectionGroupQuery<AppModelType = firestore.DocumentData, DbModelType extends firestore.DocumentData = firestore.DocumentData>(collectionId: string, converter?: firestore.FirestoreDataConverter<AppModelType, DbModelType>): QueryOptions<AppModelType, DbModelType>;
-    /**
-     * Returns query options for a single-collection query.
-     * @private
-     * @internal
-     */
-    static forCollectionQuery<AppModelType = firestore.DocumentData, DbModelType extends firestore.DocumentData = firestore.DocumentData>(collectionRef: ResourcePath, converter?: firestore.FirestoreDataConverter<AppModelType, DbModelType>): QueryOptions<AppModelType, DbModelType>;
-    /**
-     * Returns query options for a query that fetches all descendants under the
-     * specified reference.
-     *
-     * @private
-     * @internal
-     */
-    static forKindlessAllDescendants(parent: ResourcePath, id: string, requireConsistency?: boolean): QueryOptions<firestore.DocumentData, firestore.DocumentData>;
-    /**
-     * Returns the union of the current and the provided options.
-     * @private
-     * @internal
-     */
-    with(settings: Partial<Omit<QueryOptions<AppModelType, DbModelType>, 'converter'>>): QueryOptions<AppModelType, DbModelType>;
-    withConverter<NewAppModelType, NewDbModelType extends firestore.DocumentData = firestore.DocumentData>(converter: firestore.FirestoreDataConverter<NewAppModelType, NewDbModelType>): QueryOptions<NewAppModelType, NewDbModelType>;
-    hasFieldOrders(): boolean;
-    isEqual(other: QueryOptions<AppModelType, DbModelType>): boolean;
-    private filtersEqual;
-}
diff --git a/node_modules/@google-cloud/firestore/build/src/reference/query-options.js b/node_modules/@google-cloud/firestore/build/src/reference/query-options.js
old mode 100644
new mode 100755
diff --git a/node_modules/@google-cloud/firestore/build/src/reference/query-snapshot.d.ts b/node_modules/@google-cloud/firestore/build/src/reference/query-snapshot.d.ts
deleted file mode 100644
index 09ab7a1..0000000
--- a/node_modules/@google-cloud/firestore/build/src/reference/query-snapshot.d.ts
+++ /dev/null
@@ -1,199 +0,0 @@
-/**
- * Copyright 2024 Google LLC. All Rights Reserved.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-import * as firestore from '@google-cloud/firestore';
-import { QueryDocumentSnapshot } from '../document';
-import { DocumentChange } from '../document-change';
-import { Timestamp } from '../timestamp';
-import { Query } from './query';
-/**
- * A QuerySnapshot contains zero or more
- * [QueryDocumentSnapshot]{@link QueryDocumentSnapshot} objects
- * representing the results of a query. The documents can be accessed as an
- * array via the [documents]{@link QuerySnapshot#documents} property
- * or enumerated using the [forEach]{@link QuerySnapshot#forEach}
- * method. The number of documents can be determined via the
- * [empty]{@link QuerySnapshot#empty} and
- * [size]{@link QuerySnapshot#size} properties.
- *
- * @class QuerySnapshot
- */
-export declare class QuerySnapshot<AppModelType = firestore.DocumentData, DbModelType extends firestore.DocumentData = firestore.DocumentData> implements firestore.QuerySnapshot<AppModelType, DbModelType> {
-    private readonly _query;
-    private readonly _readTime;
-    private readonly _size;
-    private _materializedDocs;
-    private _materializedChanges;
-    private _docs;
-    private _changes;
-    /**
-     * @private
-     *
-     * @param _query The originating query.
-     * @param _readTime The time when this query snapshot was obtained.
-     * @param _size The number of documents in the result set.
-     * @param docs A callback returning a sorted array of documents matching
-     * this query
-     * @param changes A callback returning a sorted array of document change
-     * events for this snapshot.
-     */
-    constructor(_query: Query<AppModelType, DbModelType>, _readTime: Timestamp, _size: number, docs: () => Array<QueryDocumentSnapshot<AppModelType, DbModelType>>, changes: () => Array<DocumentChange<AppModelType, DbModelType>>);
-    /**
-     * The query on which you called get() or onSnapshot() in order to get this
-     * QuerySnapshot.
-     *
-     * @type {Query}
-     * @name QuerySnapshot#query
-     * @readonly
-     *
-     * @example
-     * ```
-     * let query = firestore.collection('col').where('foo', '==', 'bar');
-     *
-     * query.limit(10).get().then(querySnapshot => {
-     *   console.log(`Returned first batch of results`);
-     *   let query = querySnapshot.query;
-     *   return query.offset(10).get();
-     * }).then(() => {
-     *   console.log(`Returned second batch of results`);
-     * });
-     * ```
-     */
-    get query(): Query<AppModelType, DbModelType>;
-    /**
-     * An array of all the documents in this QuerySnapshot.
-     *
-     * @type {Array.<QueryDocumentSnapshot>}
-     * @name QuerySnapshot#docs
-     * @readonly
-     *
-     * @example
-     * ```
-     * let query = firestore.collection('col').where('foo', '==', 'bar');
-     *
-     * query.get().then(querySnapshot => {
-     *   let docs = querySnapshot.docs;
-     *   for (let doc of docs) {
-     *     console.log(`Document found at path: ${doc.ref.path}`);
-     *   }
-     * });
-     * ```
-     */
-    get docs(): Array<QueryDocumentSnapshot<AppModelType, DbModelType>>;
-    /**
-     * True if there are no documents in the QuerySnapshot.
-     *
-     * @type {boolean}
-     * @name QuerySnapshot#empty
-     * @readonly
-     *
-     * @example
-     * ```
-     * let query = firestore.collection('col').where('foo', '==', 'bar');
-     *
-     * query.get().then(querySnapshot => {
-     *   if (querySnapshot.empty) {
-     *     console.log('No documents found.');
-     *   }
-     * });
-     * ```
-     */
-    get empty(): boolean;
-    /**
-     * The number of documents in the QuerySnapshot.
-     *
-     * @type {number}
-     * @name QuerySnapshot#size
-     * @readonly
-     *
-     * @example
-     * ```
-     * let query = firestore.collection('col').where('foo', '==', 'bar');
-     *
-     * query.get().then(querySnapshot => {
-     *   console.log(`Found ${querySnapshot.size} documents.`);
-     * });
-     * ```
-     */
-    get size(): number;
-    /**
-     * The time this query snapshot was obtained.
-     *
-     * @type {Timestamp}
-     * @name QuerySnapshot#readTime
-     *
-     * @example
-     * ```
-     * let query = firestore.collection('col').where('foo', '==', 'bar');
-     *
-     * query.get().then((querySnapshot) => {
-     *   let readTime = querySnapshot.readTime;
-     *   console.log(`Query results returned at '${readTime.toDate()}'`);
-     * });
-     * ```
-     */
-    get readTime(): Timestamp;
-    /**
-     * Returns an array of the documents changes since the last snapshot. If
-     * this is the first snapshot, all documents will be in the list as added
-     * changes.
-     *
-     * @return {Array.<DocumentChange>}
-     *
-     * @example
-     * ```
-     * let query = firestore.collection('col').where('foo', '==', 'bar');
-     *
-     * query.onSnapshot(querySnapshot => {
-     *   let changes = querySnapshot.docChanges();
-     *   for (let change of changes) {
-     *     console.log(`A document was ${change.type}.`);
-     *   }
-     * });
-     * ```
-     */
-    docChanges(): Array<DocumentChange<AppModelType, DbModelType>>;
-    /**
-     * Enumerates all of the documents in the QuerySnapshot. This is a convenience
-     * method for running the same callback on each {@link QueryDocumentSnapshot}
-     * that is returned.
-     *
-     * @param {function} callback A callback to be called with a
-     * [QueryDocumentSnapshot]{@link QueryDocumentSnapshot} for each document in
-     * the snapshot.
-     * @param {*=} thisArg The `this` binding for the callback..
-     *
-     * @example
-     * ```
-     * let query = firestore.collection('col').where('foo', '==', 'bar');
-     *
-     * query.get().then(querySnapshot => {
-     *   querySnapshot.forEach(documentSnapshot => {
-     *     console.log(`Document found at path: ${documentSnapshot.ref.path}`);
-     *   });
-     * });
-     * ```
-     */
-    forEach(callback: (result: firestore.QueryDocumentSnapshot<AppModelType, DbModelType>) => void, thisArg?: unknown): void;
-    /**
-     * Returns true if the document data in this `QuerySnapshot` is equal to the
-     * provided value.
-     *
-     * @param {*} other The value to compare against.
-     * @return {boolean} true if this `QuerySnapshot` is equal to the provided
-     * value.
-     */
-    isEqual(other: firestore.QuerySnapshot<AppModelType, DbModelType>): boolean;
-}
diff --git a/node_modules/@google-cloud/firestore/build/src/reference/query-snapshot.js b/node_modules/@google-cloud/firestore/build/src/reference/query-snapshot.js
old mode 100644
new mode 100755
diff --git a/node_modules/@google-cloud/firestore/build/src/reference/query-util.d.ts b/node_modules/@google-cloud/firestore/build/src/reference/query-util.d.ts
deleted file mode 100644
index cfbc121..0000000
--- a/node_modules/@google-cloud/firestore/build/src/reference/query-util.d.ts
+++ /dev/null
@@ -1,46 +0,0 @@
-/**
- * Copyright 2024 Google LLC. All Rights Reserved.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-import * as firestore from '@google-cloud/firestore';
-import { GoogleError } from 'google-gax';
-import { Serializer } from '../serializer';
-import { Timestamp } from '../timestamp';
-import { VectorQuery } from './vector-query';
-import { Query } from './query';
-import Firestore from '../index';
-import { QueryOptions } from './query-options';
-import { QueryResponse } from './types';
-import * as protos from '../../protos/firestore_v1_proto_api';
-import api = protos.google.firestore.v1;
-export declare class QueryUtil<AppModelType, DbModelType extends firestore.DocumentData, Template extends Query<AppModelType, DbModelType> | VectorQuery<AppModelType, DbModelType>> {
-    /** @private */
-    readonly _firestore: Firestore;
-    /** @private */
-    readonly _queryOptions: QueryOptions<AppModelType, DbModelType>;
-    /** @private */
-    readonly _serializer: Serializer;
-    constructor(
-    /** @private */
-    _firestore: Firestore, 
-    /** @private */
-    _queryOptions: QueryOptions<AppModelType, DbModelType>, 
-    /** @private */
-    _serializer: Serializer);
-    _getResponse(query: Template, transactionOrReadTime?: Uint8Array | Timestamp | api.ITransactionOptions, retryWithCursor?: boolean, explainOptions?: firestore.ExplainOptions): Promise<QueryResponse<ReturnType<Template['_createSnapshot']>>>;
-    _isPermanentRpcError(err: GoogleError, methodName: string): boolean;
-    _hasRetryTimedOut(methodName: string, startTime: number): boolean;
-    stream(query: Template): NodeJS.ReadableStream;
-    _stream(query: Template, transactionOrReadTime?: Uint8Array | Timestamp | api.ITransactionOptions, retryWithCursor?: boolean, explainOptions?: firestore.ExplainOptions): NodeJS.ReadableStream;
-}
diff --git a/node_modules/@google-cloud/firestore/build/src/reference/query-util.js b/node_modules/@google-cloud/firestore/build/src/reference/query-util.js
old mode 100644
new mode 100755
diff --git a/node_modules/@google-cloud/firestore/build/src/reference/query.d.ts b/node_modules/@google-cloud/firestore/build/src/reference/query.d.ts
deleted file mode 100644
index 26edb22..0000000
--- a/node_modules/@google-cloud/firestore/build/src/reference/query.d.ts
+++ /dev/null
@@ -1,742 +0,0 @@
-/**
- * Copyright 2024 Google LLC. All Rights Reserved.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-import * as protos from '../../protos/firestore_v1_proto_api';
-import api = protos.google.firestore.v1;
-import * as firestore from '@google-cloud/firestore';
-import { GoogleError } from 'google-gax';
-import { QueryUtil } from './query-util';
-import { Firestore, DocumentChange, DocumentSnapshot, FieldPath, Filter, QueryDocumentSnapshot, Timestamp } from '../index';
-import { QueryOptions } from './query-options';
-import { FieldOrder } from './field-order';
-import { FilterInternal } from './filter-internal';
-import { FieldFilterInternal } from './field-filter-internal';
-import { VectorQueryOptions } from './vector-query-options';
-import { QuerySnapshot } from './query-snapshot';
-import { Serializer } from '../serializer';
-import { ExplainResults } from '../query-profile';
-import { CompositeFilter, UnaryFilter } from '../filter';
-import { QueryResponse, QuerySnapshotResponse } from './types';
-import { AggregateQuery } from './aggregate-query';
-import { VectorQuery } from './vector-query';
-/**
- * A Query refers to a query which you can read or stream from. You can also
- * construct refined Query objects by adding filters and ordering.
- *
- * @class Query
- */
-export declare class Query<AppModelType = firestore.DocumentData, DbModelType extends firestore.DocumentData = firestore.DocumentData> implements firestore.Query<AppModelType, DbModelType> {
-    /**
-     * @internal
-     * @private
-     **/
-    readonly _firestore: Firestore;
-    /**
-     * @internal
-     * @private
-     **/
-    readonly _queryOptions: QueryOptions<AppModelType, DbModelType>;
-    /**
-     * @internal
-     * @private
-     **/
-    readonly _serializer: Serializer;
-    /**
-     * @internal
-     * @private
-     **/
-    protected readonly _allowUndefined: boolean;
-    /**
-     * @internal
-     * @private
-     **/
-    readonly _queryUtil: QueryUtil<AppModelType, DbModelType, Query<AppModelType, DbModelType>>;
-    /**
-     * @internal
-     * @private
-     *
-     * @param _firestore The Firestore Database client.
-     * @param _queryOptions Options that define the query.
-     */
-    constructor(
-    /**
-     * @internal
-     * @private
-     **/
-    _firestore: Firestore, 
-    /**
-     * @internal
-     * @private
-     **/
-    _queryOptions: QueryOptions<AppModelType, DbModelType>);
-    /**
-     * Extracts field values from the DocumentSnapshot based on the provided
-     * field order.
-     *
-     * @private
-     * @internal
-     * @param documentSnapshot The document to extract the fields from.
-     * @param fieldOrders The field order that defines what fields we should
-     * extract.
-     * @return {Array.<*>} The field values to use.
-     */
-    static _extractFieldValues(documentSnapshot: DocumentSnapshot, fieldOrders: FieldOrder[]): unknown[];
-    /**
-     * The [Firestore]{@link Firestore} instance for the Firestore
-     * database (useful for performing transactions, etc.).
-     *
-     * @type {Firestore}
-     * @name Query#firestore
-     * @readonly
-     *
-     * @example
-     * ```
-     * let collectionRef = firestore.collection('col');
-     *
-     * collectionRef.add({foo: 'bar'}).then(documentReference => {
-     *   let firestore = documentReference.firestore;
-     *   console.log(`Root location for document is ${firestore.formattedName}`);
-     * });
-     * ```
-     */
-    get firestore(): Firestore;
-    /**
-     * Creates and returns a new [Query]{@link Query} with the additional filter
-     * that documents must contain the specified field and that its value should
-     * satisfy the relation constraint provided.
-     *
-     * This function returns a new (immutable) instance of the Query (rather than
-     * modify the existing instance) to impose the filter.
-     *
-     * @param {string|FieldPath} fieldPath The name of a property value to compare.
-     * @param {string} opStr A comparison operation in the form of a string.
-     * Acceptable operator strings are "<", "<=", "==", "!=", ">=", ">", "array-contains",
-     * "in", "not-in", and "array-contains-any".
-     * @param {*} value The value to which to compare the field for inclusion in
-     * a query.
-     * @returns {Query} The created Query.
-     *
-     * @example
-     * ```
-     * let collectionRef = firestore.collection('col');
-     *
-     * collectionRef.where('foo', '==', 'bar').get().then(querySnapshot => {
-     *   querySnapshot.forEach(documentSnapshot => {
-     *     console.log(`Found document at ${documentSnapshot.ref.path}`);
-     *   });
-     * });
-     * ```
-     */
-    where(fieldPath: string | FieldPath, opStr: firestore.WhereFilterOp, value: unknown): Query<AppModelType, DbModelType>;
-    /**
-     * Creates and returns a new [Query]{@link Query} with the additional filter
-     * that documents should satisfy the relation constraint(s) provided.
-     *
-     * This function returns a new (immutable) instance of the Query (rather than
-     * modify the existing instance) to impose the filter.
-     *
-     * @param {Filter} filter A unary or composite filter to apply to the Query.
-     * @returns {Query} The created Query.
-     *
-     * @example
-     * ```
-     * let collectionRef = firestore.collection('col');
-     *
-     * collectionRef.where(Filter.and(Filter.where('foo', '==', 'bar'), Filter.where('foo', '!=', 'baz'))).get()
-     *   .then(querySnapshot => {
-     *     querySnapshot.forEach(documentSnapshot => {
-     *       console.log(`Found document at ${documentSnapshot.ref.path}`);
-     *     });
-     * });
-     * ```
-     */
-    where(filter: Filter): Query<AppModelType, DbModelType>;
-    /**
-     * @internal
-     * @private
-     */
-    _parseFilter(filter: Filter): FilterInternal;
-    /**
-     * @internal
-     * @private
-     */
-    _parseFieldFilter(fieldFilterData: UnaryFilter): FieldFilterInternal;
-    /**
-     * @internal
-     * @private
-     */
-    _parseCompositeFilter(compositeFilterData: CompositeFilter): FilterInternal;
-    /**
-     * Creates and returns a new [Query]{@link Query} instance that applies a
-     * field mask to the result and returns only the specified subset of fields.
-     * You can specify a list of field paths to return, or use an empty list to
-     * only return the references of matching documents.
-     *
-     * Queries that contain field masks cannot be listened to via `onSnapshot()`
-     * listeners.
-     *
-     * This function returns a new (immutable) instance of the Query (rather than
-     * modify the existing instance) to impose the field mask.
-     *
-     * @param {...(string|FieldPath)} fieldPaths The field paths to return.
-     * @returns {Query} The created Query.
-     *
-     * @example
-     * ```
-     * let collectionRef = firestore.collection('col');
-     * let documentRef = collectionRef.doc('doc');
-     *
-     * return documentRef.set({x:10, y:5}).then(() => {
-     *   return collectionRef.where('x', '>', 5).select('y').get();
-     * }).then((res) => {
-     *   console.log(`y is ${res.docs[0].get('y')}.`);
-     * });
-     * ```
-     */
-    select(...fieldPaths: Array<string | FieldPath>): Query;
-    /**
-     * Creates and returns a new [Query]{@link Query} that's additionally sorted
-     * by the specified field, optionally in descending order instead of
-     * ascending.
-     *
-     * This function returns a new (immutable) instance of the Query (rather than
-     * modify the existing instance) to impose the field mask.
-     *
-     * @param {string|FieldPath} fieldPath The field to sort by.
-     * @param {string=} directionStr Optional direction to sort by ('asc' or
-     * 'desc'). If not specified, order will be ascending.
-     * @returns {Query} The created Query.
-     *
-     * @example
-     * ```
-     * let query = firestore.collection('col').where('foo', '>', 42);
-     *
-     * query.orderBy('foo', 'desc').get().then(querySnapshot => {
-     *   querySnapshot.forEach(documentSnapshot => {
-     *     console.log(`Found document at ${documentSnapshot.ref.path}`);
-     *   });
-     * });
-     * ```
-     */
-    orderBy(fieldPath: string | firestore.FieldPath, directionStr?: firestore.OrderByDirection): Query<AppModelType, DbModelType>;
-    /**
-     * Creates and returns a new [Query]{@link Query} that only returns the
-     * first matching documents.
-     *
-     * This function returns a new (immutable) instance of the Query (rather than
-     * modify the existing instance) to impose the limit.
-     *
-     * @param {number} limit The maximum number of items to return.
-     * @returns {Query} The created Query.
-     *
-     * @example
-     * ```
-     * let query = firestore.collection('col').where('foo', '>', 42);
-     *
-     * query.limit(1).get().then(querySnapshot => {
-     *   querySnapshot.forEach(documentSnapshot => {
-     *     console.log(`Found document at ${documentSnapshot.ref.path}`);
-     *   });
-     * });
-     * ```
-     */
-    limit(limit: number): Query<AppModelType, DbModelType>;
-    /**
-     * Creates and returns a new [Query]{@link Query} that only returns the
-     * last matching documents.
-     *
-     * You must specify at least one orderBy clause for limitToLast queries,
-     * otherwise an exception will be thrown during execution.
-     *
-     * Results for limitToLast queries cannot be streamed via the `stream()` API.
-     *
-     * @param limit The maximum number of items to return.
-     * @return The created Query.
-     *
-     * @example
-     * ```
-     * let query = firestore.collection('col').where('foo', '>', 42);
-     *
-     * query.limitToLast(1).get().then(querySnapshot => {
-     *   querySnapshot.forEach(documentSnapshot => {
-     *     console.log(`Last matching document is ${documentSnapshot.ref.path}`);
-     *   });
-     * });
-     * ```
-     */
-    limitToLast(limit: number): Query<AppModelType, DbModelType>;
-    /**
-     * Specifies the offset of the returned results.
-     *
-     * This function returns a new (immutable) instance of the
-     * [Query]{@link Query} (rather than modify the existing instance)
-     * to impose the offset.
-     *
-     * @param {number} offset The offset to apply to the Query results
-     * @returns {Query} The created Query.
-     *
-     * @example
-     * ```
-     * let query = firestore.collection('col').where('foo', '>', 42);
-     *
-     * query.limit(10).offset(20).get().then(querySnapshot => {
-     *   querySnapshot.forEach(documentSnapshot => {
-     *     console.log(`Found document at ${documentSnapshot.ref.path}`);
-     *   });
-     * });
-     * ```
-     */
-    offset(offset: number): Query<AppModelType, DbModelType>;
-    /**
-     * Returns a query that counts the documents in the result set of this
-     * query.
-     *
-     * The returned query, when executed, counts the documents in the result set
-     * of this query without actually downloading the documents.
-     *
-     * Using the returned query to count the documents is efficient because only
-     * the final count, not the documents' data, is downloaded. The returned
-     * query can count the documents in cases where the result set is
-     * prohibitively large to download entirely (thousands of documents).
-     *
-     * @return a query that counts the documents in the result set of this
-     * query. The count can be retrieved from `snapshot.data().count`, where
-     * `snapshot` is the `AggregateQuerySnapshot` resulting from running the
-     * returned query.
-     */
-    count(): AggregateQuery<{
-        count: firestore.AggregateField<number>;
-    }, AppModelType, DbModelType>;
-    /**
-     * Returns a query that can perform the given aggregations.
-     *
-     * The returned query, when executed, calculates the specified aggregations
-     * over the documents in the result set of this query without actually
-     * downloading the documents.
-     *
-     * Using the returned query to perform aggregations is efficient because only
-     * the final aggregation values, not the documents' data, is downloaded. The
-     * returned query can perform aggregations of the documents count the
-     * documents in cases where the result set is prohibitively large to download
-     * entirely (thousands of documents).
-     *
-     * @param aggregateSpec An `AggregateSpec` object that specifies the aggregates
-     * to perform over the result set. The AggregateSpec specifies aliases for each
-     * aggregate, which can be used to retrieve the aggregate result.
-     * @example
-     * ```typescript
-     * const aggregateQuery = col.aggregate(query, {
-     *   countOfDocs: count(),
-     *   totalHours: sum('hours'),
-     *   averageScore: average('score')
-     * });
-     *
-     * const aggregateSnapshot = await aggregateQuery.get();
-     * const countOfDocs: number = aggregateSnapshot.data().countOfDocs;
-     * const totalHours: number = aggregateSnapshot.data().totalHours;
-     * const averageScore: number | null = aggregateSnapshot.data().averageScore;
-     * ```
-     */
-    aggregate<T extends firestore.AggregateSpec>(aggregateSpec: T): AggregateQuery<T, AppModelType, DbModelType>;
-    /**
-     * Returns a query that can perform vector distance (similarity) search with given parameters.
-     *
-     * The returned query, when executed, performs a distance (similarity) search on the specified
-     * `vectorField` against the given `queryVector` and returns the top documents that are closest
-     * to the `queryVector`.
-     *
-     * Only documents whose `vectorField` field is a {@link VectorValue} of the same dimension as `queryVector`
-     * participate in the query, all other documents are ignored.
-     *
-     * @example
-     * ```
-     * // Returns the closest 10 documents whose Euclidean distance from their 'embedding' fields are closed to [41, 42].
-     * const vectorQuery = col.findNearest('embedding', [41, 42], {limit: 10, distanceMeasure: 'EUCLIDEAN'});
-     *
-     * const querySnapshot = await vectorQuery.get();
-     * querySnapshot.forEach(...);
-     * ```
-     *
-     * @param vectorField - A string or {@link FieldPath} specifying the vector field to search on.
-     * @param queryVector - The {@link VectorValue} used to measure the distance from `vectorField` values in the documents.
-     * @param options - Options control the vector query. `limit` specifies the upper bound of documents to return, must
-     * be a positive integer with a maximum value of 1000. `distanceMeasure` specifies what type of distance is calculated
-     * when performing the query.
-     *
-     * @deprecated Use the new {@link findNearest} implementation
-     * accepting a single `options` param.
-     */
-    findNearest(vectorField: string | firestore.FieldPath, queryVector: firestore.VectorValue | Array<number>, options: {
-        limit: number;
-        distanceMeasure: 'EUCLIDEAN' | 'COSINE' | 'DOT_PRODUCT';
-    }): VectorQuery<AppModelType, DbModelType>;
-    /**
-     * Returns a query that can perform vector distance (similarity) search with given parameters.
-     *
-     * The returned query, when executed, performs a distance (similarity) search on the specified
-     * `vectorField` against the given `queryVector` and returns the top documents that are closest
-     * to the `queryVector`.
-     *
-     * Only documents whose `vectorField` field is a {@link VectorValue} of the same dimension as `queryVector`
-     * participate in the query, all other documents are ignored.
-     *
-     * @example
-     * ```
-     * // Returns the closest 10 documents whose Euclidean distance from their 'embedding' fields are closed to [41, 42].
-     * const vectorQuery = col.findNearest({
-     *     vectorField: 'embedding',
-     *     queryVector: [41, 42],
-     *     limit: 10,
-     *     distanceMeasure: 'EUCLIDEAN',
-     *     distanceResultField: 'distance',
-     *     distanceThreshold: 0.125
-     * });
-     *
-     * const querySnapshot = await aggregateQuery.get();
-     * querySnapshot.forEach(...);
-     * ```
-     * @param options - An argument specifying the behavior of the {@link VectorQuery} returned by this function.
-     * See {@link VectorQueryOptions}.
-     */
-    findNearest(options: VectorQueryOptions): VectorQuery<AppModelType, DbModelType>;
-    _findNearest(options: VectorQueryOptions): VectorQuery<AppModelType, DbModelType>;
-    /**
-     * Returns true if this `Query` is equal to the provided value.
-     *
-     * @param {*} other The value to compare against.
-     * @return {boolean} true if this `Query` is equal to the provided value.
-     */
-    isEqual(other: firestore.Query<AppModelType, DbModelType>): boolean;
-    /**
-     * Returns the sorted array of inequality filter fields used in this query.
-     *
-     * @return An array of inequality filter fields sorted lexicographically by FieldPath.
-     */
-    private getInequalityFilterFields;
-    /**
-     * Computes the backend ordering semantics for DocumentSnapshot cursors.
-     *
-     * @private
-     * @internal
-     * @param cursorValuesOrDocumentSnapshot The snapshot of the document or the
-     * set of field values to use as the boundary.
-     * @returns The implicit ordering semantics.
-     */
-    private createImplicitOrderBy;
-    /**
-     * Builds a Firestore 'Position' proto message.
-     *
-     * @private
-     * @internal
-     * @param {Array.<FieldOrder>} fieldOrders The field orders to use for this
-     * cursor.
-     * @param {Array.<DocumentSnapshot|*>} cursorValuesOrDocumentSnapshot The
-     * snapshot of the document or the set of field values to use as the boundary.
-     * @param before Whether the query boundary lies just before or after the
-     * provided data.
-     * @returns {Object} The proto message.
-     */
-    private createCursor;
-    /**
-     * Validates that a value used with FieldValue.documentId() is either a
-     * string or a DocumentReference that is part of the query`s result set.
-     * Throws a validation error or returns a DocumentReference that can
-     * directly be used in the Query.
-     *
-     * @param val The value to validate.
-     * @throws If the value cannot be used for this query.
-     * @return If valid, returns a DocumentReference that can be used with the
-     * query.
-     * @private
-     * @internal
-     */
-    private validateReference;
-    /**
-     * Creates and returns a new [Query]{@link Query} that starts at the provided
-     * set of field values relative to the order of the query. The order of the
-     * provided values must match the order of the order by clauses of the query.
-     *
-     * @param {...*|DocumentSnapshot} fieldValuesOrDocumentSnapshot The snapshot
-     * of the document the query results should start at or the field values to
-     * start this query at, in order of the query's order by.
-     * @returns {Query} A query with the new starting point.
-     *
-     * @example
-     * ```
-     * let query = firestore.collection('col');
-     *
-     * query.orderBy('foo').startAt(42).get().then(querySnapshot => {
-     *   querySnapshot.forEach(documentSnapshot => {
-     *     console.log(`Found document at ${documentSnapshot.ref.path}`);
-     *   });
-     * });
-     * ```
-     */
-    startAt(...fieldValuesOrDocumentSnapshot: Array<unknown>): Query<AppModelType, DbModelType>;
-    /**
-     * Creates and returns a new [Query]{@link Query} that starts after the
-     * provided set of field values relative to the order of the query. The order
-     * of the provided values must match the order of the order by clauses of the
-     * query.
-     *
-     * @param {...*|DocumentSnapshot} fieldValuesOrDocumentSnapshot The snapshot
-     * of the document the query results should start after or the field values to
-     * start this query after, in order of the query's order by.
-     * @returns {Query} A query with the new starting point.
-     *
-     * @example
-     * ```
-     * let query = firestore.collection('col');
-     *
-     * query.orderBy('foo').startAfter(42).get().then(querySnapshot => {
-     *   querySnapshot.forEach(documentSnapshot => {
-     *     console.log(`Found document at ${documentSnapshot.ref.path}`);
-     *   });
-     * });
-     * ```
-     */
-    startAfter(...fieldValuesOrDocumentSnapshot: Array<unknown>): Query<AppModelType, DbModelType>;
-    /**
-     * Creates and returns a new [Query]{@link Query} that ends before the set of
-     * field values relative to the order of the query. The order of the provided
-     * values must match the order of the order by clauses of the query.
-     *
-     * @param {...*|DocumentSnapshot} fieldValuesOrDocumentSnapshot The snapshot
-     * of the document the query results should end before or the field values to
-     * end this query before, in order of the query's order by.
-     * @returns {Query} A query with the new ending point.
-     *
-     * @example
-     * ```
-     * let query = firestore.collection('col');
-     *
-     * query.orderBy('foo').endBefore(42).get().then(querySnapshot => {
-     *   querySnapshot.forEach(documentSnapshot => {
-     *     console.log(`Found document at ${documentSnapshot.ref.path}`);
-     *   });
-     * });
-     * ```
-     */
-    endBefore(...fieldValuesOrDocumentSnapshot: Array<unknown>): Query<AppModelType, DbModelType>;
-    /**
-     * Creates and returns a new [Query]{@link Query} that ends at the provided
-     * set of field values relative to the order of the query. The order of the
-     * provided values must match the order of the order by clauses of the query.
-     *
-     * @param {...*|DocumentSnapshot} fieldValuesOrDocumentSnapshot The snapshot
-     * of the document the query results should end at or the field values to end
-     * this query at, in order of the query's order by.
-     * @returns {Query} A query with the new ending point.
-     *
-     * @example
-     * ```
-     * let query = firestore.collection('col');
-     *
-     * query.orderBy('foo').endAt(42).get().then(querySnapshot => {
-     *   querySnapshot.forEach(documentSnapshot => {
-     *     console.log(`Found document at ${documentSnapshot.ref.path}`);
-     *   });
-     * });
-     * ```
-     */
-    endAt(...fieldValuesOrDocumentSnapshot: Array<unknown>): Query<AppModelType, DbModelType>;
-    /**
-     * Executes the query and returns the results as a
-     * [QuerySnapshot]{@link QuerySnapshot}.
-     *
-     * @returns {Promise.<QuerySnapshot>} A Promise that resolves with the results
-     * of the Query.
-     *
-     * @example
-     * ```
-     * let query = firestore.collection('col').where('foo', '==', 'bar');
-     *
-     * query.get().then(querySnapshot => {
-     *   querySnapshot.forEach(documentSnapshot => {
-     *     console.log(`Found document at ${documentSnapshot.ref.path}`);
-     *   });
-     * });
-     * ```
-     */
-    get(): Promise<QuerySnapshot<AppModelType, DbModelType>>;
-    /**
-     * Plans and optionally executes this query. Returns a Promise that will be
-     * resolved with the planner information, statistics from the query execution (if any),
-     * and the query results (if any).
-     *
-     * @return A Promise that will be resolved with the planner information, statistics
-     *  from the query execution (if any), and the query results (if any).
-     */
-    explain(options?: firestore.ExplainOptions): Promise<ExplainResults<QuerySnapshot<AppModelType, DbModelType>>>;
-    /**
-     * Internal get() method that accepts an optional transaction options, and
-     * returns a query snapshot with transaction and explain metadata.
-     *
-     * @private
-     * @internal
-     * @param transactionOrReadTime A transaction ID, options to start a new
-     *  transaction, or timestamp to use as read time.
-     */
-    _get(transactionOrReadTime?: Uint8Array | Timestamp | api.ITransactionOptions): Promise<QuerySnapshotResponse<QuerySnapshot<AppModelType, DbModelType>>>;
-    _getResponse(transactionOrReadTime?: Uint8Array | Timestamp | api.ITransactionOptions, explainOptions?: firestore.ExplainOptions): Promise<QueryResponse<QuerySnapshot<AppModelType, DbModelType>>>;
-    /**
-     * Executes the query and streams the results as
-     * [QueryDocumentSnapshots]{@link QueryDocumentSnapshot}.
-     *
-     * @returns {Stream.<QueryDocumentSnapshot>} A stream of
-     * QueryDocumentSnapshots.
-     *
-     * @example
-     * ```
-     * let query = firestore.collection('col').where('foo', '==', 'bar');
-     *
-     * let count = 0;
-     *
-     * query.stream().on('data', (documentSnapshot) => {
-     *   console.log(`Found document with name '${documentSnapshot.id}'`);
-     *   ++count;
-     * }).on('end', () => {
-     *   console.log(`Total count is ${count}`);
-     * });
-     * ```
-     */
-    stream(): NodeJS.ReadableStream;
-    /**
-     * Executes the query and streams the results as the following object:
-     * {document?: DocumentSnapshot, metrics?: ExplainMetrics}
-     *
-     * The stream surfaces documents one at a time as they are received from the
-     * server, and at the end, it will surface the metrics associated with
-     * executing the query.
-     *
-     * @example
-     * ```
-     * let query = firestore.collection('col').where('foo', '==', 'bar');
-     *
-     * let count = 0;
-     *
-     * query.explainStream({analyze: true}).on('data', (data) => {
-     *   if (data.document) {
-     *     // Use data.document which is a DocumentSnapshot instance.
-     *     console.log(`Found document with name '${data.document.id}'`);
-     *     ++count;
-     *   }
-     *   if (data.metrics) {
-     *     // Use data.metrics which is an ExplainMetrics instance.
-     *   }
-     * }).on('end', () => {
-     *   console.log(`Received ${count} documents.`);
-     * });
-     * ```
-     */
-    explainStream(explainOptions?: firestore.ExplainOptions): NodeJS.ReadableStream;
-    /**
-     * Converts a QueryCursor to its proto representation.
-     *
-     * @param cursor The original cursor value
-     * @private
-     * @internal
-     */
-    private toCursor;
-    /**
-     * Internal method for serializing a query to its RunQuery proto
-     * representation with an optional transaction id or read time.
-     *
-     * @param transactionOrReadTime A transaction ID, options to start a new
-     *  transaction, or timestamp to use as read time.
-     * @param explainOptions Options to use for explaining the query (if any).
-     * @private
-     * @internal
-     * @returns Serialized JSON for the query.
-     */
-    toProto(transactionOrReadTime?: Uint8Array | Timestamp | api.ITransactionOptions, explainOptions?: firestore.ExplainOptions): api.IRunQueryRequest;
-    /**
-     * Converts current Query to an IBundledQuery.
-     *
-     * @private
-     * @internal
-     */
-    _toBundledQuery(): protos.firestore.IBundledQuery;
-    private toStructuredQuery;
-    /**
-     * @internal
-     * @private
-     * This method exists solely to maintain backward compatability.
-     */
-    _isPermanentRpcError(err: GoogleError, methodName: string): boolean;
-    /**
-     * @internal
-     * @private
-     * This method exists solely to maintain backward compatability.
-     */
-    _hasRetryTimedOut(methodName: string, startTime: number): boolean;
-    /**
-     * Internal streaming method that accepts an optional transaction ID.
-     *
-     * BEWARE: If `transactionOrReadTime` is `ITransactionOptions`, then the first
-     * response in the stream will be a transaction response.
-     *
-     * @param transactionOrReadTime A transaction ID, options to start a new
-     *  transaction, or timestamp to use as read time.
-     * @param explainOptions Options to use for explaining the query (if any).
-     * @private
-     * @internal
-     * @returns A stream of document results, optionally preceded by a transaction response.
-     */
-    _stream(transactionOrReadTime?: Uint8Array | Timestamp | api.ITransactionOptions, explainOptions?: firestore.ExplainOptions): NodeJS.ReadableStream;
-    /**
-     * Attaches a listener for QuerySnapshot events.
-     *
-     * @param {querySnapshotCallback} onNext A callback to be called every time
-     * a new [QuerySnapshot]{@link QuerySnapshot} is available.
-     * @param {errorCallback=} onError A callback to be called if the listen
-     * fails or is cancelled. No further callbacks will occur.
-     *
-     * @returns {function()} An unsubscribe function that can be called to cancel
-     * the snapshot listener.
-     *
-     * @example
-     * ```
-     * let query = firestore.collection('col').where('foo', '==', 'bar');
-     *
-     * let unsubscribe = query.onSnapshot(querySnapshot => {
-     *   console.log(`Received query snapshot of size ${querySnapshot.size}`);
-     * }, err => {
-     *   console.log(`Encountered error: ${err}`);
-     * });
-     *
-     * // Remove this listener.
-     * unsubscribe();
-     * ```
-     */
-    onSnapshot(onNext: (snapshot: QuerySnapshot<AppModelType, DbModelType>) => void, onError?: (error: Error) => void): () => void;
-    /**
-     * Returns a function that can be used to sort QueryDocumentSnapshots
-     * according to the sort criteria of this query.
-     *
-     * @private
-     * @internal
-     */
-    comparator(): (s1: QueryDocumentSnapshot<AppModelType, DbModelType>, s2: QueryDocumentSnapshot<AppModelType, DbModelType>) => number;
-    withConverter(converter: null): Query;
-    withConverter<NewAppModelType, NewDbModelType extends firestore.DocumentData = firestore.DocumentData>(converter: firestore.FirestoreDataConverter<NewAppModelType, NewDbModelType>): Query<NewAppModelType, NewDbModelType>;
-    /**
-     * Construct the resulting snapshot for this query with given documents.
-     *
-     * @private
-     * @internal
-     */
-    _createSnapshot(readTime: Timestamp, size: number, docs: () => Array<QueryDocumentSnapshot<AppModelType, DbModelType>>, changes: () => Array<DocumentChange<AppModelType, DbModelType>>): QuerySnapshot<AppModelType, DbModelType>;
-}
diff --git a/node_modules/@google-cloud/firestore/build/src/reference/query.js b/node_modules/@google-cloud/firestore/build/src/reference/query.js
old mode 100644
new mode 100755
diff --git a/node_modules/@google-cloud/firestore/build/src/reference/types.d.ts b/node_modules/@google-cloud/firestore/build/src/reference/types.d.ts
deleted file mode 100644
index e144d5e..0000000
--- a/node_modules/@google-cloud/firestore/build/src/reference/types.d.ts
+++ /dev/null
@@ -1,66 +0,0 @@
-/**
- * Copyright 2024 Google LLC. All Rights Reserved.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-import * as protos from '../../protos/firestore_v1_proto_api';
-import api = protos.google.firestore.v1;
-import { Timestamp } from '../timestamp';
-import { ExplainMetrics } from '../query-profile';
-import { QueryDocumentSnapshot } from '../document';
-import * as firestore from '@google-cloud/firestore';
-export interface QueryStreamElement<AppModelType = firestore.DocumentData, DbModelType extends firestore.DocumentData = firestore.DocumentData> {
-    transaction?: Uint8Array;
-    readTime?: Timestamp;
-    explainMetrics?: ExplainMetrics;
-    document?: QueryDocumentSnapshot<AppModelType, DbModelType>;
-}
-export interface QueryResponse<TSnapshot> {
-    transaction?: Uint8Array;
-    explainMetrics?: ExplainMetrics;
-    result?: TSnapshot;
-}
-export interface QuerySnapshotResponse<TSnapshot> extends QueryResponse<TSnapshot> {
-    result: TSnapshot;
-}
-/** Internal representation of a query cursor before serialization. */
-export interface QueryCursor {
-    before: boolean;
-    values: api.IValue[];
-}
-/*!
- * Denotes whether a provided limit is applied to the beginning or the end of
- * the result set.
- */
-export declare enum LimitType {
-    First = 0,
-    Last = 1
-}
-/**
- * onSnapshot() callback that receives a QuerySnapshot.
- *
- * @callback querySnapshotCallback
- * @param {QuerySnapshot} snapshot A query snapshot.
- */
-/**
- * onSnapshot() callback that receives a DocumentSnapshot.
- *
- * @callback documentSnapshotCallback
- * @param {DocumentSnapshot} snapshot A document snapshot.
- */
-/**
- * onSnapshot() callback that receives an error.
- *
- * @callback errorCallback
- * @param {Error} err An error from a listen.
- */
diff --git a/node_modules/@google-cloud/firestore/build/src/reference/types.js b/node_modules/@google-cloud/firestore/build/src/reference/types.js
old mode 100644
new mode 100755
diff --git a/node_modules/@google-cloud/firestore/build/src/reference/vector-query-options.d.ts b/node_modules/@google-cloud/firestore/build/src/reference/vector-query-options.d.ts
deleted file mode 100644
index f8eebb7..0000000
--- a/node_modules/@google-cloud/firestore/build/src/reference/vector-query-options.d.ts
+++ /dev/null
@@ -1,54 +0,0 @@
-/**
- * Copyright 2024 Google LLC. All Rights Reserved.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-import * as firestore from '@google-cloud/firestore';
-/**
- * Specifies the behavior of the {@link VectorQuery} generated by a call to {@link Query.findNearest}.
- */
-export interface VectorQueryOptions {
-    /**
-     * A string or {@link FieldPath} specifying the vector field to search on.
-     */
-    vectorField: string | firestore.FieldPath;
-    /**
-     * The {@link VectorValue} used to measure the distance from `vectorField` values in the documents.
-     */
-    queryVector: firestore.VectorValue | Array<number>;
-    /**
-     * Specifies the upper bound of documents to return, must be a positive integer with a maximum value of 1000.
-     */
-    limit: number;
-    /**
-     * Specifies what type of distance is calculated when performing the query.
-     */
-    distanceMeasure: 'EUCLIDEAN' | 'COSINE' | 'DOT_PRODUCT';
-    /**
-     * Optionally specifies the name of a field that will be set on each returned DocumentSnapshot,
-     * which will contain the computed distance for the document.
-     */
-    distanceResultField?: string | firestore.FieldPath;
-    /**
-     * Specifies a threshold for which no less similar documents will be returned. The behavior
-     * of the specified `distanceMeasure` will affect the meaning of the distance threshold.
-     *
-     *  - For `distanceMeasure: "EUCLIDEAN"`, the meaning of `distanceThreshold` is:
-     *     SELECT docs WHERE euclidean_distance <= distanceThreshold
-     *  - For `distanceMeasure: "COSINE"`, the meaning of `distanceThreshold` is:
-     *     SELECT docs WHERE cosine_distance <= distanceThreshold
-     *  - For `distanceMeasure: "DOT_PRODUCT"`, the meaning of `distanceThreshold` is:
-     *     SELECT docs WHERE dot_product_distance >= distanceThreshold
-     */
-    distanceThreshold?: number;
-}
diff --git a/node_modules/@google-cloud/firestore/build/src/reference/vector-query-options.js b/node_modules/@google-cloud/firestore/build/src/reference/vector-query-options.js
old mode 100644
new mode 100755
diff --git a/node_modules/@google-cloud/firestore/build/src/reference/vector-query-snapshot.d.ts b/node_modules/@google-cloud/firestore/build/src/reference/vector-query-snapshot.d.ts
deleted file mode 100644
index 6f0e9d6..0000000
--- a/node_modules/@google-cloud/firestore/build/src/reference/vector-query-snapshot.d.ts
+++ /dev/null
@@ -1,191 +0,0 @@
-/**
- * Copyright 2024 Google LLC. All Rights Reserved.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-import * as firestore from '@google-cloud/firestore';
-import { QueryDocumentSnapshot } from '../document';
-import { DocumentChange } from '../document-change';
-import { Timestamp } from '../timestamp';
-import { VectorQuery } from './vector-query';
-/**
- * A `VectorQuerySnapshot` contains zero or more `QueryDocumentSnapshot` objects
- * representing the results of a query. The documents can be accessed as an
- * array via the `docs` property or enumerated using the `forEach` method. The
- * number of documents can be determined via the `empty` and `size`
- * properties.
- */
-export declare class VectorQuerySnapshot<AppModelType = firestore.DocumentData, DbModelType extends firestore.DocumentData = firestore.DocumentData> implements firestore.VectorQuerySnapshot<AppModelType, DbModelType> {
-    private readonly _query;
-    private readonly _readTime;
-    private readonly _size;
-    private _materializedDocs;
-    private _materializedChanges;
-    private _docs;
-    private _changes;
-    /**
-     * @private
-     * @internal
-     *
-     * @param _query - The originating query.
-     * @param _readTime - The time when this query snapshot was obtained.
-     * @param _size - The number of documents in the result set.
-     * @param docs - A callback returning a sorted array of documents matching
-     * this query
-     * @param changes - A callback returning a sorted array of document change
-     * events for this snapshot.
-     */
-    constructor(_query: VectorQuery<AppModelType, DbModelType>, _readTime: Timestamp, _size: number, docs: () => Array<QueryDocumentSnapshot<AppModelType, DbModelType>>, changes: () => Array<DocumentChange<AppModelType, DbModelType>>);
-    /**
-     * The `VectorQuery` on which you called get() in order to get this
-     * `VectorQuerySnapshot`.
-     *
-     * @readonly
-     *
-     * @example
-     * ```
-     * let query = firestore.collection('col').where('foo', '==', 'bar');
-     *
-     * query.findNearest("embedding", [0, 0], {limit: 10, distanceMeasure: "EUCLIDEAN"})
-     *   .get().then(querySnapshot => {
-     *     console.log(`Returned first batch of results`);
-     *     let query = querySnapshot.query;
-     *     return query.offset(10).get();
-     *   }).then(() => {
-     *   console.log(`Returned second batch of results`);
-     *   });
-     * ```
-     */
-    get query(): VectorQuery<AppModelType, DbModelType>;
-    /**
-     * An array of all the documents in this `VectorQuerySnapshot`.
-     *
-     * @readonly
-     *
-     * @example
-     * ```
-     * let query = firestore.collection('col')
-     *   .findNearest("embedding", [0, 0], {limit: 10, distanceMeasure: "EUCLIDEAN"});
-     *
-     * query.get().then(querySnapshot => {
-     *   let docs = querySnapshot.docs;
-     *   for (let doc of docs) {
-     *     console.log(`Document found at path: ${doc.ref.path}`);
-     *   }
-     * });
-     * ```
-     */
-    get docs(): Array<QueryDocumentSnapshot<AppModelType, DbModelType>>;
-    /**
-     * `true` if there are no documents in the `VectorQuerySnapshot`.
-     *
-     * @readonly
-     *
-     * @example
-     * ```
-     * let query = firestore.collection('col')
-     *   .findNearest("embedding", [0, 0], {limit: 10, distanceMeasure: "EUCLIDEAN"});
-     *
-     * query.get().then(querySnapshot => {
-     *   if (querySnapshot.empty) {
-     *     console.log('No documents found.');
-     *   }
-     * });
-     * ```
-     */
-    get empty(): boolean;
-    /**
-     * The number of documents in the `VectorQuerySnapshot`.
-     *
-     * @readonly
-     *
-     * @example
-     * ```
-     * let query = firestore.collection('col')
-     *   .findNearest("embedding", [0, 0], {limit: 10, distanceMeasure: "EUCLIDEAN"});
-     *
-     * query.get().then(querySnapshot => {
-     *   console.log(`Found ${querySnapshot.size} documents.`);
-     * });
-     * ```
-     */
-    get size(): number;
-    /**
-     * The time this `VectorQuerySnapshot` was obtained.
-     *
-     * @example
-     * ```
-     * let query = firestore.collection('col')
-     *   .findNearest("embedding", [0, 0], {limit: 10, distanceMeasure: "EUCLIDEAN"});
-     *
-     * query.get().then((querySnapshot) => {
-     *   let readTime = querySnapshot.readTime;
-     *   console.log(`Query results returned at '${readTime.toDate()}'`);
-     * });
-     * ```
-     */
-    get readTime(): Timestamp;
-    /**
-     * Returns an array of the documents changes since the last snapshot. If
-     * this is the first snapshot, all documents will be in the list as added
-     * changes.
-     *
-     * @returns An array of the documents changes since the last snapshot.
-     *
-     * @example
-     * ```
-     * let query = firestore.collection('col')
-     *   .findNearest("embedding", [0, 0], {limit: 10, distanceMeasure: "EUCLIDEAN"});
-     *
-     * query.get().then(querySnapshot => {
-     *   let changes = querySnapshot.docChanges();
-     *   for (let change of changes) {
-     *     console.log(`A document was ${change.type}.`);
-     *   }
-     * });
-     * ```
-     */
-    docChanges(): Array<DocumentChange<AppModelType, DbModelType>>;
-    /**
-     * Enumerates all of the documents in the `VectorQuerySnapshot`. This is a convenience
-     * method for running the same callback on each {@link QueryDocumentSnapshot}
-     * that is returned.
-     *
-     * @param callback - A callback to be called with a
-     * {@link QueryDocumentSnapshot} for each document in
-     * the snapshot.
-     * @param thisArg - The `this` binding for the callback..
-     *
-     * @example
-     * ```
-     * let query = firestore.collection('col')
-     *   .findNearest("embedding", [0, 0], {limit: 10, distanceMeasure: "EUCLIDEAN"});
-     *
-     * query.get().then(querySnapshot => {
-     *   querySnapshot.forEach(documentSnapshot => {
-     *     console.log(`Document found at path: ${documentSnapshot.ref.path}`);
-     *   });
-     * });
-     * ```
-     */
-    forEach(callback: (result: firestore.QueryDocumentSnapshot<AppModelType, DbModelType>) => void, thisArg?: unknown): void;
-    /**
-     * Returns true if the document data in this `VectorQuerySnapshot` is equal to the
-     * provided value.
-     *
-     * @param other - The value to compare against.
-     * @returns true if this `VectorQuerySnapshot` is equal to the provided
-     * value.
-     */
-    isEqual(other: firestore.VectorQuerySnapshot<AppModelType, DbModelType>): boolean;
-}
diff --git a/node_modules/@google-cloud/firestore/build/src/reference/vector-query-snapshot.js b/node_modules/@google-cloud/firestore/build/src/reference/vector-query-snapshot.js
old mode 100644
new mode 100755
diff --git a/node_modules/@google-cloud/firestore/build/src/reference/vector-query.d.ts b/node_modules/@google-cloud/firestore/build/src/reference/vector-query.d.ts
deleted file mode 100644
index 5330494..0000000
--- a/node_modules/@google-cloud/firestore/build/src/reference/vector-query.d.ts
+++ /dev/null
@@ -1,127 +0,0 @@
-/**
- * Copyright 2024 Google LLC. All Rights Reserved.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-import * as protos from '../../protos/firestore_v1_proto_api';
-import api = protos.google.firestore.v1;
-import * as firestore from '@google-cloud/firestore';
-import { Timestamp } from '../timestamp';
-import { QueryDocumentSnapshot } from '../document';
-import { DocumentChange } from '../document-change';
-import { QueryUtil } from './query-util';
-import { Query } from './query';
-import { VectorQueryOptions } from './vector-query-options';
-import { VectorQuerySnapshot } from './vector-query-snapshot';
-import { ExplainResults } from '../query-profile';
-import { QueryResponse } from './types';
-/**
- * A query that finds the documents whose vector fields are closest to a certain query vector.
- * Create an instance of `VectorQuery` with {@link Query.findNearest}.
- */
-export declare class VectorQuery<AppModelType = firestore.DocumentData, DbModelType extends firestore.DocumentData = firestore.DocumentData> implements firestore.VectorQuery<AppModelType, DbModelType> {
-    private readonly _query;
-    private readonly _options;
-    /**
-     * @internal
-     * @private
-     **/
-    readonly _queryUtil: QueryUtil<AppModelType, DbModelType, VectorQuery<AppModelType, DbModelType>>;
-    /**
-     * @private
-     * @internal
-     */
-    constructor(_query: Query<AppModelType, DbModelType>, _options: VectorQueryOptions);
-    /** The query whose results participants in the vector search. Filtering
-     * performed by the query will apply before the vector search.
-     **/
-    get query(): Query<AppModelType, DbModelType>;
-    /**
-     * @private
-     * @internal
-     */
-    private get _rawVectorField();
-    /**
-     * @private
-     * @internal
-     */
-    private get _rawDistanceResultField();
-    /**
-     * @private
-     * @internal
-     */
-    private get _rawQueryVector();
-    /**
-     * Plans and optionally executes this vector search query. Returns a Promise that will be
-     * resolved with the planner information, statistics from the query execution (if any),
-     * and the query results (if any).
-     *
-     * @return A Promise that will be resolved with the planner information, statistics
-     *  from the query execution (if any), and the query results (if any).
-     */
-    explain(options?: firestore.ExplainOptions): Promise<ExplainResults<VectorQuerySnapshot<AppModelType, DbModelType>>>;
-    /**
-     * Executes this vector search query.
-     *
-     * @returns A promise that will be resolved with the results of the query.
-     */
-    get(): Promise<VectorQuerySnapshot<AppModelType, DbModelType>>;
-    _getResponse(explainOptions?: firestore.ExplainOptions): Promise<QueryResponse<VectorQuerySnapshot<AppModelType, DbModelType>>>;
-    /**
-     * Internal streaming method that accepts an optional transaction ID.
-     *
-     * @param transactionId - A transaction ID.
-     * @private
-     * @internal
-     * @returns A stream of document results.
-     */
-    _stream(transactionId?: Uint8Array): NodeJS.ReadableStream;
-    /**
-     * Internal method for serializing a query to its proto
-     * representation with an optional transaction id.
-     *
-     * @private
-     * @internal
-     * @returns Serialized JSON for the query.
-     */
-    toProto(transactionOrReadTime?: Uint8Array | Timestamp | api.ITransactionOptions, explainOptions?: firestore.ExplainOptions): api.IRunQueryRequest;
-    /**
-     * Construct the resulting vector snapshot for this query with given documents.
-     *
-     * @private
-     * @internal
-     */
-    _createSnapshot(readTime: Timestamp, size: number, docs: () => Array<QueryDocumentSnapshot<AppModelType, DbModelType>>, changes: () => Array<DocumentChange<AppModelType, DbModelType>>): VectorQuerySnapshot<AppModelType, DbModelType>;
-    /**
-     * Construct a new vector query whose result will start after To support stream().
-     * This now throws an exception because cursors are not supported from the backend for vector queries yet.
-     *
-     * @private
-     * @internal
-     * @returns Serialized JSON for the query.
-     */
-    startAfter(...fieldValuesOrDocumentSnapshot: Array<unknown>): VectorQuery<AppModelType, DbModelType>;
-    /**
-     * Compares this object with the given object for equality.
-     *
-     * This object is considered "equal" to the other object if and only if
-     * `other` performs the same vector distance search as this `VectorQuery` and
-     * the underlying Query of `other` compares equal to that of this object
-     * using `Query.isEqual()`.
-     *
-     * @param other - The object to compare to this object for equality.
-     * @returns `true` if this object is "equal" to the given object, as
-     * defined above, or `false` otherwise.
-     */
-    isEqual(other: firestore.VectorQuery<AppModelType, DbModelType>): boolean;
-}
diff --git a/node_modules/@google-cloud/firestore/build/src/reference/vector-query.js b/node_modules/@google-cloud/firestore/build/src/reference/vector-query.js
old mode 100644
new mode 100755
diff --git a/node_modules/@google-cloud/firestore/build/src/serializer.d.ts b/node_modules/@google-cloud/firestore/build/src/serializer.d.ts
deleted file mode 100644
index ff48a2f..0000000
--- a/node_modules/@google-cloud/firestore/build/src/serializer.d.ts
+++ /dev/null
@@ -1,117 +0,0 @@
-/*!
- * Copyright 2019 Google Inc. All Rights Reserved.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-import { DocumentData } from '@google-cloud/firestore';
-import * as proto from '../protos/firestore_v1_proto_api';
-import { Firestore } from './index';
-import { FieldPath } from './path';
-import { ApiMapValue, ValidationOptions } from './types';
-import api = proto.google.firestore.v1;
-/**
- * An interface for Firestore types that can be serialized to Protobuf.
- *
- * @private
- * @internal
- */
-export interface Serializable {
-    toProto(): api.IValue;
-}
-/**
- * Serializer that is used to convert between JavaScript types and their
- * Firestore Protobuf representation.
- *
- * @private
- * @internal
- */
-export declare class Serializer {
-    private allowUndefined;
-    private createReference;
-    private createInteger;
-    constructor(firestore: Firestore);
-    /**
-     * Encodes a JavaScript object into the Firestore 'Fields' representation.
-     *
-     * @private
-     * @internal
-     * @param obj The object to encode.
-     * @returns The Firestore 'Fields' representation
-     */
-    encodeFields(obj: DocumentData): ApiMapValue;
-    /**
-     * Encodes a JavaScript value into the Firestore 'Value' representation.
-     *
-     * @private
-     * @internal
-     * @param val The object to encode
-     * @returns The Firestore Proto or null if we are deleting a field.
-     */
-    encodeValue(val: unknown): api.IValue | null;
-    /**
-     * @private
-     */
-    encodeVector(rawVector: number[]): api.IValue;
-    /**
-     * Decodes a single Firestore 'Value' Protobuf.
-     *
-     * @private
-     * @internal
-     * @param proto A Firestore 'Value' Protobuf.
-     * @returns The converted JS type.
-     */
-    decodeValue(proto: api.IValue): unknown;
-    /**
-     * Decodes a google.protobuf.Value
-     *
-     * @private
-     * @internal
-     * @param proto A Google Protobuf 'Value'.
-     * @returns The converted JS type.
-     */
-    decodeGoogleProtobufValue(proto: proto.google.protobuf.IValue): unknown;
-    /**
-     * Decodes a google.protobuf.ListValue
-     *
-     * @private
-     * @internal
-     * @param proto A Google Protobuf 'ListValue'.
-     * @returns The converted JS type.
-     */
-    decodeGoogleProtobufList(proto: proto.google.protobuf.IListValue | null | undefined): unknown[];
-    /**
-     * Decodes a google.protobuf.Struct
-     *
-     * @private
-     * @internal
-     * @param proto A Google Protobuf 'Struct'.
-     * @returns The converted JS type.
-     */
-    decodeGoogleProtobufStruct(proto: proto.google.protobuf.IStruct | null | undefined): Record<string, unknown>;
-}
-/**
- * Validates a JavaScript value for usage as a Firestore value.
- *
- * @private
- * @internal
- * @param arg The argument name or argument index (for varargs methods).
- * @param value JavaScript value to validate.
- * @param desc A description of the expected type.
- * @param path The field path to validate.
- * @param options Validation options
- * @param level The current depth of the traversal. This is used to decide
- * whether undefined values or deletes are allowed.
- * @param inArray Whether we are inside an array.
- * @throws when the object is invalid.
- */
-export declare function validateUserInput(arg: string | number, value: unknown, desc: string, options: ValidationOptions, path?: FieldPath, level?: number, inArray?: boolean): void;
diff --git a/node_modules/@google-cloud/firestore/build/src/serializer.js b/node_modules/@google-cloud/firestore/build/src/serializer.js
old mode 100644
new mode 100755
diff --git a/node_modules/@google-cloud/firestore/build/src/status-code.d.ts b/node_modules/@google-cloud/firestore/build/src/status-code.d.ts
deleted file mode 100644
index 059ced9..0000000
--- a/node_modules/@google-cloud/firestore/build/src/status-code.d.ts
+++ /dev/null
@@ -1,38 +0,0 @@
-/**
- * Copyright 2021 Google LLC
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-/**
- * Internal copy of GRPC status code. Copied to prevent loading of google-gax
- * at SDK startup.
- */
-export declare const enum StatusCode {
-    OK = 0,
-    CANCELLED = 1,
-    UNKNOWN = 2,
-    INVALID_ARGUMENT = 3,
-    DEADLINE_EXCEEDED = 4,
-    NOT_FOUND = 5,
-    ALREADY_EXISTS = 6,
-    PERMISSION_DENIED = 7,
-    RESOURCE_EXHAUSTED = 8,
-    FAILED_PRECONDITION = 9,
-    ABORTED = 10,
-    OUT_OF_RANGE = 11,
-    UNIMPLEMENTED = 12,
-    INTERNAL = 13,
-    UNAVAILABLE = 14,
-    DATA_LOSS = 15,
-    UNAUTHENTICATED = 16
-}
diff --git a/node_modules/@google-cloud/firestore/build/src/status-code.js b/node_modules/@google-cloud/firestore/build/src/status-code.js
old mode 100644
new mode 100755
diff --git a/node_modules/@google-cloud/firestore/build/src/telemetry/disabled-trace-util.d.ts b/node_modules/@google-cloud/firestore/build/src/telemetry/disabled-trace-util.d.ts
old mode 100644
new mode 100755
diff --git a/node_modules/@google-cloud/firestore/build/src/telemetry/disabled-trace-util.js b/node_modules/@google-cloud/firestore/build/src/telemetry/disabled-trace-util.js
old mode 100644
new mode 100755
diff --git a/node_modules/@google-cloud/firestore/build/src/telemetry/enabled-trace-util.d.ts b/node_modules/@google-cloud/firestore/build/src/telemetry/enabled-trace-util.d.ts
old mode 100644
new mode 100755
diff --git a/node_modules/@google-cloud/firestore/build/src/telemetry/enabled-trace-util.js b/node_modules/@google-cloud/firestore/build/src/telemetry/enabled-trace-util.js
old mode 100644
new mode 100755
diff --git a/node_modules/@google-cloud/firestore/build/src/telemetry/span.d.ts b/node_modules/@google-cloud/firestore/build/src/telemetry/span.d.ts
deleted file mode 100644
index 7654370..0000000
--- a/node_modules/@google-cloud/firestore/build/src/telemetry/span.d.ts
+++ /dev/null
@@ -1,28 +0,0 @@
-/**
- * Copyright 2024 Google LLC. All Rights Reserved.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-import { Span as OpenTelemetrySpan } from '@opentelemetry/api';
-import { Attributes } from './trace-util';
-/**
- * @private
- * @internal
- */
-export declare class Span {
-    private span?;
-    constructor(span?: OpenTelemetrySpan | undefined);
-    end(): void;
-    addEvent(name: string, attributes?: Attributes): this;
-    setAttributes(attributes: Attributes): this;
-}
diff --git a/node_modules/@google-cloud/firestore/build/src/telemetry/span.js b/node_modules/@google-cloud/firestore/build/src/telemetry/span.js
old mode 100644
new mode 100755
diff --git a/node_modules/@google-cloud/firestore/build/src/telemetry/trace-util.d.ts b/node_modules/@google-cloud/firestore/build/src/telemetry/trace-util.d.ts
deleted file mode 100644
index 28a469b..0000000
--- a/node_modules/@google-cloud/firestore/build/src/telemetry/trace-util.d.ts
+++ /dev/null
@@ -1,74 +0,0 @@
-/**
- * Copyright 2024 Google LLC. All Rights Reserved.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-import { Span } from './span';
-/**
- * @private
- * @internal
- */
-export interface Attributes {
-    [attributeKey: string]: AttributeValue | undefined;
-}
-/**
- * @private
- * @internal
- */
-export declare type AttributeValue = string | number | boolean | Array<string> | Array<number> | Array<boolean>;
-/**
- * Span names for instrumented operations.
- */
-export declare const SERVICE = "google.firestore.v1.Firestore/";
-export declare const SPAN_NAME_BATCH_GET_DOCUMENTS = "BatchGetDocuments";
-export declare const SPAN_NAME_RUN_QUERY = "RunQuery";
-export declare const SPAN_NAME_RUN_AGGREGATION_QUERY = "RunAggregationQuery";
-export declare const SPAN_NAME_DOC_REF_CREATE = "DocumentReference.Create";
-export declare const SPAN_NAME_DOC_REF_SET = "DocumentReference.Set";
-export declare const SPAN_NAME_DOC_REF_UPDATE = "DocumentReference.Update";
-export declare const SPAN_NAME_DOC_REF_DELETE = "DocumentReference.Delete";
-export declare const SPAN_NAME_DOC_REF_GET = "DocumentReference.Get";
-export declare const SPAN_NAME_DOC_REF_LIST_COLLECTIONS = "DocumentReference.ListCollections";
-export declare const SPAN_NAME_COL_REF_ADD = "CollectionReference.Add";
-export declare const SPAN_NAME_COL_REF_LIST_DOCUMENTS = "CollectionReference.ListDocuments";
-export declare const SPAN_NAME_QUERY_GET = "Query.Get";
-export declare const SPAN_NAME_AGGREGATION_QUERY_GET = "AggregationQuery.Get";
-export declare const SPAN_NAME_TRANSACTION_RUN = "Transaction.Run";
-export declare const SPAN_NAME_TRANSACTION_GET_QUERY = "Transaction.Get.Query";
-export declare const SPAN_NAME_TRANSACTION_GET_AGGREGATION_QUERY = "Transaction.Get.AggregationQuery";
-export declare const SPAN_NAME_TRANSACTION_GET_DOCUMENT = "Transaction.Get.Document";
-export declare const SPAN_NAME_TRANSACTION_GET_DOCUMENTS = "Transaction.Get.Documents";
-export declare const SPAN_NAME_TRANSACTION_ROLLBACK = "Transaction.Rollback";
-export declare const SPAN_NAME_TRANSACTION_COMMIT = "Transaction.Commit";
-export declare const SPAN_NAME_BATCH_COMMIT = "Batch.Commit";
-export declare const SPAN_NAME_PARTITION_QUERY = "PartitionQuery";
-export declare const SPAN_NAME_BULK_WRITER_COMMIT = "BulkWriter.Commit";
-export declare const ATTRIBUTE_SERVICE_PREFIX = "gcp.firestore";
-export declare const ATTRIBUTE_SETTINGS_PREFIX = "gcp.firestore.settings";
-export declare const ATTRIBUTE_KEY_DOC_COUNT = "doc_count";
-export declare const ATTRIBUTE_KEY_IS_TRANSACTIONAL = "transactional";
-export declare const ATTRIBUTE_KEY_NUM_RESPONSES = "response_count";
-export declare const ATTRIBUTE_KEY_IS_RETRY_WITH_CURSOR = "retry_query_with_cursor";
-export declare const ATTRIBUTE_KEY_TRANSACTION_TYPE = "transaction_type";
-export declare const ATTRIBUTE_KEY_ATTEMPTS_ALLOWED = "attempts_allowed";
-export declare const ATTRIBUTE_KEY_ATTEMPTS_REMAINING = "attempts_remaining";
-/**
- * @private
- * @internal
- */
-export interface TraceUtil {
-    startActiveSpan<F extends (span: Span) => unknown>(name: string, fn: F, attributes?: Attributes): ReturnType<F>;
-    startSpan(name: string): Span;
-    currentSpan(): Span;
-    recordProjectId(projectId: string): void;
-}
diff --git a/node_modules/@google-cloud/firestore/build/src/telemetry/trace-util.js b/node_modules/@google-cloud/firestore/build/src/telemetry/trace-util.js
old mode 100644
new mode 100755
diff --git a/node_modules/@google-cloud/firestore/build/src/timestamp.d.ts b/node_modules/@google-cloud/firestore/build/src/timestamp.d.ts
deleted file mode 100644
index 99c8510..0000000
--- a/node_modules/@google-cloud/firestore/build/src/timestamp.d.ts
+++ /dev/null
@@ -1,206 +0,0 @@
-/*!
- * Copyright 2018 Google Inc. All Rights Reserved.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-import * as firestore from '@google-cloud/firestore';
-import { google } from '../protos/firestore_v1_proto_api';
-import api = google.firestore.v1;
-/**
- * A Timestamp represents a point in time independent of any time zone or
- * calendar, represented as seconds and fractions of seconds at nanosecond
- * resolution in UTC Epoch time. It is encoded using the Proleptic Gregorian
- * Calendar which extends the Gregorian calendar backwards to year one. It is
- * encoded assuming all minutes are 60 seconds long, i.e. leap seconds are
- * "smeared" so that no leap second table is needed for interpretation. Range is
- * from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59.999999999Z.
- *
- * @see https://github.com/google/protobuf/blob/master/src/google/protobuf/timestamp.proto
- */
-export declare class Timestamp implements firestore.Timestamp {
-    private readonly _seconds;
-    private readonly _nanoseconds;
-    /**
-     * Creates a new timestamp with the current date, with millisecond precision.
-     *
-     * @example
-     * ```
-     * let documentRef = firestore.doc('col/doc');
-     *
-     * documentRef.set({ updateTime:Firestore.Timestamp.now() });
-     *
-     * ```
-     * @return {Timestamp} A new `Timestamp` representing the current date.
-     */
-    static now(): Timestamp;
-    /**
-     * Creates a new timestamp from the given date.
-     *
-     * @example
-     * ```
-     * let documentRef = firestore.doc('col/doc');
-     *
-     * let date = Date.parse('01 Jan 2000 00:00:00 GMT');
-     * documentRef.set({ startTime:Firestore.Timestamp.fromDate(date) });
-     *
-     * ```
-     * @param {Date} date The date to initialize the `Timestamp` from.
-     * @return {Timestamp} A new `Timestamp` representing the same point in time
-     * as the given date.
-     */
-    static fromDate(date: Date): Timestamp;
-    /**
-     * Creates a new timestamp from the given number of milliseconds.
-     *
-     * @example
-     * ```
-     * let documentRef = firestore.doc('col/doc');
-     *
-     * documentRef.set({ startTime:Firestore.Timestamp.fromMillis(42) });
-     *
-     * ```
-     * @param {number} milliseconds Number of milliseconds since Unix epoch
-     * 1970-01-01T00:00:00Z.
-     * @return {Timestamp}  A new `Timestamp` representing the same point in time
-     * as the given number of milliseconds.
-     */
-    static fromMillis(milliseconds: number): Timestamp;
-    /**
-     * Generates a `Timestamp` object from a Timestamp proto.
-     *
-     * @private
-     * @internal
-     * @param {Object} timestamp The `Timestamp` Protobuf object.
-     */
-    static fromProto(timestamp: google.protobuf.ITimestamp): Timestamp;
-    /**
-     * Creates a new timestamp.
-     *
-     * @example
-     * ```
-     * let documentRef = firestore.doc('col/doc');
-     *
-     * documentRef.set({ startTime:new Firestore.Timestamp(42, 0) });
-     *
-     * ```
-     * @param {number} seconds The number of seconds of UTC time since Unix epoch
-     * 1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to
-     * 9999-12-31T23:59:59Z inclusive.
-     * @param {number} nanoseconds The non-negative fractions of a second at
-     * nanosecond resolution. Negative second values with fractions must still
-     * have non-negative nanoseconds values that count forward in time. Must be
-     * from 0 to 999,999,999 inclusive.
-     */
-    constructor(seconds: number, nanoseconds: number);
-    /**
-     * The number of seconds of UTC time since Unix epoch 1970-01-01T00:00:00Z.
-     *
-     * @example
-     * ```
-     * let documentRef = firestore.doc('col/doc');
-     *
-     * documentRef.get().then(snap => {
-     *   let updated = snap.updateTime;
-     *   console.log(`Updated at ${updated.seconds}s ${updated.nanoseconds}ns`);
-     * });
-     *
-     * ```
-     * @type {number}
-     */
-    get seconds(): number;
-    /**
-     * The non-negative fractions of a second at nanosecond resolution.
-     *
-     * @example
-     * ```
-     * let documentRef = firestore.doc('col/doc');
-     *
-     * documentRef.get().then(snap => {
-     *   let updated = snap.updateTime;
-     *   console.log(`Updated at ${updated.seconds}s ${updated.nanoseconds}ns`);
-     * });
-     *
-     * ```
-     * @type {number}
-     */
-    get nanoseconds(): number;
-    /**
-     * Returns a new `Date` corresponding to this timestamp. This may lose
-     * precision.
-     *
-     * @example
-     * ```
-     * let documentRef = firestore.doc('col/doc');
-     *
-     * documentRef.get().then(snap => {
-     *   console.log(`Document updated at: ${snap.updateTime.toDate()}`);
-     * });
-     *
-     * ```
-     * @return {Date} JavaScript `Date` object representing the same point in time
-     * as this `Timestamp`, with millisecond precision.
-     */
-    toDate(): Date;
-    /**
-     * Returns the number of milliseconds since Unix epoch 1970-01-01T00:00:00Z.
-     *
-     * @example
-     * ```
-     * let documentRef = firestore.doc('col/doc');
-     *
-     * documentRef.get().then(snap => {
-     *   let startTime = snap.get('startTime');
-     *   let endTime = snap.get('endTime');
-     *   console.log(`Duration: ${endTime - startTime}`);
-     * });
-     *
-     * ```
-     * @return {number} The point in time corresponding to this timestamp,
-     * represented as the number of milliseconds since Unix epoch
-     * 1970-01-01T00:00:00Z.
-     */
-    toMillis(): number;
-    /**
-     * Returns 'true' if this `Timestamp` is equal to the provided one.
-     *
-     * @example
-     * ```
-     * let documentRef = firestore.doc('col/doc');
-     *
-     * documentRef.get().then(snap => {
-     *   if (snap.createTime.isEqual(snap.updateTime)) {
-     *     console.log('Document is in its initial state.');
-     *   }
-     * });
-     *
-     * ```
-     * @param {any} other The `Timestamp` to compare against.
-     * @return {boolean} 'true' if this `Timestamp` is equal to the provided one.
-     */
-    isEqual(other: firestore.Timestamp): boolean;
-    /**
-     * Generates the Protobuf `Timestamp` object for this timestamp.
-     *
-     * @private
-     * @internal
-     * @returns {Object} The `Timestamp` Protobuf object.
-     */
-    toProto(): api.IValue;
-    /**
-     * Converts this object to a primitive `string`, which allows `Timestamp` objects to be compared
-     * using the `>`, `<=`, `>=` and `>` operators.
-     *
-     * @return {string} a string encoding of this object.
-     */
-    valueOf(): string;
-}
diff --git a/node_modules/@google-cloud/firestore/build/src/timestamp.js b/node_modules/@google-cloud/firestore/build/src/timestamp.js
old mode 100644
new mode 100755
diff --git a/node_modules/@google-cloud/firestore/build/src/transaction.d.ts b/node_modules/@google-cloud/firestore/build/src/transaction.d.ts
deleted file mode 100644
index 6661adf..0000000
--- a/node_modules/@google-cloud/firestore/build/src/transaction.d.ts
+++ /dev/null
@@ -1,262 +0,0 @@
-/*!
- * Copyright 2017 Google Inc. All Rights Reserved.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-import * as firestore from '@google-cloud/firestore';
-import { DocumentSnapshot } from './document';
-import { Firestore } from './index';
-import { FieldPath } from './path';
-import { AggregateQuerySnapshot } from './reference/aggregate-query-snapshot';
-import { DocumentReference } from './reference/document-reference';
-import { QuerySnapshot } from './reference/query-snapshot';
-/**
- * A reference to a transaction.
- *
- * The Transaction object passed to a transaction's updateFunction provides
- * the methods to read and write data within the transaction context. See
- * [runTransaction()]{@link Firestore#runTransaction}.
- *
- * @class Transaction
- */
-export declare class Transaction implements firestore.Transaction {
-    private readonly _firestore;
-    private readonly _maxAttempts;
-    private readonly _requestTag;
-    /** Optional, could be set only if transaction is read only */
-    private readonly _readOnlyReadTime;
-    /** `undefined` if transaction is read only */
-    private readonly _writeBatch;
-    /** `undefined` if transaction is read only */
-    private readonly _backoff;
-    /**
-     * Promise that resolves to the transaction ID of the current attempt.
-     * It is lazily initialised upon the first read. Upon retry, it is reset and
-     * `_prevTransactionId` is set
-     */
-    private _transactionIdPromise?;
-    private _prevTransactionId?;
-    /**
-     * @private
-     *
-     * @param firestore The Firestore Database client.
-     * @param requestTag A unique client-assigned identifier for the scope of
-     * this transaction.
-     * @param transactionOptions The user-defined options for this transaction.
-     */
-    constructor(firestore: Firestore, requestTag: string, transactionOptions?: firestore.ReadWriteTransactionOptions | firestore.ReadOnlyTransactionOptions);
-    /**
-     * Retrieves a query result. Holds a pessimistic lock on all returned
-     * documents.
-     *
-     * @param {Query} query A query to execute.
-     * @return {Promise<QuerySnapshot>} A QuerySnapshot for the retrieved data.
-     */
-    get<AppModelType, DbModelType extends firestore.DocumentData>(query: firestore.Query<AppModelType, DbModelType>): Promise<QuerySnapshot<AppModelType, DbModelType>>;
-    /**
-     * Reads the document referenced by the provided `DocumentReference.`
-     * Holds a pessimistic lock on the returned document.
-     *
-     * @param {DocumentReference} documentRef A reference to the document to be read.
-     * @return {Promise<DocumentSnapshot>}  A DocumentSnapshot for the read data.
-     */
-    get<AppModelType, DbModelType extends firestore.DocumentData>(documentRef: firestore.DocumentReference<AppModelType, DbModelType>): Promise<DocumentSnapshot<AppModelType, DbModelType>>;
-    /**
-     * Retrieves an aggregate query result. Holds a pessimistic lock on all
-     * documents that were matched by the underlying query.
-     *
-     * @param aggregateQuery An aggregate query to execute.
-     * @return An AggregateQuerySnapshot for the retrieved data.
-     */
-    get<AppModelType, DbModelType extends firestore.DocumentData, AggregateSpecType extends firestore.AggregateSpec>(aggregateQuery: firestore.AggregateQuery<AggregateSpecType, AppModelType, DbModelType>): Promise<AggregateQuerySnapshot<AggregateSpecType, AppModelType, DbModelType>>;
-    /**
-     * Retrieves multiple documents from Firestore. Holds a pessimistic lock on
-     * all returned documents.
-     *
-     * The first argument is required and must be of type `DocumentReference`
-     * followed by any additional `DocumentReference` documents. If used, the
-     * optional `ReadOptions` must be the last argument.
-     *
-     * @param {...DocumentReference|ReadOptions} documentRefsOrReadOptions The
-     * `DocumentReferences` to receive, followed by an optional field mask.
-     * @returns {Promise<Array.<DocumentSnapshot>>} A Promise that
-     * contains an array with the resulting document snapshots.
-     *
-     * @example
-     * ```
-     * let firstDoc = firestore.doc('col/doc1');
-     * let secondDoc = firestore.doc('col/doc2');
-     * let resultDoc = firestore.doc('col/doc3');
-     *
-     * firestore.runTransaction(transaction => {
-     *   return transaction.getAll(firstDoc, secondDoc).then(docs => {
-     *     transaction.set(resultDoc, {
-     *       sum: docs[0].get('count') + docs[1].get('count')
-     *     });
-     *   });
-     * });
-     * ```
-     */
-    getAll<AppModelType, DbModelType extends firestore.DocumentData>(...documentRefsOrReadOptions: Array<firestore.DocumentReference<AppModelType, DbModelType> | firestore.ReadOptions>): Promise<Array<DocumentSnapshot<AppModelType, DbModelType>>>;
-    /**
-     * Create the document referred to by the provided
-     * [DocumentReference]{@link DocumentReference}. The operation will
-     * fail the transaction if a document exists at the specified location.
-     *
-     * @param {DocumentReference} documentRef A reference to the document to be
-     * created.
-     * @param {DocumentData} data The object data to serialize as the document.
-     * @returns {Transaction} This Transaction instance. Used for
-     * chaining method calls.
-     *
-     * @example
-     * ```
-     * firestore.runTransaction(transaction => {
-     *   let documentRef = firestore.doc('col/doc');
-     *   return transaction.get(documentRef).then(doc => {
-     *     if (!doc.exists) {
-     *       transaction.create(documentRef, { foo: 'bar' });
-     *     }
-     *   });
-     * });
-     * ```
-     */
-    create<AppModelType, DbModelType extends firestore.DocumentData>(documentRef: firestore.DocumentReference<AppModelType, DbModelType>, data: firestore.WithFieldValue<AppModelType>): Transaction;
-    set<AppModelType, DbModelType extends firestore.DocumentData>(documentRef: firestore.DocumentReference<AppModelType, DbModelType>, data: firestore.PartialWithFieldValue<AppModelType>, options: firestore.SetOptions): Transaction;
-    set<AppModelType, DbModelType extends firestore.DocumentData>(documentRef: firestore.DocumentReference<AppModelType, DbModelType>, data: firestore.WithFieldValue<AppModelType>): Transaction;
-    /**
-     * Updates fields in the document referred to by the provided
-     * [DocumentReference]{@link DocumentReference}. The update will
-     * fail if applied to a document that does not exist.
-     *
-     * The update() method accepts either an object with field paths encoded as
-     * keys and field values encoded as values, or a variable number of arguments
-     * that alternate between field paths and field values. Nested fields can be
-     * updated by providing dot-separated field path strings or by providing
-     * FieldPath objects.
-     *
-     * A Precondition restricting this update can be specified as the last
-     * argument.
-     *
-     * @param {DocumentReference} documentRef A reference to the document to be
-     * updated.
-     * @param {UpdateData|string|FieldPath} dataOrField An object
-     * containing the fields and values with which to update the document
-     * or the path of the first field to update.
-     * @param {
-     * ...(Precondition|*|string|FieldPath)} preconditionOrValues -
-     * An alternating list of field paths and values to update or a Precondition
-     * to to enforce on this update.
-     * @throws {Error} If the provided input is not valid Firestore data.
-     * @returns {Transaction} This Transaction instance. Used for
-     * chaining method calls.
-     *
-     * @example
-     * ```
-     * firestore.runTransaction(transaction => {
-     *   let documentRef = firestore.doc('col/doc');
-     *   return transaction.get(documentRef).then(doc => {
-     *     if (doc.exists) {
-     *       transaction.update(documentRef, { count: doc.get('count') + 1 });
-     *     } else {
-     *       transaction.create(documentRef, { count: 1 });
-     *     }
-     *   });
-     * });
-     * ```
-     */
-    update<AppModelType, DbModelType extends firestore.DocumentData>(documentRef: firestore.DocumentReference<AppModelType, DbModelType>, dataOrField: firestore.UpdateData<DbModelType> | string | firestore.FieldPath, ...preconditionOrValues: Array<firestore.Precondition | unknown | string | firestore.FieldPath>): Transaction;
-    /**
-     * Deletes the document referred to by the provided [DocumentReference]
-     * {@link DocumentReference}.
-     *
-     * @param {DocumentReference} documentRef A reference to the document to be
-     * deleted.
-     * @param {Precondition=} precondition A precondition to enforce for this
-     * delete.
-     * @param {Timestamp=} precondition.lastUpdateTime If set, enforces that the
-     * document was last updated at lastUpdateTime. Fails the transaction if the
-     * document doesn't exist or was last updated at a different time.
-     * @param {boolean=} precondition.exists If set, enforces that the target
-     * document must or must not exist.
-     * @returns {Transaction} This Transaction instance. Used for
-     * chaining method calls.
-     *
-     * @example
-     * ```
-     * firestore.runTransaction(transaction => {
-     *   let documentRef = firestore.doc('col/doc');
-     *   transaction.delete(documentRef);
-     *   return Promise.resolve();
-     * });
-     * ```
-     */
-    delete(documentRef: DocumentReference<any, any>, precondition?: firestore.Precondition): this;
-    /**
-     * Commits all queued-up changes in this transaction and releases all locks.
-     *
-     * @private
-     * @internal
-     */
-    commit(): Promise<void>;
-    /**
-     * Releases all locks and rolls back this transaction. The rollback process
-     * is completed asynchronously and this function resolves before the operation
-     * is completed.
-     *
-     * @private
-     * @internal
-     */
-    rollback(): Promise<void>;
-    /**
-     * Executes `updateFunction()` and commits the transaction with retry.
-     *
-     * @private
-     * @internal
-     * @param updateFunction The user function to execute within the transaction
-     * context.
-     */
-    runTransaction<T>(updateFunction: (transaction: Transaction) => Promise<T>): Promise<T>;
-    /**
-     * Make single attempt to execute `updateFunction()` and commit the
-     * transaction. Will rollback upon error.
-     *
-     * @private
-     * @internal
-     * @param updateFunction The user function to execute within the transaction
-     * context.
-     */
-    runTransactionOnce<T>(updateFunction: (transaction: Transaction) => Promise<T>): Promise<T>;
-    /**
-     * Given a function that performs a read operation, ensures that the first one
-     * is provided with new transaction options and all subsequent ones are queued
-     * upon the resulting transaction ID.
-     */
-    private withLazyStartedTransaction;
-    private getSingleFn;
-    private getBatchFn;
-    private getQueryFn;
-}
-/**
- * Parses the arguments for the `getAll()` call supported by both the Firestore
- * and Transaction class.
- *
- * @private
- * @internal
- * @param documentRefsOrReadOptions An array of document references followed by
- * an optional ReadOptions object.
- */
-export declare function parseGetAllArguments<AppModelType, DbModelType extends firestore.DocumentData>(documentRefsOrReadOptions: Array<firestore.DocumentReference<AppModelType, DbModelType> | firestore.ReadOptions>): {
-    documents: Array<DocumentReference<AppModelType, DbModelType>>;
-    fieldMask: FieldPath[] | undefined;
-};
diff --git a/node_modules/@google-cloud/firestore/build/src/transaction.js b/node_modules/@google-cloud/firestore/build/src/transaction.js
old mode 100644
new mode 100755
diff --git a/node_modules/@google-cloud/firestore/build/src/types.d.ts b/node_modules/@google-cloud/firestore/build/src/types.d.ts
deleted file mode 100644
index 7c837b3..0000000
--- a/node_modules/@google-cloud/firestore/build/src/types.d.ts
+++ /dev/null
@@ -1,89 +0,0 @@
-/*!
- * Copyright 2018 Google Inc. All Rights Reserved.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-import { FirestoreDataConverter, DocumentData } from '@google-cloud/firestore';
-import { CallOptions } from 'google-gax';
-import { Duplex } from 'stream';
-import { google } from '../protos/firestore_v1_proto_api';
-import { FieldPath } from './path';
-import api = google.firestore.v1;
-/**
- * A map in the format of the Proto API
- */
-export interface ApiMapValue {
-    [k: string]: google.firestore.v1.IValue;
-}
-/**
- * The subset of methods we use from FirestoreClient.
- *
- * We don't depend on the actual Gapic client to avoid loading the GAX stack at
- * module initialization time.
- */
-export interface GapicClient {
-    getProjectId(): Promise<string>;
-    beginTransaction(request: api.IBeginTransactionRequest, options?: CallOptions): Promise<[api.IBeginTransactionResponse, unknown, unknown]>;
-    commit(request: api.ICommitRequest, options?: CallOptions): Promise<[api.ICommitResponse, unknown, unknown]>;
-    batchWrite(request: api.IBatchWriteRequest, options?: CallOptions): Promise<[api.IBatchWriteResponse, unknown, unknown]>;
-    rollback(request: api.IRollbackRequest, options?: CallOptions): Promise<[google.protobuf.IEmpty, unknown, unknown]>;
-    batchGetDocuments(request?: api.IBatchGetDocumentsRequest, options?: CallOptions): Duplex;
-    runQuery(request?: api.IRunQueryRequest, options?: CallOptions): Duplex;
-    runAggregationQuery(request?: api.IRunAggregationQueryRequest, options?: CallOptions): Duplex;
-    listDocuments(request: api.IListDocumentsRequest, options?: CallOptions): Promise<[api.IDocument[], unknown, unknown]>;
-    listCollectionIds(request: api.IListCollectionIdsRequest, options?: CallOptions): Promise<[string[], unknown, unknown]>;
-    listen(options?: CallOptions): Duplex;
-    partitionQueryStream(request?: api.IPartitionQueryRequest, options?: CallOptions): Duplex;
-    close(): Promise<void>;
-}
-/** Request/response methods used in the Firestore SDK. */
-export type FirestoreUnaryMethod = 'listDocuments' | 'listCollectionIds' | 'rollback' | 'beginTransaction' | 'commit' | 'batchWrite';
-/** Streaming methods used in the Firestore SDK. */
-export type FirestoreStreamingMethod = 'listen' | 'partitionQueryStream' | 'runQuery' | 'runAggregationQuery' | 'batchGetDocuments';
-/** Type signature for the unary methods in the GAPIC layer. */
-export type UnaryMethod<Req, Resp> = (request: Req, callOptions: CallOptions) => Promise<[Resp, unknown, unknown]>;
-export type RBTree = any;
-/**
- * A default converter to use when none is provided.
- * @private
- * @internal
- */
-export declare function defaultConverter<AppModelType, DbModelType extends DocumentData>(): FirestoreDataConverter<AppModelType, DbModelType>;
-/**
- * Update data that has been resolved to a mapping of FieldPaths to values.
- */
-export type UpdateMap = Map<FieldPath, unknown>;
-/**
- * Internal user data validation options.
- * @private
- * @internal
- */
-export interface ValidationOptions {
-    /** At what level field deletes are supported. */
-    allowDeletes: 'none' | 'root' | 'all';
-    /** Whether server transforms are supported. */
-    allowTransforms: boolean;
-    /**
-     * Whether undefined values are allowed. Undefined values cannot appear at
-     * the root.
-     */
-    allowUndefined: boolean;
-}
-/**
- * A Firestore Proto value in ProtoJs format.
- * @private
- * @internal
- */
-export interface ProtobufJsValue extends api.IValue {
-    valueType?: string;
-}
diff --git a/node_modules/@google-cloud/firestore/build/src/types.js b/node_modules/@google-cloud/firestore/build/src/types.js
old mode 100644
new mode 100755
diff --git a/node_modules/@google-cloud/firestore/build/src/util.d.ts b/node_modules/@google-cloud/firestore/build/src/util.d.ts
deleted file mode 100644
index 021104b..0000000
--- a/node_modules/@google-cloud/firestore/build/src/util.d.ts
+++ /dev/null
@@ -1,178 +0,0 @@
-/*!
- * Copyright 2018 Google Inc. All Rights Reserved.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-import { DocumentData } from '@google-cloud/firestore';
-import type { GoogleError } from 'google-gax';
-import type { BackoffSettings } from 'google-gax/build/src/gax';
-import Dict = NodeJS.Dict;
-/**
- * A Promise implementation that supports deferred resolution.
- * @private
- * @internal
- */
-export declare class Deferred<R> {
-    promise: Promise<R>;
-    resolve: (value: R | Promise<R>) => void;
-    reject: (reason: Error) => void;
-    constructor();
-}
-/**
- * Generate a unique client-side identifier.
- *
- * Used for the creation of new documents.
- *
- * @private
- * @internal
- * @returns {string} A unique 20-character wide identifier.
- */
-export declare function autoId(): string;
-/**
- * Generate a short and semi-random client-side identifier.
- *
- * Used for the creation of request tags.
- *
- * @private
- * @internal
- * @returns {string} A random 5-character wide identifier.
- */
-export declare function requestTag(): string;
-/**
- * Determines whether `value` is a JavaScript object.
- *
- * @private
- * @internal
- */
-export declare function isObject(value: unknown): value is {
-    [k: string]: unknown;
-};
-/**
- * Verifies that 'obj' is a plain JavaScript object that can be encoded as a
- * 'Map' in Firestore.
- *
- * @private
- * @internal
- * @param input The argument to verify.
- * @returns 'true' if the input can be a treated as a plain object.
- */
-export declare function isPlainObject(input: unknown): input is DocumentData;
-/**
- * Returns whether `value` has no custom properties.
- *
- * @private
- * @internal
- */
-export declare function isEmpty(value: {}): boolean;
-/**
- * Determines whether `value` is a JavaScript function.
- *
- * @private
- * @internal
- */
-export declare function isFunction(value: unknown): boolean;
-/**
- * Determines whether the provided error is considered permanent for the given
- * RPC.
- *
- * @private
- * @internal
- */
-export declare function isPermanentRpcError(err: GoogleError, methodName: string): boolean;
-/**
- * Returns the list of retryable error codes specified in the service
- * configuration.
- * @private
- * @internal
- */
-export declare function getRetryCodes(methodName: string): number[];
-/**
- * Gets the total timeout in milliseconds from the retry settings in
- * the service config for the given RPC. If the total timeout is not
- * set, then `0` is returned.
- *
- * @private
- * @internal
- */
-export declare function getTotalTimeout(methodName: string): number;
-/**
- * Returns the backoff setting from the service configuration.
- * @private
- * @internal
- */
-export declare function getRetryParams(methodName: string): BackoffSettings;
-/**
- * Returns a promise with a void return type. The returned promise swallows all
- * errors and never throws.
- *
- * This is primarily used to wait for a promise to complete when the result of
- * the promise will be discarded.
- *
- * @private
- * @internal
- */
-export declare function silencePromise(promise: Promise<unknown>): Promise<void>;
-/**
- * Wraps the provided error in a new error that includes the provided stack.
- *
- * Used to preserve stack traces across async calls.
- * @private
- * @internal
- */
-export declare function wrapError(err: Error, stack: string): Error;
-/**
- * Parses the value of the environment variable FIRESTORE_PREFER_REST, and
- * returns a value indicating if the environment variable enables or disables
- * preferRest.
- *
- * This function will warn to the console if the environment variable is set
- * to an unsupported value.
- *
- * @return `true` if the environment variable enables `preferRest`,
- * `false` if the environment variable disables `preferRest`, or `undefined`
- * if the environment variable is not set or is set to an unsupported value.
- *
- * @internal
- * @private
- */
-export declare function tryGetPreferRestEnvironmentVariable(): boolean | undefined;
-/**
- * Returns an array of values that are calculated by performing the given `fn`
- * on all keys in the given `obj` dictionary.
- *
- * @private
- * @internal
- */
-export declare function mapToArray<V, R>(obj: Dict<V>, fn: (element: V, key: string, obj: Dict<V>) => R): R[];
-/**
- * Verifies equality for an array of objects using the `isEqual` interface.
- *
- * @private
- * @internal
- * @param left Array of objects supporting `isEqual`.
- * @param right Array of objects supporting `isEqual`.
- * @return True if arrays are equal.
- */
-export declare function isArrayEqual<T extends {
-    isEqual: (t: T) => boolean;
-}>(left: T[], right: T[]): boolean;
-/**
- * Verifies equality for an array of primitives.
- *
- * @private
- * @internal
- * @param left Array of primitives.
- * @param right Array of primitives.
- * @return True if arrays are equal.
- */
-export declare function isPrimitiveArrayEqual<T extends number | string>(left: T[], right: T[]): boolean;
diff --git a/node_modules/@google-cloud/firestore/build/src/util.js b/node_modules/@google-cloud/firestore/build/src/util.js
old mode 100644
new mode 100755
diff --git a/node_modules/@google-cloud/firestore/build/src/v1/firestore_admin_client.d.ts b/node_modules/@google-cloud/firestore/build/src/v1/firestore_admin_client.d.ts
old mode 100644
new mode 100755
diff --git a/node_modules/@google-cloud/firestore/build/src/v1/firestore_admin_client.js b/node_modules/@google-cloud/firestore/build/src/v1/firestore_admin_client.js
old mode 100644
new mode 100755
diff --git a/node_modules/@google-cloud/firestore/build/src/v1/firestore_admin_client_config.json b/node_modules/@google-cloud/firestore/build/src/v1/firestore_admin_client_config.json
old mode 100644
new mode 100755
diff --git a/node_modules/@google-cloud/firestore/build/src/v1/firestore_admin_proto_list.json b/node_modules/@google-cloud/firestore/build/src/v1/firestore_admin_proto_list.json
old mode 100644
new mode 100755
diff --git a/node_modules/@google-cloud/firestore/build/src/v1/firestore_client.d.ts b/node_modules/@google-cloud/firestore/build/src/v1/firestore_client.d.ts
old mode 100644
new mode 100755
diff --git a/node_modules/@google-cloud/firestore/build/src/v1/firestore_client.js b/node_modules/@google-cloud/firestore/build/src/v1/firestore_client.js
old mode 100644
new mode 100755
diff --git a/node_modules/@google-cloud/firestore/build/src/v1/firestore_client_config.json b/node_modules/@google-cloud/firestore/build/src/v1/firestore_client_config.json
old mode 100644
new mode 100755
diff --git a/node_modules/@google-cloud/firestore/build/src/v1/firestore_proto_list.json b/node_modules/@google-cloud/firestore/build/src/v1/firestore_proto_list.json
old mode 100644
new mode 100755
diff --git a/node_modules/@google-cloud/firestore/build/src/v1/gapic_metadata.json b/node_modules/@google-cloud/firestore/build/src/v1/gapic_metadata.json
old mode 100644
new mode 100755
diff --git a/node_modules/@google-cloud/firestore/build/src/v1/index.d.ts b/node_modules/@google-cloud/firestore/build/src/v1/index.d.ts
deleted file mode 100644
index 5b127e7..0000000
--- a/node_modules/@google-cloud/firestore/build/src/v1/index.d.ts
+++ /dev/null
@@ -1,3 +0,0 @@
-import { FirestoreAdminClient } from './firestore_admin_client';
-import { FirestoreClient } from './firestore_client';
-export { FirestoreClient, FirestoreAdminClient };
diff --git a/node_modules/@google-cloud/firestore/build/src/v1/index.js b/node_modules/@google-cloud/firestore/build/src/v1/index.js
old mode 100644
new mode 100755
diff --git a/node_modules/@google-cloud/firestore/build/src/v1beta1/firestore_client.d.ts b/node_modules/@google-cloud/firestore/build/src/v1beta1/firestore_client.d.ts
old mode 100644
new mode 100755
diff --git a/node_modules/@google-cloud/firestore/build/src/v1beta1/firestore_client.js b/node_modules/@google-cloud/firestore/build/src/v1beta1/firestore_client.js
old mode 100644
new mode 100755
diff --git a/node_modules/@google-cloud/firestore/build/src/v1beta1/firestore_client_config.json b/node_modules/@google-cloud/firestore/build/src/v1beta1/firestore_client_config.json
old mode 100644
new mode 100755
diff --git a/node_modules/@google-cloud/firestore/build/src/v1beta1/firestore_proto_list.json b/node_modules/@google-cloud/firestore/build/src/v1beta1/firestore_proto_list.json
old mode 100644
new mode 100755
diff --git a/node_modules/@google-cloud/firestore/build/src/v1beta1/gapic_metadata.json b/node_modules/@google-cloud/firestore/build/src/v1beta1/gapic_metadata.json
old mode 100644
new mode 100755
diff --git a/node_modules/@google-cloud/firestore/build/src/v1beta1/index.d.ts b/node_modules/@google-cloud/firestore/build/src/v1beta1/index.d.ts
deleted file mode 100644
index aea3d26..0000000
--- a/node_modules/@google-cloud/firestore/build/src/v1beta1/index.d.ts
+++ /dev/null
@@ -1,2 +0,0 @@
-import { FirestoreClient } from './firestore_client';
-export { FirestoreClient };
diff --git a/node_modules/@google-cloud/firestore/build/src/v1beta1/index.js b/node_modules/@google-cloud/firestore/build/src/v1beta1/index.js
old mode 100644
new mode 100755
diff --git a/node_modules/@google-cloud/firestore/build/src/validate.d.ts b/node_modules/@google-cloud/firestore/build/src/validate.d.ts
deleted file mode 100644
index c4ae32c..0000000
--- a/node_modules/@google-cloud/firestore/build/src/validate.d.ts
+++ /dev/null
@@ -1,178 +0,0 @@
-/*!
- * Copyright 2017 Google Inc. All Rights Reserved.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-import { FieldPath } from './path';
-/**
- * Options to allow argument omission.
- *
- * @private
- * @internal
- */
-export interface RequiredArgumentOptions {
-    optional?: boolean;
-}
-/**
- * Options to limit the range of numbers.
- *
- * @private
- * @internal
- */
-export interface NumericRangeOptions {
-    minValue?: number;
-    maxValue?: number;
-}
-/**
- * Generates an error message to use with custom objects that cannot be
- * serialized.
- *
- * @private
- * @internal
- * @param arg The argument name or argument index (for varargs methods).
- * @param value The value that failed serialization.
- * @param path The field path that the object is assigned to.
- */
-export declare function customObjectMessage(arg: string | number, value: unknown, path?: FieldPath): string;
-/**
- * Validates that 'value' is a function.
- *
- * @private
- * @internal
- * @param arg The argument name or argument index (for varargs methods).
- * @param value The input to validate.
- * @param options Options that specify whether the function can be omitted.
- */
-export declare function validateFunction(arg: string | number, value: unknown, options?: RequiredArgumentOptions): void;
-/**
- * Validates that 'value' is an object.
- *
- * @private
- * @internal
- * @param arg The argument name or argument index (for varargs methods).
- * @param value The input to validate.
- * @param options Options that specify whether the object can be omitted.
- */
-export declare function validateObject(arg: string | number, value: unknown, options?: RequiredArgumentOptions): void;
-/**
- * Validates that 'value' is a string.
- *
- * @private
- * @internal
- * @param arg The argument name or argument index (for varargs methods).
- * @param value The input to validate.
- * @param options Options that specify whether the string can be omitted.
- */
-export declare function validateString(arg: string | number, value: unknown, options?: RequiredArgumentOptions): void;
-/**
- * Validates that 'value' is a host.
- *
- * @private
- * @internal
- * @param arg The argument name or argument index (for varargs methods).
- * @param value The input to validate.
- * @param options Options that specify whether the host can be omitted.
- */
-export declare function validateHost(arg: string | number, value: unknown, options?: RequiredArgumentOptions): void;
-/**
- * Validates that 'value' is a boolean.
- *
- * @private
- * @internal
- * @param arg The argument name or argument index (for varargs methods).
- * @param value The input to validate.
- * @param options Options that specify whether the boolean can be omitted.
- */
-export declare function validateBoolean(arg: string | number, value: unknown, options?: RequiredArgumentOptions): void;
-/**
- * Validates that 'value' is a number.
- *
- * @private
- * @internal
- * @param arg The argument name or argument index (for varargs methods).
- * @param value The input to validate.
- * @param options Options that specify whether the number can be omitted.
- */
-export declare function validateNumber(arg: string | number, value: unknown, options?: RequiredArgumentOptions & NumericRangeOptions): void;
-/**
- * Validates that 'value' is a integer.
- *
- * @private
- * @internal
- * @param arg The argument name or argument index (for varargs methods).
- * @param value The input to validate.
- * @param options Options that specify whether the integer can be omitted.
- */
-export declare function validateInteger(arg: string | number, value: unknown, options?: RequiredArgumentOptions & NumericRangeOptions): void;
-/**
- * Validates that 'value' is a Timestamp.
- *
- * @private
- * @internal
- * @param arg The argument name or argument index (for varargs methods).
- * @param value The input to validate.
- * @param options Options that specify whether the Timestamp can be omitted.
- */
-export declare function validateTimestamp(arg: string | number, value: unknown, options?: RequiredArgumentOptions): void;
-/**
- * Generates an error message to use with invalid arguments.
- *
- * @private
- * @internal
- * @param arg The argument name or argument index (for varargs methods).
- * @param expectedType The expected input type.
- */
-export declare function invalidArgumentMessage(arg: string | number, expectedType: string): string;
-/**
- * Enforces the 'options.optional' constraint for 'value'.
- *
- * @private
- * @internal
- * @param value The input to validate.
- * @param options Whether the function can be omitted.
- * @return Whether the object is omitted and is allowed to be omitted.
- */
-export declare function validateOptional(value: unknown, options?: RequiredArgumentOptions): boolean;
-/**
- * Verifies that 'args' has at least 'minSize' elements.
- *
- * @private
- * @internal
- * @param funcName The function name to use in the error message.
- * @param args The array (or array-like structure) to verify.
- * @param minSize The minimum number of elements to enforce.
- * @throws if the expectation is not met.
- */
-export declare function validateMinNumberOfArguments(funcName: string, args: IArguments | unknown[], minSize: number): void;
-/**
- * Verifies that 'args' has at most 'maxSize' elements.
- *
- * @private
- * @internal
- * @param funcName The function name to use in the error message.
- * @param args The array (or array-like structure) to verify.
- * @param maxSize The maximum number of elements to enforce.
- * @throws if the expectation is not met.
- */
-export declare function validateMaxNumberOfArguments(funcName: string, args: IArguments, maxSize: number): void;
-/**
- * Validates that the provided named option equals one of the expected values.
- *
- * @param arg The argument name or argument index (for varargs methods).).
- * @param value The input to validate.
- * @param allowedValues A list of expected values.
- * @param options Whether the input can be omitted.
- * @private
- * @internal
- */
-export declare function validateEnumValue(arg: string | number, value: unknown, allowedValues: string[], options?: RequiredArgumentOptions): void;
diff --git a/node_modules/@google-cloud/firestore/build/src/validate.js b/node_modules/@google-cloud/firestore/build/src/validate.js
old mode 100644
new mode 100755
diff --git a/node_modules/@google-cloud/firestore/build/src/watch.d.ts b/node_modules/@google-cloud/firestore/build/src/watch.d.ts
deleted file mode 100644
index cb4276e..0000000
--- a/node_modules/@google-cloud/firestore/build/src/watch.d.ts
+++ /dev/null
@@ -1,310 +0,0 @@
-/*!
- * Copyright 2017 Google Inc. All Rights Reserved.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-import * as firestore from '@google-cloud/firestore';
-import { google } from '../protos/firestore_v1_proto_api';
-import { QueryDocumentSnapshot } from './document';
-import { DocumentChange } from './document-change';
-import { DocumentReference, Firestore, Query } from './index';
-import { Timestamp } from './timestamp';
-import api = google.firestore.v1;
-/*!
- * Idle timeout used to detect Watch streams that stall (see
- * https://github.com/googleapis/nodejs-firestore/issues/1057, b/156308554).
- * Under normal load, the Watch backend will send a TARGET_CHANGE message
- * roughly every 30 seconds. As discussed with the backend team, we reset the
- * Watch stream if we do not receive any message within 120 seconds.
- */
-export declare const WATCH_IDLE_TIMEOUT_MS: number;
-/**
- * @private
- * @internal
- * @callback docsCallback
- * @returns {Array.<QueryDocumentSnapshot>} An ordered list of documents.
- */
-/**
- * @private
- * @internal
- * @callback changeCallback
- * @returns {Array.<DocumentChange>} An ordered list of document
- * changes.
- */
-/**
- * onSnapshot() callback that receives the updated query state.
- *
- * @private
- * @internal
- * @callback watchSnapshotCallback
- *
- * @param {Timestamp} readTime The time at which this snapshot was obtained.
- * @param {number} size The number of documents in the result set.
- * @param {docsCallback} docs A callback that returns the ordered list of
- * documents stored in this snapshot.
- * @param {changeCallback} changes A callback that returns the list of
- * changed documents since the last snapshot delivered for this watch.
- */
-type DocumentComparator<AppModelType, DbModelType extends firestore.DocumentData> = (l: QueryDocumentSnapshot<AppModelType, DbModelType>, r: QueryDocumentSnapshot<AppModelType, DbModelType>) => number;
-/**
- * Watch provides listen functionality and exposes the 'onSnapshot' observer. It
- * can be used with a valid Firestore Listen target.
- *
- * @class
- * @private
- * @internal
- */
-declare abstract class Watch<AppModelType = firestore.DocumentData, DbModelType extends firestore.DocumentData = firestore.DocumentData> {
-    readonly _converter: firestore.FirestoreDataConverter<AppModelType, DbModelType>;
-    protected readonly firestore: Firestore;
-    private readonly backoff;
-    private readonly requestTag;
-    /**
-     * Indicates whether we are interested in data from the stream. Set to false in the
-     * 'unsubscribe()' callback.
-     * @private
-     * @internal
-     */
-    private isActive;
-    /**
-     * The current stream to the backend.
-     * @private
-     * @internal
-     */
-    private currentStream;
-    /**
-     * The server assigns and updates the resume token.
-     * @private
-     * @internal
-     */
-    private resumeToken;
-    /**
-     * A map of document names to QueryDocumentSnapshots for the last sent snapshot.
-     * @private
-     * @internal
-     */
-    private docMap;
-    /**
-     * The accumulated map of document changes (keyed by document name) for the
-     * current snapshot.
-     * @private
-     * @internal
-     */
-    private changeMap;
-    /**
-     * The current state of the query results. *
-     * @private
-     * @internal
-     */
-    private current;
-    /**
-     * The sorted tree of QueryDocumentSnapshots as sent in the last snapshot.
-     * We only look at the keys.
-     * @private
-     * @internal
-     */
-    private docTree;
-    /**
-     * We need this to track whether we've pushed an initial set of changes,
-     * since we should push those even when there are no changes, if there
-     * aren't docs.
-     * @private
-     * @internal
-     */
-    private hasPushed;
-    /**
-     * The handler used to restart the Watch stream if it has been idle for more
-     * than WATCH_IDLE_TIMEOUT_MS.
-     */
-    private idleTimeoutHandle?;
-    private onNext;
-    private onError;
-    /**
-     * @private
-     * @internal
-     *
-     * @param firestore The Firestore Database client.
-     */
-    constructor(firestore: Firestore, _converter?: firestore.FirestoreDataConverter<AppModelType, DbModelType>);
-    /**  Returns a 'Target' proto denoting the target to listen on. */
-    protected abstract getTarget(resumeToken?: Uint8Array): api.ITarget;
-    /**
-     * Returns a comparator for QueryDocumentSnapshots that is used to order the
-     * document snapshots returned by this watch.
-     */
-    protected abstract getComparator(): DocumentComparator<AppModelType, DbModelType>;
-    /**
-     * Starts a watch and attaches a listener for document change events.
-     *
-     * @private
-     * @internal
-     * @param onNext A callback to be called every time a new snapshot is
-     * available.
-     * @param onError A callback to be called if the listen fails or is cancelled.
-     * No further callbacks will occur.
-     *
-     * @returns An unsubscribe function that can be called to cancel the snapshot
-     * listener.
-     */
-    onSnapshot(onNext: (readTime: Timestamp, size: number, docs: () => Array<QueryDocumentSnapshot<AppModelType, DbModelType>>, changes: () => Array<DocumentChange<AppModelType, DbModelType>>) => void, onError: (error: Error) => void): () => void;
-    /**
-     * Returns the current count of all documents, including the changes from
-     * the current changeMap.
-     * @private
-     * @internal
-     */
-    private currentSize;
-    /**
-     * Splits up document changes into removals, additions, and updates.
-     * @private
-     * @internal
-     */
-    private extractCurrentChanges;
-    /**
-     * Helper to clear the docs on RESET or filter mismatch.
-     * @private
-     * @internal
-     */
-    private resetDocs;
-    /**
-     * Closes the stream and calls onError() if the stream is still active.
-     * @private
-     * @internal
-     */
-    private closeStream;
-    /**
-     * Re-opens the stream unless the specified error is considered permanent.
-     * Clears the change map.
-     * @private
-     * @internal
-     */
-    private maybeReopenStream;
-    /**
-     * Cancels the current idle timeout and reschedules a new timer.
-     *
-     * @private
-     * @internal
-     */
-    private resetIdleTimeout;
-    /**
-     * Helper to restart the outgoing stream to the backend.
-     * @private
-     * @internal
-     */
-    private resetStream;
-    /**
-     * Initializes a new stream to the backend with backoff.
-     * @private
-     * @internal
-     */
-    private initStream;
-    /**
-     * Handles 'data' events and closes the stream if the response type is
-     * invalid.
-     * @private
-     * @internal
-     */
-    private onData;
-    /**
-     * Checks if the current target id is included in the list of target ids.
-     * If no targetIds are provided, returns true.
-     * @private
-     * @internal
-     */
-    private affectsTarget;
-    /**
-     * Assembles a new snapshot from the current set of changes and invokes the
-     * user's callback. Clears the current changes on completion.
-     * @private
-     * @internal
-     */
-    private pushSnapshot;
-    /**
-     * Applies a document delete to the document tree and the document map.
-     * Returns the corresponding DocumentChange event.
-     * @private
-     * @internal
-     */
-    private deleteDoc;
-    /**
-     * Applies a document add to the document tree and the document map. Returns
-     * the corresponding DocumentChange event.
-     * @private
-     * @internal
-     */
-    private addDoc;
-    /**
-     * Applies a document modification to the document tree and the document map.
-     * Returns the DocumentChange event for successful modifications.
-     * @private
-     * @internal
-     */
-    private modifyDoc;
-    /**
-     * Applies the mutations in changeMap to both the document tree and the
-     * document lookup map. Modified docMap in-place and returns the updated
-     * state.
-     * @private
-     * @internal
-     */
-    private computeSnapshot;
-    /**
-     * Determines whether a watch error is considered permanent and should not be
-     * retried. Errors that don't provide a GRPC error code are always considered
-     * transient in this context.
-     *
-     * @private
-     * @internal
-     * @param error An error object.
-     * @return Whether the error is permanent.
-     */
-    private isPermanentWatchError;
-    /**
-     * Determines whether we need to initiate a longer backoff due to system
-     * overload.
-     *
-     * @private
-     * @internal
-     * @param error A GRPC Error object that exposes an error code.
-     * @return Whether we need to back off our retries.
-     */
-    private isResourceExhaustedError;
-    /** Closes the stream and clears all timeouts. */
-    private shutdown;
-}
-/**
- * Creates a new Watch instance to listen on DocumentReferences.
- *
- * @private
- * @internal
- */
-export declare class DocumentWatch<AppModelType = firestore.DocumentData, DbModelType extends firestore.DocumentData = firestore.DocumentData> extends Watch<AppModelType, DbModelType> {
-    private readonly ref;
-    constructor(firestore: Firestore, ref: DocumentReference<AppModelType, DbModelType>);
-    getComparator(): DocumentComparator<AppModelType, DbModelType>;
-    getTarget(resumeToken?: Uint8Array): google.firestore.v1.ITarget;
-}
-/**
- * Creates a new Watch instance to listen on Queries.
- *
- * @private
- * @internal
- */
-export declare class QueryWatch<AppModelType = firestore.DocumentData, DbModelType extends firestore.DocumentData = firestore.DocumentData> extends Watch<AppModelType, DbModelType> {
-    private readonly query;
-    private comparator;
-    constructor(firestore: Firestore, query: Query<AppModelType, DbModelType>, converter?: firestore.FirestoreDataConverter<AppModelType, DbModelType>);
-    getComparator(): DocumentComparator<AppModelType, DbModelType>;
-    getTarget(resumeToken?: Uint8Array): google.firestore.v1.ITarget;
-}
-export {};
diff --git a/node_modules/@google-cloud/firestore/build/src/watch.js b/node_modules/@google-cloud/firestore/build/src/watch.js
old mode 100644
new mode 100755
diff --git a/node_modules/@google-cloud/firestore/build/src/write-batch.d.ts b/node_modules/@google-cloud/firestore/build/src/write-batch.d.ts
deleted file mode 100644
index c8fdda3..0000000
--- a/node_modules/@google-cloud/firestore/build/src/write-batch.d.ts
+++ /dev/null
@@ -1,287 +0,0 @@
-/*!
- * Copyright 2019 Google Inc. All Rights Reserved.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-import * as firestore from '@google-cloud/firestore';
-import { google } from '../protos/firestore_v1_proto_api';
-import { Firestore } from './index';
-import { FieldPath } from './path';
-import { Timestamp } from './timestamp';
-import { FirestoreUnaryMethod } from './types';
-import { RequiredArgumentOptions } from './validate';
-import api = google.firestore.v1;
-/**
- * A WriteResult wraps the write time set by the Firestore servers on sets(),
- * updates(), and creates().
- *
- * @class WriteResult
- */
-export declare class WriteResult implements firestore.WriteResult {
-    private readonly _writeTime;
-    /**
-     * @private
-     *
-     * @param _writeTime The time of the corresponding document write.
-     */
-    constructor(_writeTime: Timestamp);
-    /**
-     * The write time as set by the Firestore servers.
-     *
-     * @type {Timestamp}
-     * @name WriteResult#writeTime
-     * @readonly
-     *
-     * @example
-     * ```
-     * let documentRef = firestore.doc('col/doc');
-     *
-     * documentRef.set({foo: 'bar'}).then(writeResult => {
-     *   console.log(`Document written at: ${writeResult.writeTime.toDate()}`);
-     * });
-     * ```
-     */
-    get writeTime(): Timestamp;
-    /**
-     * Returns true if this `WriteResult` is equal to the provided value.
-     *
-     * @param {*} other The value to compare against.
-     * @return true if this `WriteResult` is equal to the provided value.
-     */
-    isEqual(other: firestore.WriteResult): boolean;
-}
-/**
- * A lazily-evaluated write that allows us to detect the Project ID before
- * serializing the request.
- * @private
- * @internal
- */
-export type PendingWriteOp = () => api.IWrite;
-/**
- * A Firestore WriteBatch that can be used to atomically commit multiple write
- * operations at once.
- *
- * @class WriteBatch
- */
-export declare class WriteBatch implements firestore.WriteBatch {
-    protected readonly _firestore: Firestore;
-    private readonly _serializer;
-    private readonly _allowUndefined;
-    /**
-     * An array of document paths and the corresponding write operations that are
-     * executed as part of the commit. The resulting `api.IWrite` will be sent to
-     * the backend.
-     *
-     * @private
-     * @internal
-     */
-    private readonly _ops;
-    private _committed;
-    /**
-     * The number of writes in this batch.
-     * @private
-     * @internal
-     */
-    get _opCount(): number;
-    /** @private */
-    constructor(firestore: Firestore);
-    /**
-     * Checks if this write batch has any pending operations.
-     *
-     * @private
-     * @internal
-     */
-    get isEmpty(): boolean;
-    /**
-     * Throws an error if this batch has already been committed.
-     *
-     * @private
-     * @internal
-     */
-    private verifyNotCommitted;
-    /**
-     * Create a document with the provided object values. This will fail the batch
-     * if a document exists at its location.
-     *
-     * @param {DocumentReference} documentRef A reference to the document to be
-     * created.
-     * @param {T} data The object to serialize as the document.
-     * @throws {Error} If the provided input is not a valid Firestore document.
-     * @returns {WriteBatch} This WriteBatch instance. Used for chaining
-     * method calls.
-     *
-     * @example
-     * ```
-     * let writeBatch = firestore.batch();
-     * let documentRef = firestore.collection('col').doc();
-     *
-     * writeBatch.create(documentRef, {foo: 'bar'});
-     *
-     * writeBatch.commit().then(() => {
-     *   console.log('Successfully executed batch.');
-     * });
-     * ```
-     */
-    create<AppModelType, DbModelType extends firestore.DocumentData>(documentRef: firestore.DocumentReference<AppModelType, DbModelType>, data: firestore.WithFieldValue<AppModelType>): WriteBatch;
-    /**
-     * Deletes a document from the database.
-     *
-     * @param {DocumentReference} documentRef A reference to the document to be
-     * deleted.
-     * @param {Precondition=} precondition A precondition to enforce for this
-     * delete.
-     * @param {Timestamp=} precondition.lastUpdateTime If set, enforces that the
-     * document was last updated at lastUpdateTime. Fails the batch if the
-     * document doesn't exist or was last updated at a different time.
-     * @param {boolean= } precondition.exists If set to true, enforces that the target
-     * document must or must not exist.
-     * @returns {WriteBatch} This WriteBatch instance. Used for chaining
-     * method calls.
-     *
-     * @example
-     * ```
-     * let writeBatch = firestore.batch();
-     * let documentRef = firestore.doc('col/doc');
-     *
-     * writeBatch.delete(documentRef);
-     *
-     * writeBatch.commit().then(() => {
-     *   console.log('Successfully executed batch.');
-     * });
-     * ```
-     */
-    delete(documentRef: firestore.DocumentReference<any, any>, precondition?: firestore.Precondition): WriteBatch;
-    set<AppModelType, DbModelType extends firestore.DocumentData>(documentRef: firestore.DocumentReference<AppModelType, DbModelType>, data: firestore.PartialWithFieldValue<AppModelType>, options: firestore.SetOptions): WriteBatch;
-    set<AppModelType, DbModelType extends firestore.DocumentData>(documentRef: firestore.DocumentReference<AppModelType, DbModelType>, data: firestore.WithFieldValue<AppModelType>): WriteBatch;
-    /**
-     * Update fields of the document referred to by the provided
-     * [DocumentReference]{@link DocumentReference}. If the document
-     * doesn't yet exist, the update fails and the entire batch will be rejected.
-     *
-     * The update() method accepts either an object with field paths encoded as
-     * keys and field values encoded as values, or a variable number of arguments
-     * that alternate between field paths and field values. Nested fields can be
-     * updated by providing dot-separated field path strings or by providing
-     * FieldPath objects.
-     *
-     * A Precondition restricting this update can be specified as the last
-     * argument.
-     *
-     * @param {DocumentReference} documentRef A reference to the document to be
-     * updated.
-     * @param {UpdateData|string|FieldPath} dataOrField An object
-     * containing the fields and values with which to update the document
-     * or the path of the first field to update.
-     * @param {
-     * ...(Precondition|*|string|FieldPath)} preconditionOrValues -
-     * An alternating list of field paths and values to update or a Precondition
-     * to restrict this update.
-     * @throws {Error} If the provided input is not valid Firestore data.
-     * @returns {WriteBatch} This WriteBatch instance. Used for chaining
-     * method calls.
-     *
-     * @example
-     * ```
-     * let writeBatch = firestore.batch();
-     * let documentRef = firestore.doc('col/doc');
-     *
-     * writeBatch.update(documentRef, {foo: 'bar'});
-     *
-     * writeBatch.commit().then(() => {
-     *   console.log('Successfully executed batch.');
-     * });
-     * ```
-     */
-    update<AppModelType = firestore.DocumentData, DbModelType extends firestore.DocumentData = firestore.DocumentData>(documentRef: firestore.DocumentReference<AppModelType, DbModelType>, dataOrField: firestore.UpdateData<DbModelType> | string | firestore.FieldPath, ...preconditionOrValues: Array<{
-        lastUpdateTime?: firestore.Timestamp;
-    } | unknown | string | firestore.FieldPath>): WriteBatch;
-    /**
-     * Atomically commits all pending operations to the database and verifies all
-     * preconditions. Fails the entire write if any precondition is not met.
-     *
-     * @returns {Promise.<Array.<WriteResult>>} A Promise that resolves
-     * when this batch completes.
-     *
-     * @example
-     * ```
-     * let writeBatch = firestore.batch();
-     * let documentRef = firestore.doc('col/doc');
-     *
-     * writeBatch.set(documentRef, {foo: 'bar'});
-     *
-     * writeBatch.commit().then(() => {
-     *   console.log('Successfully executed batch.');
-     * });
-     * ```
-     */
-    commit(): Promise<WriteResult[]>;
-    /**
-     * Commit method that takes an optional transaction ID.
-     *
-     * @private
-     * @internal
-     * @param commitOptions Options to use for this commit.
-     * @param commitOptions.transactionId The transaction ID of this commit.
-     * @param commitOptions.requestTag A unique client-assigned identifier for
-     * this request.
-     * @returns  A Promise that resolves when this batch completes.
-     */
-    _commit<Req extends api.ICommitRequest, Resp>(commitOptions?: {
-        transactionId?: Uint8Array;
-        requestTag?: string;
-        retryCodes?: number[];
-        methodName?: FirestoreUnaryMethod;
-    }): Promise<Resp>;
-    /**
-     * Resets the WriteBatch and dequeues all pending operations.
-     * @private
-     * @internal
-     */
-    _reset(): void;
-}
-/**
- * Validates the use of 'value' as SetOptions and enforces that 'merge' is a
- * boolean.
- *
- * @private
- * @internal
- * @param arg The argument name or argument index (for varargs methods).
- * @param value The object to validate.
- * @param options Optional validation options specifying whether the value can
- * be omitted.
- * @throws if the input is not a valid SetOptions object.
- */
-export declare function validateSetOptions(arg: string | number, value: unknown, options?: RequiredArgumentOptions): void;
-/**
- * Validates a JavaScript object for usage as a Firestore document.
- *
- * @private
- * @internal
- * @param arg The argument name or argument index (for varargs methods).
- * @param obj JavaScript object to validate.
- * @param allowDeletes Whether to allow FieldValue.delete() sentinels.
- * @param allowUndefined Whether to allow nested properties that are `undefined`.
- * @throws when the object is invalid.
- */
-export declare function validateDocumentData(arg: string | number, obj: unknown, allowDeletes: boolean, allowUndefined: boolean): void;
-/**
- * Validates that a value can be used as field value during an update.
- *
- * @private
- * @internal
- * @param arg The argument name or argument index (for varargs methods).
- * @param val The value to verify.
- * @param allowUndefined Whether to allow nested properties that are `undefined`.
- * @param path The path to show in the error message.
- */
-export declare function validateFieldValue(arg: string | number, val: unknown, allowUndefined: boolean, path?: FieldPath): void;
diff --git a/node_modules/@google-cloud/firestore/build/src/write-batch.js b/node_modules/@google-cloud/firestore/build/src/write-batch.js
old mode 100644
new mode 100755
diff --git a/node_modules/@google-cloud/firestore/types/firestore.d.ts b/node_modules/@google-cloud/firestore/types/firestore.d.ts
old mode 100644
new mode 100755
index cfff47c..0b7909b
--- a/node_modules/@google-cloud/firestore/types/firestore.d.ts
+++ b/node_modules/@google-cloud/firestore/types/firestore.d.ts
@@ -1569,7 +1569,7 @@ declare namespace FirebaseFirestore {
      */
     withConverter<
       NewAppModelType,
-      NewDbModelType extends DocumentData = DocumentData,
+      NewDbModelType extends DocumentData = DocumentData
     >(
       converter: FirestoreDataConverter<NewAppModelType, NewDbModelType>
     ): DocumentReference<NewAppModelType, NewDbModelType>;
@@ -1578,1725 +1578,4 @@ declare namespace FirebaseFirestore {
 
   /**
    * A `DocumentSnapshot` contains data read from a document in your Firestore
-   * database. The data can be extracted with `.data()` or `.get(<field>)` to
-   * get a specific field.
-   *
-   * For a `DocumentSnapshot` that points to a non-existing document, any data
-   * access will return 'undefined'. You can use the `exists` property to
-   * explicitly verify a document's existence.
-   */
-  export class DocumentSnapshot<
-    AppModelType = DocumentData,
-    DbModelType extends DocumentData = DocumentData,
-  > {
-    protected constructor();
-
-    /** True if the document exists. */
-    readonly exists: boolean;
-
-    /** A `DocumentReference` to the document location. */
-    readonly ref: DocumentReference<AppModelType, DbModelType>;
-
-    /**
-     * The ID of the document for which this `DocumentSnapshot` contains data.
-     */
-    readonly id: string;
-
-    /**
-     * The time the document was created. Not set for documents that don't
-     * exist.
-     */
-    readonly createTime?: Timestamp;
-
-    /**
-     * The time the document was last updated (at the time the snapshot was
-     * generated). Not set for documents that don't exist.
-     */
-    readonly updateTime?: Timestamp;
-
-    /**
-     * The time this snapshot was read.
-     */
-    readonly readTime: Timestamp;
-
-    /**
-     * Retrieves all fields in the document as an Object. Returns 'undefined' if
-     * the document doesn't exist.
-     *
-     * @return An Object containing all fields in the document.
-     */
-    data(): AppModelType | undefined;
-
-    /**
-     * Retrieves the field specified by `fieldPath`.
-     *
-     * @param fieldPath The path (e.g. 'foo' or 'foo.bar') to a specific field.
-     * @return The data at the specified field location or undefined if no such
-     * field exists in the document.
-     */
-    get(fieldPath: string | FieldPath): any;
-
-    /**
-     * Returns true if the document's data and path in this `DocumentSnapshot`
-     * is equal to the provided one.
-     *
-     * @param other The `DocumentSnapshot` to compare against.
-     * @return true if this `DocumentSnapshot` is equal to the provided one.
-     */
-    isEqual(other: DocumentSnapshot<AppModelType, DbModelType>): boolean;
-  }
-
-  /**
-   * A `QueryDocumentSnapshot` contains data read from a document in your
-   * Firestore database as part of a query. The document is guaranteed to exist
-   * and its data can be extracted with `.data()` or `.get(<field>)` to get a
-   * specific field.
-   *
-   * A `QueryDocumentSnapshot` offers the same API surface as a
-   * `DocumentSnapshot`. Since query results contain only existing documents, the
-   * `exists` property will always be true and `data()` will never return
-   * 'undefined'.
-   */
-  export class QueryDocumentSnapshot<
-    AppModelType = DocumentData,
-    DbModelType extends DocumentData = DocumentData,
-  > extends DocumentSnapshot<AppModelType, DbModelType> {
-    private constructor();
-
-    /**
-     * The time the document was created.
-     */
-    readonly createTime: Timestamp;
-
-    /**
-     * The time the document was last updated (at the time the snapshot was
-     * generated).
-     */
-    readonly updateTime: Timestamp;
-
-    /**
-     * Retrieves all fields in the document as an Object.
-     *
-     * @override
-     * @return An Object containing all fields in the document.
-     */
-    data(): AppModelType;
-  }
-
-  /**
-   * The direction of a `Query.orderBy()` clause is specified as 'desc' or 'asc'
-   * (descending or ascending).
-   */
-  export type OrderByDirection = 'desc' | 'asc';
-
-  /**
-   * Filter conditions in a `Query.where()` clause are specified using the
-   * strings '<', '<=', '==', '!=', '>=', '>', 'array-contains', 'in', 'not-in',
-   * and 'array-contains-any'.
-   */
-  export type WhereFilterOp =
-    | '<'
-    | '<='
-    | '=='
-    | '!='
-    | '>='
-    | '>'
-    | 'array-contains'
-    | 'in'
-    | 'not-in'
-    | 'array-contains-any';
-
-  /**
-   * A `Query` refers to a Query which you can read or listen to. You can also
-   * construct refined `Query` objects by adding filters and ordering.
-   */
-  export class Query<
-    AppModelType = DocumentData,
-    DbModelType extends DocumentData = DocumentData,
-  > {
-    protected constructor();
-
-    /**
-     * The `Firestore` for the Firestore database (useful for performing
-     * transactions, etc.).
-     */
-    readonly firestore: Firestore;
-
-    /**
-     * Creates and returns a new Query with the additional filter that documents
-     * must contain the specified field and that its value should satisfy the
-     * relation constraint provided.
-     *
-     * This function returns a new (immutable) instance of the Query (rather
-     * than modify the existing instance) to impose the filter.
-     *
-     * @param fieldPath The path to compare
-     * @param opStr The operation string (e.g "<", "<=", "==", ">", ">=").
-     * @param value The value for comparison
-     * @return The created Query.
-     */
-    where(
-      fieldPath: string | FieldPath,
-      opStr: WhereFilterOp,
-      value: any
-    ): Query<AppModelType, DbModelType>;
-
-    /**
-     * Creates and returns a new [Query]{@link Query} with the additional filter
-     * that documents should satisfy the relation constraint provided. Documents
-     * must contain the field specified in the filter.
-     *
-     * This function returns a new (immutable) instance of the Query (rather than
-     * modify the existing instance) to impose the filter.
-     *
-     * @param {Filter} filter A filter to apply to the Query.
-     * @returns {Query} The created Query.
-     */
-    where(filter: Filter): Query<AppModelType, DbModelType>;
-
-    /**
-     * Creates and returns a new Query that's additionally sorted by the
-     * specified field, optionally in descending order instead of ascending.
-     *
-     * This function returns a new (immutable) instance of the Query (rather
-     * than modify the existing instance) to impose the order.
-     *
-     * @param fieldPath The field to sort by.
-     * @param directionStr Optional direction to sort by ('asc' or 'desc'). If
-     * not specified, order will be ascending.
-     * @return The created Query.
-     */
-    orderBy(
-      fieldPath: string | FieldPath,
-      directionStr?: OrderByDirection
-    ): Query<AppModelType, DbModelType>;
-
-    /**
-     * Creates and returns a new Query that only returns the first matching
-     * documents.
-     *
-     * This function returns a new (immutable) instance of the Query (rather
-     * than modify the existing instance) to impose the limit.
-     *
-     * @param limit The maximum number of items to return.
-     * @return The created Query.
-     */
-    limit(limit: number): Query<AppModelType, DbModelType>;
-
-    /**
-     * Creates and returns a new Query that only returns the last matching
-     * documents.
-     *
-     * You must specify at least one orderBy clause for limitToLast queries,
-     * otherwise an exception will be thrown during execution.
-     *
-     * Results for limitToLast queries cannot be streamed via the `stream()`
-     * API.
-     *
-     * @param limit The maximum number of items to return.
-     * @return The created Query.
-     */
-    limitToLast(limit: number): Query<AppModelType, DbModelType>;
-
-    /**
-     * Specifies the offset of the returned results.
-     *
-     * This function returns a new (immutable) instance of the Query (rather
-     * than modify the existing instance) to impose the offset.
-     *
-     * @param offset The offset to apply to the Query results.
-     * @return The created Query.
-     */
-    offset(offset: number): Query<AppModelType, DbModelType>;
-
-    /**
-     * Creates and returns a new Query instance that applies a field mask to
-     * the result and returns only the specified subset of fields. You can
-     * specify a list of field paths to return, or use an empty list to only
-     * return the references of matching documents.
-     *
-     * Queries that contain field masks cannot be listened to via `onSnapshot()`
-     * listeners.
-     *
-     * This function returns a new (immutable) instance of the Query (rather
-     * than modify the existing instance) to impose the field mask.
-     *
-     * @param field The field paths to return.
-     * @return The created Query.
-     */
-    select(...field: (string | FieldPath)[]): Query;
-
-    /**
-     * Creates and returns a new Query that starts at the provided document
-     * (inclusive). The starting position is relative to the order of the query.
-     * The document must contain all of the fields provided in the orderBy of
-     * this query.
-     *
-     * @param snapshot The snapshot of the document to start after.
-     * @return The created Query.
-     */
-    startAt(
-      snapshot: DocumentSnapshot<any, any>
-    ): Query<AppModelType, DbModelType>;
-
-    /**
-     * Creates and returns a new Query that starts at the provided fields
-     * relative to the order of the query. The order of the field values
-     * must match the order of the order by clauses of the query.
-     *
-     * @param fieldValues The field values to start this query at, in order
-     * of the query's order by.
-     * @return The created Query.
-     */
-    startAt(...fieldValues: any[]): Query<AppModelType, DbModelType>;
-
-    /**
-     * Creates and returns a new Query that starts after the provided document
-     * (exclusive). The starting position is relative to the order of the query.
-     * The document must contain all of the fields provided in the orderBy of
-     * this query.
-     *
-     * @param snapshot The snapshot of the document to start after.
-     * @return The created Query.
-     */
-    startAfter(
-      snapshot: DocumentSnapshot<any, any>
-    ): Query<AppModelType, DbModelType>;
-
-    /**
-     * Creates and returns a new Query that starts after the provided fields
-     * relative to the order of the query. The order of the field values
-     * must match the order of the order by clauses of the query.
-     *
-     * @param fieldValues The field values to start this query after, in order
-     * of the query's order by.
-     * @return The created Query.
-     */
-    startAfter(...fieldValues: any[]): Query<AppModelType, DbModelType>;
-
-    /**
-     * Creates and returns a new Query that ends before the provided document
-     * (exclusive). The end position is relative to the order of the query. The
-     * document must contain all of the fields provided in the orderBy of this
-     * query.
-     *
-     * @param snapshot The snapshot of the document to end before.
-     * @return The created Query.
-     */
-    endBefore(
-      snapshot: DocumentSnapshot<any, any>
-    ): Query<AppModelType, DbModelType>;
-
-    /**
-     * Creates and returns a new Query that ends before the provided fields
-     * relative to the order of the query. The order of the field values
-     * must match the order of the order by clauses of the query.
-     *
-     * @param fieldValues The field values to end this query before, in order
-     * of the query's order by.
-     * @return The created Query.
-     */
-    endBefore(...fieldValues: any[]): Query<AppModelType, DbModelType>;
-
-    /**
-     * Creates and returns a new Query that ends at the provided document
-     * (inclusive). The end position is relative to the order of the query. The
-     * document must contain all of the fields provided in the orderBy of this
-     * query.
-     *
-     * @param snapshot The snapshot of the document to end at.
-     * @return The created Query.
-     */
-    endAt(
-      snapshot: DocumentSnapshot<any, any>
-    ): Query<AppModelType, DbModelType>;
-
-    /**
-     * Creates and returns a new Query that ends at the provided fields
-     * relative to the order of the query. The order of the field values
-     * must match the order of the order by clauses of the query.
-     *
-     * @param fieldValues The field values to end this query at, in order
-     * of the query's order by.
-     * @return The created Query.
-     */
-    endAt(...fieldValues: any[]): Query<AppModelType, DbModelType>;
-
-    /**
-     * Executes the query and returns the results as a `QuerySnapshot`.
-     *
-     * @return A Promise that will be resolved with the results of the Query.
-     */
-    get(): Promise<QuerySnapshot<AppModelType, DbModelType>>;
-
-    /**
-     * Plans and optionally executes this query. Returns a Promise that will be
-     * resolved with the planner information, statistics from the query execution (if any),
-     * and the query results (if any).
-     *
-     * @return A Promise that will be resolved with the planner information, statistics
-     *  from the query execution (if any), and the query results (if any).
-     */
-    explain(
-      options?: ExplainOptions
-    ): Promise<ExplainResults<QuerySnapshot<AppModelType, DbModelType>>>;
-
-    /**
-     * Executes the query and returns the results as Node Stream.
-     *
-     * @return A stream of QueryDocumentSnapshot.
-     */
-    stream(): NodeJS.ReadableStream;
-
-    /**
-     * Plans and optionally executes this query, and streams the results as Node Stream
-     * of `{document?: DocumentSnapshot, metrics?: ExplainMetrics}` objects.
-     *
-     * The stream surfaces documents one at a time as they are received from the
-     * server, and at the end, it will surface the metrics associated with
-     * executing the query (if any).
-     *
-     * @example
-     * ```
-     * let query = firestore.collection('col').where('foo', '==', 'bar');
-     * let count = 0;
-     *
-     * query.explainStream({analyze: true}).on('data', (data) => {
-     *   if (data.document) {
-     *     // Use data.document which is a DocumentSnapshot instance.
-     *     console.log(`Found document with name '${data.document.id}'`);
-     *     ++count;
-     *   }
-     *   if (data.metrics) {
-     *     // Use data.metrics which is an ExplainMetrics instance.
-     *   }
-     * }).on('end', () => {
-     *   console.log(`Received ${count} documents.`);
-     * });
-     * ```
-     *
-     * @return A stream of `{document?: DocumentSnapshot, metrics?: ExplainMetrics}`
-     * objects.
-     */
-    explainStream(options?: ExplainOptions): NodeJS.ReadableStream;
-
-    /**
-     * Attaches a listener for `QuerySnapshot `events.
-     *
-     * @param onNext A callback to be called every time a new `QuerySnapshot`
-     * is available.
-     * @param onError A callback to be called if the listen fails or is
-     * cancelled. No further callbacks will occur.
-     * @return An unsubscribe function that can be called to cancel
-     * the snapshot listener.
-     */
-    onSnapshot(
-      onNext: (snapshot: QuerySnapshot<AppModelType, DbModelType>) => void,
-      onError?: (error: Error) => void
-    ): () => void;
-
-    /**
-     * Returns a query that counts the documents in the result set of this
-     * query.
-     *
-     * The returned query, when executed, counts the documents in the result set
-     * of this query without actually downloading the documents.
-     *
-     * Using the returned query to count the documents is efficient because only
-     * the final count, not the documents' data, is downloaded. The returned
-     * query can count the documents in cases where the result set is
-     * prohibitively large to download entirely (thousands of documents).
-     *
-     * @return a query that counts the documents in the result set of this
-     * query. The count can be retrieved from `snapshot.data().count`, where
-     * `snapshot` is the `AggregateQuerySnapshot` resulting from running the
-     * returned query.
-     */
-    count(): AggregateQuery<
-      {count: AggregateField<number>},
-      AppModelType,
-      DbModelType
-    >;
-
-    /**
-     * Returns a query that can perform the given aggregations.
-     *
-     * The returned query, when executed, calculates the specified aggregations
-     * over the documents in the result set of this query without actually
-     * downloading the documents.
-     *
-     * Using the returned query to perform aggregations is efficient because only
-     * the final aggregation values, not the documents' data, is downloaded. The
-     * returned query can perform aggregations of the documents in cases where
-     * the result set is prohibitively large to download entirely (thousands of
-     * documents).
-     *
-     * @param aggregateSpec An `AggregateSpec` object that specifies the aggregates
-     * to perform over the result set. The AggregateSpec specifies aliases for each
-     * aggregate, which can be used to retrieve the aggregate result.
-     * @example
-     * ```typescript
-     * const aggregateQuery = col.aggregate(query, {
-     *   countOfDocs: count(),
-     *   totalHours: sum('hours'),
-     *   averageScore: average('score')
-     * });
-     *
-     * const aggregateSnapshot = await aggregateQuery.get();
-     * const countOfDocs: number = aggregateSnapshot.data().countOfDocs;
-     * const totalHours: number = aggregateSnapshot.data().totalHours;
-     * const averageScore: number | null = aggregateSnapshot.data().averageScore;
-     * ```
-     */
-    aggregate<T extends AggregateSpec>(
-      aggregateSpec: T
-    ): AggregateQuery<T, AppModelType, DbModelType>;
-
-    /**
-     * Returns a query that can perform vector distance (similarity) search with given parameters.
-     *
-     * The returned query, when executed, performs a distance (similarity) search on the specified
-     * `vectorField` against the given `queryVector` and returns the top documents that are closest
-     * to the `queryVector`.
-     *
-     * Only documents whose `vectorField` field is a {@link VectorValue} of the same dimension as `queryVector`
-     * participate in the query, all other documents are ignored.
-     *
-     * @example
-     * ```
-     * // Returns the closest 10 documents whose Euclidean distance from their 'embedding' fields are closed to [41, 42].
-     * const vectorQuery = col.findNearest('embedding', [41, 42], {limit: 10, distanceMeasure: 'EUCLIDEAN'});
-     *
-     * const querySnapshot = await aggregateQuery.get();
-     * querySnapshot.forEach(...);
-     * ```
-     *
-     * @param vectorField - A string or {@link FieldPath} specifying the vector field to search on.
-     * @param queryVector - The {@link VectorValue} used to measure the distance from `vectorField` values in the documents.
-     * @param options - Options control the vector query. `limit` specifies the upper bound of documents to return, must
-     * be a positive integer with a maximum value of 1000. `distanceMeasure` specifies what type of distance is calculated
-     * when performing the query.
-     *
-     * @deprecated Use the new {@link findNearest} implementation
-     * accepting a single `options` param.
-     */
-    findNearest(
-      vectorField: string | FieldPath,
-      queryVector: VectorValue | Array<number>,
-      options: {
-        limit: number;
-        distanceMeasure: 'EUCLIDEAN' | 'COSINE' | 'DOT_PRODUCT';
-      }
-    ): VectorQuery<AppModelType, DbModelType>;
-
-    /**
-     * Returns a query that can perform vector distance (similarity) search with given parameters.
-     *
-     * The returned query, when executed, performs a distance (similarity) search on the specified
-     * `vectorField` against the given `queryVector` and returns the top documents that are closest
-     * to the `queryVector`.
-     *
-     * Only documents whose `vectorField` field is a {@link VectorValue} of the same dimension as `queryVector`
-     * participate in the query, all other documents are ignored.
-     *
-     * @example
-     * ```
-     * // Returns the closest 10 documents whose Euclidean distance from their 'embedding' fields are closed to [41, 42].
-     * const vectorQuery = col.findNearest({
-     *     vectorField: 'embedding',
-     *     queryVector: [41, 42],
-     *     limit: 10,
-     *     distanceMeasure: 'EUCLIDEAN',
-     *     distanceResultField: 'distance',
-     *     distanceThreshold: 0.125
-     * });
-     *
-     * const querySnapshot = await aggregateQuery.get();
-     * querySnapshot.forEach(...);
-     * ```
-     * @param options - An argument specifying the behavior of the {@link VectorQuery} returned by this function.
-     * See {@link VectorQueryOptions}.
-     */
-    findNearest(
-      options: VectorQueryOptions
-    ): VectorQuery<AppModelType, DbModelType>;
-
-    /**
-     * Returns true if this `Query` is equal to the provided one.
-     *
-     * @param other The `Query` to compare against.
-     * @return true if this `Query` is equal to the provided one.
-     */
-    isEqual(other: Query<AppModelType, DbModelType>): boolean;
-
-    /**
-     * Applies a custom data converter to this Query, allowing you to use your
-     * own custom model objects with Firestore. When you call get() on the
-     * returned Query, the provided converter will convert between Firestore
-     * data of type `NewDbModelType` and your custom type `NewAppModelType`.
-     *
-     * @param converter Converts objects to and from Firestore. Passing in
-     * `null` removes the current converter.
-     * @return A Query that uses the provided converter.
-     */
-    withConverter<
-      NewAppModelType,
-      NewDbModelType extends DocumentData = DocumentData,
-    >(
-      converter: FirestoreDataConverter<NewAppModelType, NewDbModelType>
-    ): Query<NewAppModelType, NewDbModelType>;
-    withConverter(converter: null): Query;
-  }
-
-  /**
-   * A `QuerySnapshot` contains zero or more `QueryDocumentSnapshot` objects
-   * representing the results of a query. The documents can be accessed as an
-   * array via the `docs` property or enumerated using the `forEach` method. The
-   * number of documents can be determined via the `empty` and `size`
-   * properties.
-   */
-  export class QuerySnapshot<
-    AppModelType = DocumentData,
-    DbModelType extends DocumentData = DocumentData,
-  > {
-    private constructor();
-
-    /**
-     * The query on which you called `get` or `onSnapshot` in order to get this
-     * `QuerySnapshot`.
-     */
-    readonly query: Query<AppModelType, DbModelType>;
-
-    /** An array of all the documents in the QuerySnapshot. */
-    readonly docs: Array<QueryDocumentSnapshot<AppModelType, DbModelType>>;
-
-    /** The number of documents in the QuerySnapshot. */
-    readonly size: number;
-
-    /** True if there are no documents in the QuerySnapshot. */
-    readonly empty: boolean;
-
-    /** The time this query snapshot was obtained. */
-    readonly readTime: Timestamp;
-
-    /**
-     * Returns an array of the documents changes since the last snapshot. If
-     * this is the first snapshot, all documents will be in the list as added
-     * changes.
-     */
-    docChanges(): DocumentChange<AppModelType, DbModelType>[];
-
-    /**
-     * Enumerates all of the documents in the QuerySnapshot.
-     *
-     * @param callback A callback to be called with a `DocumentSnapshot` for
-     * each document in the snapshot.
-     * @param thisArg The `this` binding for the callback.
-     */
-    forEach(
-      callback: (
-        result: QueryDocumentSnapshot<AppModelType, DbModelType>
-      ) => void,
-      thisArg?: any
-    ): void;
-
-    /**
-     * Returns true if the document data in this `QuerySnapshot` is equal to the
-     * provided one.
-     *
-     * @param other The `QuerySnapshot` to compare against.
-     * @return true if this `QuerySnapshot` is equal to the provided one.
-     */
-    isEqual(other: QuerySnapshot<AppModelType, DbModelType>): boolean;
-  }
-
-  /**
-   * A `VectorQuerySnapshot` contains zero or more `QueryDocumentSnapshot` objects
-   * representing the results of a query. The documents can be accessed as an
-   * array via the `docs` property or enumerated using the `forEach` method. The
-   * number of documents can be determined via the `empty` and `size`
-   * properties.
-   */
-  export class VectorQuerySnapshot<
-    AppModelType = DocumentData,
-    DbModelType extends DocumentData = DocumentData,
-  > {
-    private constructor();
-
-    /**
-     * The query on which you called `get` in order to get this
-     * `VectorQuerySnapshot`.
-     */
-    readonly query: VectorQuery<AppModelType, DbModelType>;
-
-    /** An array of all the documents in the QuerySnapshot. */
-    readonly docs: Array<QueryDocumentSnapshot<AppModelType, DbModelType>>;
-
-    /** The number of documents in the QuerySnapshot. */
-    readonly size: number;
-
-    /** True if there are no documents in the QuerySnapshot. */
-    readonly empty: boolean;
-
-    /** The time this query snapshot was obtained. */
-    readonly readTime: Timestamp;
-
-    /**
-     * Returns an array of the documents changes since the last snapshot. If
-     * this is the first snapshot, all documents will be in the list as added
-     * changes.
-     */
-    docChanges(): DocumentChange<AppModelType, DbModelType>[];
-
-    /**
-     * Enumerates all of the documents in the QuerySnapshot.
-     *
-     * @param callback A callback to be called with a `DocumentSnapshot` for
-     * each document in the snapshot.
-     * @param thisArg The `this` binding for the callback.
-     */
-    forEach(
-      callback: (
-        result: QueryDocumentSnapshot<AppModelType, DbModelType>
-      ) => void,
-      thisArg?: any
-    ): void;
-
-    /**
-     * Returns true if the document data in this `VectorQuerySnapshot` is equal to the
-     * provided one.
-     *
-     * @param other The `VectorQuerySnapshot` to compare against.
-     * @return true if this `VectorQuerySnapshot` is equal to the provided one.
-     */
-    isEqual(other: VectorQuerySnapshot<AppModelType, DbModelType>): boolean;
-  }
-
-  /**
-   * The type of `DocumentChange` may be 'added', 'removed', or 'modified'.
-   */
-  export type DocumentChangeType = 'added' | 'removed' | 'modified';
-
-  /**
-   * A `DocumentChange` represents a change to the documents matching a query.
-   * It contains the document affected and the type of change that occurred.
-   */
-  export interface DocumentChange<
-    AppModelType = DocumentData,
-    DbModelType extends DocumentData = DocumentData,
-  > {
-    /** The type of change ('added', 'modified', or 'removed'). */
-    readonly type: DocumentChangeType;
-
-    /** The document affected by this change. */
-    readonly doc: QueryDocumentSnapshot<AppModelType, DbModelType>;
-
-    /**
-     * The index of the changed document in the result set immediately prior to
-     * this DocumentChange (i.e. supposing that all prior DocumentChange objects
-     * have been applied). Is -1 for 'added' events.
-     */
-    readonly oldIndex: number;
-
-    /**
-     * The index of the changed document in the result set immediately after
-     * this DocumentChange (i.e. supposing that all prior DocumentChange
-     * objects and the current DocumentChange object have been applied).
-     * Is -1 for 'removed' events.
-     */
-    readonly newIndex: number;
-
-    /**
-     * Returns true if the data in this `DocumentChange` is equal to the
-     * provided one.
-     *
-     * @param other The `DocumentChange` to compare against.
-     * @return true if this `DocumentChange` is equal to the provided one.
-     */
-    isEqual(other: DocumentChange<AppModelType, DbModelType>): boolean;
-  }
-
-  /**
-   * A `CollectionReference` object can be used for adding documents, getting
-   * document references, and querying for documents (using the methods
-   * inherited from `Query`).
-   */
-  export class CollectionReference<
-    AppModelType = DocumentData,
-    DbModelType extends DocumentData = DocumentData,
-  > extends Query<AppModelType, DbModelType> {
-    private constructor();
-
-    /** The identifier of the collection. */
-    readonly id: string;
-
-    /**
-     * A reference to the containing Document if this is a subcollection, else
-     * null.
-     */
-    readonly parent: DocumentReference | null;
-
-    /**
-     * A string representing the path of the referenced collection (relative
-     * to the root of the database).
-     */
-    readonly path: string;
-
-    /**
-     * Retrieves the list of documents in this collection.
-     *
-     * The document references returned may include references to "missing
-     * documents", i.e. document locations that have no document present but
-     * which contain subcollections with documents. Attempting to read such a
-     * document reference (e.g. via `.get()` or `.onSnapshot()`) will return a
-     * `DocumentSnapshot` whose `.exists` property is false.
-     *
-     * @return {Promise<DocumentReference[]>} The list of documents in this
-     * collection.
-     */
-    listDocuments(): Promise<
-      Array<DocumentReference<AppModelType, DbModelType>>
-    >;
-
-    /**
-     * Get a `DocumentReference` for a randomly-named document within this
-     * collection. An automatically-generated unique ID will be used as the
-     * document ID.
-     *
-     * @return The `DocumentReference` instance.
-     */
-    doc(): DocumentReference<AppModelType, DbModelType>;
-
-    /**
-     * Get a `DocumentReference` for the document within the collection at the
-     * specified path.
-     *
-     * @param documentPath A slash-separated path to a document.
-     * @return The `DocumentReference` instance.
-     */
-    doc(documentPath: string): DocumentReference<AppModelType, DbModelType>;
-
-    /**
-     * Add a new document to this collection with the specified data, assigning
-     * it a document ID automatically.
-     *
-     * @param data An Object containing the data for the new document.
-     * @throws Error If the provided input is not a valid Firestore document.
-     * @return A Promise resolved with a `DocumentReference` pointing to the
-     * newly created document after it has been written to the backend.
-     */
-    add(
-      data: WithFieldValue<AppModelType>
-    ): Promise<DocumentReference<AppModelType, DbModelType>>;
-
-    /**
-     * Returns true if this `CollectionReference` is equal to the provided one.
-     *
-     * @param other The `CollectionReference` to compare against.
-     * @return true if this `CollectionReference` is equal to the provided one.
-     */
-    isEqual(other: CollectionReference<AppModelType, DbModelType>): boolean;
-
-    /**
-     * Applies a custom data converter to this CollectionReference, allowing you
-     * to use your own custom model objects with Firestore. When you call add()
-     * on the returned CollectionReference instance, the provided converter will
-     * convert between Firestore data of type `NewDbModelType` and your custom
-     * type `NewAppModelType`.
-     *
-     * @param converter Converts objects to and from Firestore. Passing in
-     * `null` removes the current converter.
-     * @return A CollectionReference that uses the provided converter.
-     */
-    withConverter<
-      NewAppModelType,
-      NewDbModelType extends DocumentData = DocumentData,
-    >(
-      converter: FirestoreDataConverter<NewAppModelType>
-    ): CollectionReference<NewAppModelType, NewDbModelType>;
-    withConverter(converter: null): CollectionReference;
-  }
-
-  /**
-   * A `CollectionGroup` refers to all documents that are contained in a
-   * collection or subcollection with a specific collection ID.
-   */
-  export class CollectionGroup<
-    AppModelType = DocumentData,
-    DbModelType extends DocumentData = DocumentData,
-  > extends Query<AppModelType, DbModelType> {
-    private constructor();
-
-    /**
-     * Partitions a query by returning partition cursors that can be used to run
-     * the query in parallel. The returned cursors are split points that can be
-     * used as starting and end points for individual query invocations.
-     *
-     * @param desiredPartitionCount The desired maximum number of partition
-     * points. The number must be strictly positive. The actual number of
-     * partitions returned may be fewer.
-     * @return An AsyncIterable of `QueryPartition`s.
-     */
-    getPartitions(
-      desiredPartitionCount: number
-    ): AsyncIterable<QueryPartition<AppModelType, DbModelType>>;
-
-    /**
-     * Applies a custom data converter to this `CollectionGroup`, allowing you
-     * to use your own custom model objects with Firestore. When you call get()
-     * on the returned `CollectionGroup`, the provided converter will convert
-     * between Firestore data of type `NewDbModelType` and your custom type
-     * `NewAppModelType`.
-     *
-     * Using the converter allows you to specify generic type arguments when
-     * storing and retrieving objects from Firestore.
-     *
-     * @example
-     * class Post {
-     *   constructor(readonly title: string, readonly author: string) {}
-     *
-     *   toString(): string {
-     *     return this.title + ', by ' + this.author;
-     *   }
-     * }
-     *
-     * const postConverter = {
-     *   toFirestore(post: Post): FirebaseFirestore.DocumentData {
-     *     return {title: post.title, author: post.author};
-     *   },
-     *   fromFirestore(
-     *     snapshot: FirebaseFirestore.QueryDocumentSnapshot
-     *   ): Post {
-     *     const data = snapshot.data();
-     *     return new Post(data.title, data.author);
-     *   }
-     * };
-     *
-     * const querySnapshot = await Firestore()
-     *   .collectionGroup('posts')
-     *   .withConverter(postConverter)
-     *   .get();
-     * for (const doc of querySnapshot.docs) {
-     *   const post = doc.data();
-     *   post.title; // string
-     *   post.toString(); // Should be defined
-     *   post.someNonExistentProperty; // TS error
-     * }
-     *
-     * @param converter Converts objects to and from Firestore. Passing in
-     * `null` removes the current converter.
-     * @return A `CollectionGroup` that uses the provided converter.
-     */
-    withConverter<
-      NewAppModelType,
-      NewDbModelType extends DocumentData = DocumentData,
-    >(
-      converter: FirestoreDataConverter<NewAppModelType, NewDbModelType>
-    ): CollectionGroup<NewAppModelType, NewDbModelType>;
-    withConverter(converter: null): CollectionGroup;
-  }
-
-  /**
-   * A split point that can be used in a query as a starting and/or end point for
-   * the query results. The cursors returned by {@link #startAt} and {@link
-   * #endBefore} can only be used in a query that matches the constraint of query
-   * that produced this partition.
-   */
-  export class QueryPartition<
-    AppModelType = DocumentData,
-    DbModelType extends DocumentData = DocumentData,
-  > {
-    private constructor();
-
-    /**
-     * The cursor that defines the first result for this partition or
-     * `undefined` if this is the first partition.  The cursor value must be
-     * destructured when passed to `startAt()` (for example with
-     * `query.startAt(...queryPartition.startAt)`).
-     *
-     * @return Cursor values that can be used with {@link Query#startAt} or
-     * `undefined` if this is the first partition.
-     */
-    get startAt(): unknown[] | undefined;
-
-    /**
-     * The cursor that defines the first result after this partition or
-     * `undefined` if this is the last partition.  The cursor value must be
-     * destructured when passed to `endBefore()` (for example with
-     * `query.endBefore(...queryPartition.endBefore)`).
-     *
-     * @return Cursor values that can be used with {@link Query#endBefore} or
-     * `undefined` if this is the last partition.
-     */
-    get endBefore(): unknown[] | undefined;
-
-    /**
-     * Returns a query that only returns the documents for this partition.
-     *
-     * @return A query partitioned by a {@link Query#startAt} and {@link
-     * Query#endBefore} cursor.
-     */
-    toQuery(): Query<AppModelType, DbModelType>;
-  }
-
-  /**
-   * Union type representing the aggregate type to be performed.
-   */
-  export type AggregateType = 'count' | 'avg' | 'sum';
-
-  /**
-   * The union of all `AggregateField` types that are supported by Firestore.
-   */
-  export type AggregateFieldType =
-    | ReturnType<typeof AggregateField.count>
-    | ReturnType<typeof AggregateField.sum>
-    | ReturnType<typeof AggregateField.average>;
-
-  /**
-   * Represents an aggregation that can be performed by Firestore.
-   */
-  // eslint-disable-next-line @typescript-eslint/no-unused-vars
-  export class AggregateField<T> {
-    private constructor();
-
-    /** A type string to uniquely identify instances of this class. */
-    readonly type = 'AggregateField';
-
-    /** The kind of aggregation performed by this AggregateField. */
-    public readonly aggregateType: AggregateType;
-
-    /**
-     * Compares this object with the given object for equality.
-     *
-     * This object is considered "equal" to the other object if and only if
-     * `other` performs the same kind of aggregation on the same field (if any).
-     *
-     * @param other The object to compare to this object for equality.
-     * @return `true` if this object is "equal" to the given object, as
-     * defined above, or `false` otherwise.
-     */
-    isEqual(other: AggregateField<any>): boolean;
-
-    /**
-     * Create an AggregateField object that can be used to compute the count of
-     * documents in the result set of a query.
-     */
-    static count(): AggregateField<number>;
-
-    /**
-     * Create an AggregateField object that can be used to compute the average of
-     * a specified field over a range of documents in the result set of a query.
-     * @param field Specifies the field to average across the result set.
-     */
-    static average(field: string | FieldPath): AggregateField<number | null>;
-
-    /**
-     * Create an AggregateField object that can be used to compute the sum of
-     * a specified field over a range of documents in the result set of a query.
-     * @param field Specifies the field to sum across the result set.
-     */
-    static sum(field: string | FieldPath): AggregateField<number>;
-  }
-
-  /**
-   * A type whose property values are all `AggregateField` objects.
-   */
-  export interface AggregateSpec {
-    [field: string]: AggregateFieldType;
-  }
-
-  /**
-   * A type whose keys are taken from an `AggregateSpec`, and whose values are
-   * the result of the aggregation performed by the corresponding
-   * `AggregateField` from the input `AggregateSpec`.
-   */
-  export type AggregateSpecData<T extends AggregateSpec> = {
-    [P in keyof T]: T[P] extends AggregateField<infer U> ? U : never;
-  };
-
-  /**
-   * A query that calculates aggregations over an underlying query.
-   */
-  export class AggregateQuery<
-    AggregateSpecType extends AggregateSpec,
-    AppModelType = DocumentData,
-    DbModelType extends DocumentData = DocumentData,
-  > {
-    private constructor();
-
-    /** The query whose aggregations will be calculated by this object. */
-    readonly query: Query<AppModelType, DbModelType>;
-
-    /**
-     * Executes this query.
-     *
-     * @return A promise that will be resolved with the results of the query.
-     */
-    get(): Promise<
-      AggregateQuerySnapshot<AggregateSpecType, AppModelType, DbModelType>
-    >;
-
-    /**
-     * Plans and optionally executes this query. Returns a Promise that will be
-     * resolved with the planner information, statistics from the query execution (if any),
-     * and the query results (if any).
-     *
-     * @return A Promise that will be resolved with the planner information, statistics
-     *  from the query execution (if any), and the query results (if any).
-     */
-    explain(
-      options?: ExplainOptions
-    ): Promise<
-      ExplainResults<
-        AggregateQuerySnapshot<AggregateSpecType, AppModelType, DbModelType>
-      >
-    >;
-
-    /**
-     * Compares this object with the given object for equality.
-     *
-     * This object is considered "equal" to the other object if and only if
-     * `other` performs the same aggregations as this `AggregateQuery` and
-     * the underlying Query of `other` compares equal to that of this object
-     * using `Query.isEqual()`.
-     *
-     * @param other The object to compare to this object for equality.
-     * @return `true` if this object is "equal" to the given object, as
-     * defined above, or `false` otherwise.
-     */
-    isEqual(
-      other: AggregateQuery<AggregateSpecType, AppModelType, DbModelType>
-    ): boolean;
-  }
-
-  /**
-   * The results of executing an aggregation query.
-   */
-  export class AggregateQuerySnapshot<
-    AggregateSpecType extends AggregateSpec,
-    AppModelType = DocumentData,
-    DbModelType extends DocumentData = DocumentData,
-  > {
-    private constructor();
-
-    /** The query that was executed to produce this result. */
-    readonly query: AggregateQuery<
-      AggregateSpecType,
-      AppModelType,
-      DbModelType
-    >;
-
-    /** The time this snapshot was read. */
-    readonly readTime: Timestamp;
-
-    /**
-     * Returns the results of the aggregations performed over the underlying
-     * query.
-     *
-     * The keys of the returned object will be the same as those of the
-     * `AggregateSpec` object specified to the aggregation method, and the
-     * values will be the corresponding aggregation result.
-     *
-     * @returns The results of the aggregations performed over the underlying
-     * query.
-     */
-    data(): AggregateSpecData<AggregateSpecType>;
-
-    /**
-     * Compares this object with the given object for equality.
-     *
-     * Two `AggregateQuerySnapshot` instances are considered "equal" if they
-     * have the same data and their underlying queries compare "equal" using
-     * `AggregateQuery.isEqual()`.
-     *
-     * @param other The object to compare to this object for equality.
-     * @return `true` if this object is "equal" to the given object, as
-     * defined above, or `false` otherwise.
-     */
-    isEqual(
-      other: AggregateQuerySnapshot<
-        AggregateSpecType,
-        AppModelType,
-        DbModelType
-      >
-    ): boolean;
-  }
-
-  /**
-   * A query that finds the document whose vector fields are closest to a certain vector.
-   */
-  export class VectorQuery<
-    AppModelType = DocumentData,
-    DbModelType extends DocumentData = DocumentData,
-  > {
-    private constructor();
-
-    /** The query whose results participants in the distance search. */
-    readonly query: Query<AppModelType, DbModelType>;
-
-    /**
-     * Executes this query.
-     *
-     * @return A promise that will be resolved with the results of the query.
-     */
-    get(): Promise<VectorQuerySnapshot<AppModelType, DbModelType>>;
-
-    /**
-     * Compares this object with the given object for equality.
-     *
-     * This object is considered "equal" to the other object if and only if
-     * `other` performs the same vector distance search as this `VectorQuery` and
-     * the underlying Query of `other` compares equal to that of this object
-     * using `Query.isEqual()`.
-     *
-     * @param other The object to compare to this object for equality.
-     * @return `true` if this object is "equal" to the given object, as
-     * defined above, or `false` otherwise.
-     */
-    isEqual(other: VectorQuery<AppModelType, DbModelType>): boolean;
-  }
-
-  /**
-   * Represent a vector type in Firestore documents.
-   */
-  export class VectorValue {
-    private constructor(values: number[] | undefined);
-
-    /**
-     * Returns a copy of the raw number array form of the vector.
-     */
-    toArray(): number[];
-
-    /**
-     * Returns true if the two `VectorValue` has the same raw number arrays, returns false otherwise.
-     */
-    isEqual(other: VectorValue): boolean;
-  }
-
-  /**
-   * Sentinel values that can be used when writing document fields with set(),
-   * create() or update().
-   */
-  export class FieldValue {
-    private constructor();
-
-    /**
-     * Returns a sentinel used with set(), create() or update() to include a
-     * server-generated timestamp in the written data.
-     *
-     * @return The FieldValue sentinel for use in a call to set(), create() or
-     * update().
-     */
-    static serverTimestamp(): FieldValue;
-
-    /**
-     * Returns a sentinel for use with update() or set() with {merge:true} to
-     * mark a field for deletion.
-     *
-     * @return The FieldValue sentinel for use in a call to set() or update().
-     */
-    static delete(): FieldValue;
-
-    /**
-     * Returns a special value that can be used with set(), create() or update()
-     * that tells the server to increment the field's current value by the given
-     * value.
-     *
-     * If either current field value or the operand uses floating point
-     * precision, both values will be interpreted as floating point numbers and
-     * all arithmetic will follow IEEE 754 semantics. Otherwise, integer
-     * precision is kept and the result is capped between -2^63 and 2^63-1.
-     *
-     * If the current field value is not of type 'number', or if the field does
-     * not yet exist, the transformation will set the field to the given value.
-     *
-     * @param n The value to increment by.
-     * @return The FieldValue sentinel for use in a call to set(), create() or
-     * update().
-     */
-    static increment(n: number): FieldValue;
-
-    /**
-     * Returns a special value that can be used with set(), create() or update()
-     * that tells the server to union the given elements with any array value
-     * that already exists on the server. Each specified element that doesn't
-     * already exist in the array will be added to the end. If the field being
-     * modified is not already an array it will be overwritten with an array
-     * containing exactly the specified elements.
-     *
-     * @param elements The elements to union into the array.
-     * @return The FieldValue sentinel for use in a call to set(), create() or
-     * update().
-     */
-    static arrayUnion(...elements: any[]): FieldValue;
-
-    /**
-     * Returns a special value that can be used with set(), create() or update()
-     * that tells the server to remove the given elements from any array value
-     * that already exists on the server. All instances of each element
-     * specified will be removed from the array. If the field being modified is
-     * not already an array it will be overwritten with an empty array.
-     *
-     * @param elements The elements to remove from the array.
-     * @return The FieldValue sentinel for use in a call to set(), create() or
-     * update().
-     */
-    static arrayRemove(...elements: any[]): FieldValue;
-
-    /**
-     * @return A new `VectorValue` constructed with a copy of the given array of number.
-     */
-    static vector(values?: number[]): VectorValue;
-
-    /**
-     * Returns true if this `FieldValue` is equal to the provided one.
-     *
-     * @param other The `FieldValue` to compare against.
-     * @return true if this `FieldValue` is equal to the provided one.
-     */
-    isEqual(other: FieldValue): boolean;
-  }
-
-  /**
-   * A FieldPath refers to a field in a document. The path may consist of a
-   * single field name (referring to a top-level field in the document), or a
-   * list of field names (referring to a nested field in the document).
-   */
-  export class FieldPath {
-    /**
-     * Creates a FieldPath from the provided field names. If more than one field
-     * name is provided, the path will point to a nested field in a document.
-     *
-     * @param fieldNames A list of field names.
-     */
-    constructor(...fieldNames: string[]);
-
-    /**
-     * Returns a special sentinel FieldPath to refer to the ID of a document.
-     * It can be used in queries to sort or filter by the document ID.
-     */
-    static documentId(): FieldPath;
-
-    /**
-     * Returns true if this `FieldPath` is equal to the provided one.
-     *
-     * @param other The `FieldPath` to compare against.
-     * @return true if this `FieldPath` is equal to the provided one.
-     */
-    isEqual(other: FieldPath): boolean;
-  }
-
-  /**
-   * A Timestamp represents a point in time independent of any time zone or
-   * calendar, represented as seconds and fractions of seconds at nanosecond
-   * resolution in UTC Epoch time. It is encoded using the Proleptic Gregorian
-   * Calendar which extends the Gregorian calendar backwards to year one. It is
-   * encoded assuming all minutes are 60 seconds long, i.e. leap seconds are
-   * "smeared" so that no leap second table is needed for interpretation. Range
-   * is from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59.999999999Z.
-   *
-   * @see https://github.com/google/protobuf/blob/master/src/google/protobuf/timestamp.proto
-   */
-  export class Timestamp {
-    /**
-     * Creates a new timestamp with the current date, with millisecond precision.
-     *
-     * @return A new `Timestamp` representing the current date.
-     */
-    static now(): Timestamp;
-
-    /**
-     * Creates a new timestamp from the given date.
-     *
-     * @param date The date to initialize the `Timestamp` from.
-     * @return A new `Timestamp` representing the same point in time as the
-     * given date.
-     */
-    static fromDate(date: Date): Timestamp;
-
-    /**
-     * Creates a new timestamp from the given number of milliseconds.
-     *
-     * @param milliseconds Number of milliseconds since Unix epoch
-     * 1970-01-01T00:00:00Z.
-     * @return A new `Timestamp` representing the same point in time as the
-     * given number of milliseconds.
-     */
-    static fromMillis(milliseconds: number): Timestamp;
-
-    /**
-     * Creates a new timestamp.
-     *
-     * @param seconds The number of seconds of UTC time since Unix epoch
-     * 1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to
-     * 9999-12-31T23:59:59Z inclusive.
-     * @param nanoseconds The non-negative fractions of a second at nanosecond
-     * resolution. Negative second values with fractions must still have
-     * non-negative nanoseconds values that count forward in time. Must be from
-     * 0 to 999,999,999 inclusive.
-     */
-    constructor(seconds: number, nanoseconds: number);
-
-    /**
-     * The number of seconds of UTC time since Unix epoch 1970-01-01T00:00:00Z.
-     */
-    readonly seconds: number;
-
-    /** The non-negative fractions of a second at nanosecond resolution. */
-    readonly nanoseconds: number;
-
-    /**
-     * Returns a new `Date` corresponding to this timestamp. This may lose
-     * precision.
-     *
-     * @return JavaScript `Date` object representing the same point in time as
-     * this `Timestamp`, with millisecond precision.
-     */
-    toDate(): Date;
-
-    /**
-     * Returns the number of milliseconds since Unix epoch 1970-01-01T00:00:00Z.
-     *
-     * @return The point in time corresponding to this timestamp, represented as
-     * the number of milliseconds since Unix epoch 1970-01-01T00:00:00Z.
-     */
-    toMillis(): number;
-
-    /**
-     * Returns true if this `Timestamp` is equal to the provided one.
-     *
-     * @param other The `Timestamp` to compare against.
-     * @return 'true' if this `Timestamp` is equal to the provided one.
-     */
-    isEqual(other: Timestamp): boolean;
-
-    /**
-     * Converts this object to a primitive `string`, which allows `Timestamp` objects to be compared
-     * using the `>`, `<=`, `>=` and `>` operators.
-     *
-     * @return a string encoding of this object.
-     */
-    valueOf(): string;
-  }
-
-  /**
-   * Builds a Firestore data bundle with results from the given document and query snapshots.
-   */
-  export class BundleBuilder {
-    /** The ID of this bundle. */
-    readonly bundleId: string;
-
-    /**
-     * Adds a Firestore `DocumentSnapshot` to the bundle. Both the documents data and the document
-     * read time will be included in the bundle.
-     *
-     * @param documentSnapshot A `DocumentSnapshot` to add.
-     * @returns This instance.
-     */
-    add<AppModelType, DbModelType extends DocumentData>(
-      documentSnapshot: DocumentSnapshot<AppModelType, DbModelType>
-    ): BundleBuilder;
-
-    /**
-     * Adds a Firestore `QuerySnapshot` to the bundle. Both the documents in the query results and
-     * the query read time will be included in the bundle.
-     *
-     * @param queryName The name of the query to add.
-     * @param querySnapshot A `QuerySnapshot` to add to the bundle.
-     * @returns This instance.
-     */
-    add<AppModelType, DbModelType extends DocumentData>(
-      queryName: string,
-      querySnapshot: QuerySnapshot<AppModelType, DbModelType>
-    ): BundleBuilder;
-
-    /**
-     * Builds the bundle and returns the result as a `Buffer` instance.
-     */
-    build(): Buffer;
-  }
-
-  /**
-   * The v1beta1 Veneer client. This client provides access to to the underlying
-   * Firestore v1beta1 RPCs.
-   * @deprecated Use v1 instead.
-   */
-  export const v1beta1: {
-    FirestoreClient: typeof import('./v1beta1/firestore_client').FirestoreClient;
-  };
-
-  /**
-   * The v1 Veneer clients. These clients provide access to the Firestore Admin
-   * API and the underlying Firestore v1 RPCs.
-   */
-  export const v1: {
-    FirestoreClient: typeof import('./v1/firestore_client').FirestoreClient;
-    FirestoreAdminClient: typeof import('./v1/firestore_admin_client').FirestoreAdminClient;
-  };
-
-  /**
-   * Status codes returned by Firestore's gRPC calls.
-   */
-  export enum GrpcStatus {
-    OK = 0,
-    CANCELLED = 1,
-    UNKNOWN = 2,
-    INVALID_ARGUMENT = 3,
-    DEADLINE_EXCEEDED = 4,
-    NOT_FOUND = 5,
-    ALREADY_EXISTS = 6,
-    PERMISSION_DENIED = 7,
-    RESOURCE_EXHAUSTED = 8,
-    FAILED_PRECONDITION = 9,
-    ABORTED = 10,
-    OUT_OF_RANGE = 11,
-    UNIMPLEMENTED = 12,
-    INTERNAL = 13,
-    UNAVAILABLE = 14,
-    DATA_LOSS = 15,
-    UNAUTHENTICATED = 16,
-  }
-
-  /**
-   * A `Filter` represents a restriction on one or more field values and can
-   * be used to refine the results of a {@link Query}.
-   * `Filters`s are created by invoking {@link Filter#where}, {@link Filter#or},
-   * or {@link Filter#and} and can then be passed to {@link Query#where}
-   * to create a new {@link Query} instance that also contains this `Filter`.
-   */
-  export abstract class Filter {
-    /**
-     * Creates and returns a new [Filter]{@link Filter}, which can be
-     * applied to [Query.where()]{@link Query#where}, [Filter.or()]{@link Filter#or},
-     * or [Filter.and()]{@link Filter#and}. When applied to a [Query]{@link Query}
-     * it requires that documents must contain the specified field and that its value should
-     * satisfy the relation constraint provided.
-     *
-     * Returns a new Filter that can be used to constrain the value of a Document property.
-     *
-     * @param {string|FieldPath} fieldPath The name of a property value to compare.
-     * @param {string} opStr A comparison operation in the form of a string
-     * (e.g., "<").
-     * @param {*} value The value to which to compare the field for inclusion in
-     * a query.
-     * @returns {Filter} The created Filter.
-     *
-     * @example
-     * ```
-     * let collectionRef = firestore.collection('col');
-     *
-     * collectionRef.where(Filter.where('foo', '==', 'bar')).get().then(querySnapshot => {
-     *   querySnapshot.forEach(documentSnapshot => {
-     *     console.log(`Found document at ${documentSnapshot.ref.path}`);
-     *   });
-     * });
-     * ```
-     */
-    static where(
-      fieldPath: string | FieldPath,
-      opStr: WhereFilterOp,
-      value: unknown
-    ): Filter;
-
-    /**
-     * Creates and returns a new [Filter]{@link Filter} that is a
-     * disjunction of the given {@link Filter}s. A disjunction filter includes
-     * a document if it satisfies any of the given {@link Filter}s.
-     *
-     * The returned Filter can be applied to [Query.where()]{@link Query#where},
-     * [Filter.or()]{@link Filter#or}, or [Filter.and()]{@link Filter#and}. When
-     * applied to a [Query]{@link Query} it requires that documents must satisfy
-     * one of the provided {@link Filter}s.
-     *
-     * @param {...Filter} filters  Optional. The {@link Filter}s
-     * for OR operation. These must be created with calls to {@link Filter#where},
-     * {@link Filter#or}, or {@link Filter#and}.
-     * @returns {Filter} The created {@link Filter}.
-     *
-     * @example
-     * ```
-     * let collectionRef = firestore.collection('col');
-     *
-     * // doc.foo == 'bar' || doc.baz > 0
-     * let orFilter = Filter.or(Filter.where('foo', '==', 'bar'), Filter.where('baz', '>', 0));
-     *
-     * collectionRef.where(orFilter).get().then(querySnapshot => {
-     *   querySnapshot.forEach(documentSnapshot => {
-     *     console.log(`Found document at ${documentSnapshot.ref.path}`);
-     *   });
-     * });
-     * ```
-     */
-    static or(...filters: Filter[]): Filter;
-
-    /**
-     * Creates and returns a new [Filter]{@link Filter} that is a
-     * conjunction of the given {@link Filter}s. A conjunction filter includes
-     * a document if it satisfies all of the given {@link Filter}s.
-     *
-     * The returned Filter can be applied to [Query.where()]{@link Query#where},
-     * [Filter.or()]{@link Filter#or}, or [Filter.and()]{@link Filter#and}. When
-     * applied to a [Query]{@link Query} it requires that documents must satisfy
-     * one of the provided {@link Filter}s.
-     *
-     * @param {...Filter} filters  Optional. The {@link Filter}s
-     * for OR operation. These must be created with calls to {@link Filter#where},
-     * {@link Filter#or}, or {@link Filter#and}.
-     * @returns {Filter} The created {@link Filter}.
-     *
-     * @example
-     * ```
-     * let collectionRef = firestore.collection('col');
-     *
-     * // doc.foo == 'bar' && doc.baz > 0
-     * let orFilter = Filter.and(Filter.where('foo', '==', 'bar'), Filter.where('baz', '>', 0));
-     *
-     * collectionRef.where(orFilter).get().then(querySnapshot => {
-     *   querySnapshot.forEach(documentSnapshot => {
-     *     console.log(`Found document at ${documentSnapshot.ref.path}`);
-     *   });
-     * });
-     * ```
-     */
-    static and(...filters: Filter[]): Filter;
-  }
-
-  type Duration = {
-    /** Signed seconds of the span of time. */
-    seconds: number;
-
-    /**
-     * Signed fractions of a second at nanosecond resolution of the span
-     * of time. Durations less than one second are represented with a 0
-     * `seconds` field and a positive or negative `nanos` field. For durations
-     * of one second or more, a non-zero value for the `nanos` field must be
-     * of the same sign as the `seconds` field. Must be from -999,999,999
-     * to +999,999,999 inclusive.
-     */
-    nanoseconds: number;
-  };
-
-  /** Options used to configure explain queries. */
-  export interface ExplainOptions {
-    /**
-     * Whether analyzing the query is enabled. If true, the query will be
-     * executed and execution statistics will be returned as part of the
-     * [ExplainResults]{@link ExplainResults}.
-     */
-    readonly analyze?: boolean;
-  }
-
-  /**
-   * PlanSummary contains information about the planning stage of a query.
-   */
-  export interface PlanSummary {
-    /**
-     * Information about the indexes that were used to serve the query.
-     * This should be inspected or logged, because the contents are intended to be
-     * human-readable. Contents are subject to change, and it is advised to not
-     * program against this object.
-     */
-    readonly indexesUsed: Record<string, unknown>[];
-  }
-
-  /** ExecutionStats contains information about the execution of a query. */
-  export interface ExecutionStats {
-    /** The number of query results. */
-    readonly resultsReturned: number;
-
-    /** The total execution time of the query. */
-    readonly executionDuration: Duration;
-
-    /** The number of read operations that occurred when executing the query. */
-    readonly readOperations: number;
-
-    /**
-     * Contains additional statistics related to the query execution.
-     * This should be inspected or logged, because the contents are intended to be
-     * human-readable. Contents are subject to change, and it is advised to not
-     * program against this object.
-     */
-    readonly debugStats: Record<string, unknown>;
-  }
-
-  /**
-   * ExplainMetrics contains information about planning and execution of a query.
-   */
-  export interface ExplainMetrics {
-    /**
-     * Information about the query plan.
-     */
-    readonly planSummary: PlanSummary;
-
-    /**
-     * Information about the execution of the query, or null if the query was
-     * not executed.
-     */
-    readonly executionStats: ExecutionStats | null;
-  }
-
-  /**
-   * ExplainResults contains information about planning, execution, and results
-   * of a query.
-   */
-  export interface ExplainResults<T> {
-    /**
-     * Information about planning and execution of the query.
-     */
-    readonly metrics: ExplainMetrics;
-
-    /**
-     * The snapshot that contains the results of executing the query, or null
-     * if the query was not executed.
-     */
-    readonly snapshot: T | null;
-  }
-
-  /**
-   * Specifies the behavior of the {@link VectorQuery} generated by a call to {@link Query.findNearest}.
-   */
-  export interface VectorQueryOptions {
-    /**
-     * A string or {@link FieldPath} specifying the vector field to search on.
-     */
-    vectorField: string | FieldPath;
-
-    /**
-     * The {@link VectorValue} used to measure the distance from `vectorField` values in the documents.
-     */
-    queryVector: VectorValue | Array<number>;
-
-    /**
-     * Specifies the upper bound of documents to return, must be a positive integer with a maximum value of 1000.
-     */
-    limit: number;
-
-    /**
-     * Specifies what type of distance is calculated when performing the query.
-     */
-    distanceMeasure: 'EUCLIDEAN' | 'COSINE' | 'DOT_PRODUCT';
-
-    /**
-     * Optionally specifies the name of a field that will be set on each returned DocumentSnapshot,
-     * which will contain the computed distance for the document.
-     */
-    distanceResultField?: string | FieldPath;
-
-    /**
-     * Specifies a threshold for which no less similar documents will be returned. The behavior
-     * of the specified `distanceMeasure` will affect the meaning of the distance threshold.
-     *
-     *  - For `distanceMeasure: "EUCLIDEAN"`, the meaning of `distanceThreshold` is:
-     *     SELECT docs WHERE euclidean_distance <= distanceThreshold
-     *  - For `distanceMeasure: "COSINE"`, the meaning of `distanceThreshold` is:
-     *     SELECT docs WHERE cosine_distance <= distanceThreshold
-     *  - For `distanceMeasure: "DOT_PRODUCT"`, the meaning of `distanceThreshold` is:
-     *     SELECT docs WHERE dot_product_distance >= distanceThreshold
-     */
-    distanceThreshold?: number;
-  }
-}
    
\ No newline at end of file
-declare module '@google-cloud/firestore' {
-  export = FirebaseFirestore;
-}
diff --git a/node_modules/@google-cloud/firestore/types/protos/firestore_admin_v1_proto_api.d.ts b/node_modules/@google-cloud/firestore/types/protos/firestore_admin_v1_proto_api.d.ts
old mode 100644
new mode 100755
diff --git a/node_modules/@google-cloud/firestore/types/protos/firestore_v1_proto_api.d.ts b/node_modules/@google-cloud/firestore/types/protos/firestore_v1_proto_api.d.ts
old mode 100644
new mode 100755
diff --git a/node_modules/@google-cloud/firestore/types/protos/firestore_v1beta1_proto_api.d.ts b/node_modules/@google-cloud/firestore/types/protos/firestore_v1beta1_proto_api.d.ts
old mode 100644
new mode 100755
diff --git a/node_modules/@google-cloud/firestore/types/v1/firestore_admin_client.d.ts b/node_modules/@google-cloud/firestore/types/v1/firestore_admin_client.d.ts
old mode 100644
new mode 100755
diff --git a/node_modules/@google-cloud/firestore/types/v1/firestore_client.d.ts b/node_modules/@google-cloud/firestore/types/v1/firestore_client.d.ts
old mode 100644
new mode 100755
diff --git a/node_modules/@google-cloud/firestore/types/v1beta1/firestore_client.d.ts b/node_modules/@google-cloud/firestore/types/v1beta1/firestore_client.d.ts
old mode 100644
new mode 100755
